##
## File            : $File$
## SCM             : $URL$
##
## Copyright       : Realworld Systems
##                   e-mail  : support@realworld-systems.com
##                   address : Venusstraat 17, 4105 JH Culemborg, The Netherlands
##                   tel     : +31(0)345 614406
##                   fax     : +31(0)345 614319
##
## Contains        : 
##
##
## Date written    : 2015-01-16
## Date changed    : $Date$
## Revision        : $Rev$

_package rwan
$


#remex(:area_binary_op_collection)

_pragma(classify_level=basic, topic={analysis})
##
## Area collection that binary combines two area
## collections. Allowed operations are :xor, :union, :subtraction, :intersection.
##
def_slotted_exemplar(:area_binary_op_collection,
	{
		{:operation, _unset}
	}, :base_area_collection)
$


_pragma(classify_level=basic, topic={analysis})
_method area_binary_op_collection.new(dsm, base_col, other_col, operation)
	_return _clone.init(dsm, base_col, other_col, operation)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method area_binary_op_collection.init(dsm, base_col, other_col, operation)
	.operation << operation
	_if _not {:xor, :union, :subtraction, :intersection}.includes?(operation)
	_then
		condition.raise(:error, :string, write_string("Unknown operation", operation))
	_endif
	_if other_col _is _unset
	_then
		condition.raise(:error, :string, "Please supply other collection")
	_endif 
	_return _super.init(dsm, base_col, other_col)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method area_binary_op_collection.serial_slots()
	_local (keys, values) << _super.serial_slots()
	keys.add_all_last({:operation})
	values.add_all_last({.operation})
	_return keys, values	
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method area_binary_op_collection.init_from_serial(dsm, base_cols, op)
    _super.init_from_serial(dsm, base_cols)
    .operation << op
    _return _self 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method area_binary_op_collection.other_collection
	_return .base_collections[2]
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method area_binary_op_collection.equals?(other)
	_return _self.is_class_of?(other) _andif
		other.equals_in_details?(.base_collections, .operation)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method area_binary_op_collection.equals_in_details?(base_cols, op)
	_return _super.equals_in_details?(base_cols, op) 
		.operation = op
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method area_binary_op_collection.convert_to_geometry(_optional bounds)
	_local area1 << _self.base_collection.convert_to_geometry(bounds)
	_local area2 << _self.other_collection.convert_to_geometry(bounds)
	_local methd << write_string(.operation+:|()|).as_symbol()
	
	_local area_result << area1.perform(methd, area2)
	area_result.world << area1.world
	_return area_result
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method area_binary_op_collection.description
	_return _self.message(:description, .operation)
_endmethod
$
