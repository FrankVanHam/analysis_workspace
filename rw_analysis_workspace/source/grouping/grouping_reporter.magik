_package rwan
$

#remex(:grouping_reporter)
$

_pragma(classify_level=basic, topic={analysis})
## Siple reporter that writes the results of a grouping engine to a file.
def_slotted_exemplar(:grouping_reporter,
	{})
$

_pragma(classify_level=basic, topic={analysis})
_method grouping_reporter.new()
	_return _clone.init()
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_private _method grouping_reporter.init()
	_return _self 
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method grouping_reporter.report(report_struct, file_name)
	_local out << external_text_output_stream.new(file_name)
	_protect
		_self.report_on_stream(report_struct, out)
	_protection
		out.close()
	_endprotect 
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_private _method grouping_reporter.report_on_stream(report_struct, out, _optional indent)
	_dynamic !print_float_precision! << 10
	_local ind << indent.default(0)
	_for i_elem _over report_struct.value.reports()
	_loop
		out.write(tab_char*ind)
		_if report_struct.key _is _unset
		_then
			out.write(_self.message(:all_records))
		_else
			out.write(report_struct.key.key.external_name, tab_char,
				   report_struct.key.value)
		_endif 
		out.write(tab_char)
		out.write(i_elem.operator, tab_char)
		_if i_elem.field _isnt _unset
		_then
			out.write(i_elem.field.external_name)
		_else
			out.write(_self.message(:all_records))
		_endif
		out.write(tab_char)
		_local (value, unit) << i_elem.value_as_number_and_unit()
		out.write(value, tab_char)
		_if unit _isnt _unset
		_then
			out.write(unit)
		_endif
		out.newline()
	_endloop 
	
	_for i_sub _over report_struct.children()
	_loop
		_self.report_on_stream(i_sub, out, ind+1)
	_endloop 
_endmethod
$


_pragma(classify_level=basic, topic={analysis})
_private _method grouping_reporter.message(mess_id)
	_return message_handler.new(_self.class_name).human_string(mess_id)
_endmethod
$
