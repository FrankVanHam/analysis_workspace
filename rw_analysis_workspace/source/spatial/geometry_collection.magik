##
## File            : $File$
## SCM             : $URL$
##
## Copyright       : Realworld Systems
##                   e-mail  : support@realworld-systems.com
##                   address : Venusstraat 17, 4105 JH Culemborg, The Netherlands
##                   tel     : +31(0)345 614406
##                   fax     : +31(0)345 614319
##
## Contains        : 
##
##
## Date written    : 2014-12-24
## Date changed    : $Date$
## Revision        : $Rev$

_package rwan
$

#remex(:geometry_collection)

_pragma(classify_level=basic, topic={analysis})
##
## Analysis collection that holds a geometry_set.
##
def_slotted_exemplar(:geometry_collection,
	{
		{:id, _unset},
		{:geometry, _unset, :readable}
	}, :base_spatial_collection)
$

_pragma(classify_level=basic, topic={analysis})
_method geometry_collection.new(dsm, geometry)
	_if _not geometry.is_kind_of?(geometry_set_mixin)
	_then
		condition.raise(:error, :string, "Input must be geometry set")
	_endif 
	_return _clone.init(dsm, geometry)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_private _method geometry_collection.init(dsm, geometry)
	.geometry << geometry
	_return _super.init(dsm)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_private _method geometry_collection.init_copy()
	_if .id _isnt _unset
	_then 
		.dsm.increase_ref_count(.id)
	_endif 
	_return _self
_endmethod
$

_pragma(classify_level=restricted, topic={demo})
_method geometry_collection.serial_slots()
	_local (keys, values) << _super.serial_slots()
	keys.add_all_last({:geometry})

	_if .id _is _unset
	_then 
		.id << .dsm.materialize_spatial(_self)
		.dsm.increase_ref_count(.id)
	_endif 
	values.add_all_last({.id})
	_return keys, values
_endmethod
$

_pragma(classify_level=basic, topic={demo})
_private _method geometry_collection.init_from_serial(dsm, base_cols, id)
	_super.init_from_serial(dsm, base_cols)
	.id << id
	
	.geometry << .dsm.geometry_set(.id)
	_return _self 
_endmethod
$

_pragma(classify_level=basic, topic={demo})
_method geometry_collection.equals?(other)
	_return _self.is_class_of?(other) _andif 
		other.equals_in_details?(.base_collections, .geometry)
_endmethod
$

_pragma(classify_level=restricted, topic={demo})
_method geometry_collection.equals_in_details?(base_cols, geometry)
	_if _not _super.equals_in_details?(base_cols) _then _return _false _endif
	_return _self.geometry_sets_equal?(.geometry, geometry)
_endmethod
$

_pragma(classify_level=restricted, topic={demo})
_private _method geometry_collection.geometry_sets_equal?( gs1, gs2 )
	_if gs1.size <> gs2.size _then _return _false _endif 
	_for i_geom _over gs1.fast_elements()
	_loop @outer
		_for i_geom2 _over gs2.fast_elements()
		_loop
			_if i_geom.equal_to?(i_geom2)
			_then
				_continue @outer
			_endif
		_endloop
		_return _false
	_endloop
	_return _true 
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method geometry_collection.size
	_return .geometry.size
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method geometry_collection.convert_to_geometry(_optional bounds)
	_if bounds _is _unset
	_then 
		_return .geometry
	_else
		.geometry.select(:bounds_interacting_with, bounds)
	_endif 
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method geometry_collection.convert_to_geometry_is_fast?
	_return _true  
_endmethod
$


_pragma(classify_level=basic, topic={analysis})
_method geometry_collection.description
	_if .geometry.is_collection?
	_then
		size << .geometry.size
		a_geom << .geometry.an_element()
	_else
		size << 1
		a_geom << .geometry
	_endif
	
	_return _self.message(:description, size, a_geom.geom_category)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method geometry_collection.discard()
	_if .id _isnt _unset
	_then
		_local c << .dsm.decrease_ref_count(.id)
		_if c = 0
		_then 
			.dsm.discard_geometry_set(.id)
		_endif 
		.id << _unset
	_endif
	_super.discard()
_endmethod
$
