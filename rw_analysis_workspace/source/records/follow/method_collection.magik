##
## File            : $File$
## SCM             : $URL$
##
## Copyright       : Realworld Systems
##                   e-mail  : support@realworld-systems.com
##                   address : Venusstraat 17, 4105 JH Culemborg, The Netherlands
##                   tel     : +31(0)345 614406
##                   fax     : +31(0)345 614319
##
## Contains        : 
##
##
## Date written    : 2014-12-24
## Date changed    : $Date$
## Revision        : $Rev$

_package rwan
$

#remex(:method_collection)

_pragma(classify_level=basic, topic={analysis})
##
## Analysis collection that performs some kind of method with
## some arguments on each record to yield the actual records we
## are interested in.
##
def_slotted_exemplar(:method_collection,
	{
		{:methd, _unset},
		{:args, _unset}
	}, :base_follow_collection)
$

_pragma(classify_level=basic, topic={analysis})
_method method_collection.new(dsm, base_col, target_col, methd, _optional args)
	_return _clone.init(dsm, base_col, target_col, methd, args)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_private _method method_collection.init(dsm, base_col, target_col, methd, args)
	.methd << methd
	.args << args.default({})
	_return _super.init( dsm, base_col, target_col ) 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method method_collection.serial_slots()
	_local (keys, values) << _super.serial_slots()
	keys.add_all_last({:method, :args})
	values.add_all_last({.methd, .args})
	_return keys, values	
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method method_collection.init_from_serial(dsm, base_cols, target_ds_name, target_table_name, methd, args)
    _super.init_from_serial(dsm, base_cols, target_ds_name, target_table_name)
    .methd << methd
    .args << args
    _return _self 
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method method_collection.equals?(other)
	_return _self.is_class_of?(other) _andif
		other.equals_in_details?(.base_collections, .target_ds_name, .target_table_name, .methd, .args)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method method_collection.equals_in_details?(base_cols, target_ds_name, target_table_name, methd, args)
	_return _super.equals_in_details?(base_cols, target_ds_name, target_table_name) _andif 
		.methd = methd _andif
		.args = args
_endmethod
$


_pragma(classify_level=basic, topic={analysis, collections})
_iter _method method_collection.fast_elements()
	_dynamic !root_query!
	_local rwo_type << _self.base_collection.expose().name
	_local done << large_record_register.new(100)
	_for i_rec _over _self.base_collection.fast_elements()
	_loop
		_local answers << _self.safe_list(i_rec)
		_if answers.empty?.not
		_then
			_if !root_query! _isnt _unset
			_then
				!root_query![rwo_type] << i_rec
			_endif 
			_for i_answer _over answers.fast_elements()
			_loop
				_if _not done.includes?(i_answer)
				_then 
					_loopbody(i_answer)
					done.add(i_answer)
				_endif 
			_endloop
		_endif 
	_endloop
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method method_collection.safe_list(rec)
	_local list? << _maybe 
	_local list << {}
	_try
		list_or_rec << rec.perform(.methd, _scatter .args)
		_if list? _is _maybe
		_then
			list? << list_or_rec.responds_to?(:|fast_elements()|)
		_endif 
		_if list? _is _true
		_then
			list << list_or_rec
		_else
			list << {list_or_rec}
		_endif		

	_when error
		write("error in ", _self, " safe_iter ", rec)
	_endtry
	_return list
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method method_collection.description
	_return _self.message(:description, _self.target_collection.external_name, .methd, _self.base_collection.expose().external_name)
_endmethod
$

