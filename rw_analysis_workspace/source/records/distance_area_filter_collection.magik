##
## File            : $File$
## SCM             : $URL$
##
## Copyright       : Realworld Systems
##                   e-mail  : support@realworld-systems.com
##                   address : Venusstraat 17, 4105 JH Culemborg, The Netherlands
##                   tel     : +31(0)345 614406
##                   fax     : +31(0)345 614319
##
## Contains        : 
##
##
## Date written    : 2014-12-24
## Date changed    : $Date$
## Revision        : $Rev$

_package rwan
$

#remex(:distance_area_filter_collection)

_pragma(classify_level=basic, topic={analysis})
##
## Collection that performs a distance test on a geometry
## field of the base collection to the given spatial
## argument. This subclass is optimizes for the case that .arg
## is a simple area thing.
def_slotted_exemplar(:distance_area_filter_collection,
	{},
	:distance_filter_collection)
$


_pragma(classify_level=basic, topic={analysis, collections})
_method distance_area_filter_collection.includes?(rec)
	_local geom << rec.geometry(.geom_name)
	_if geom _is _unset
	_then
		_return _false
	_endif
	_local distance << _self.distance_value
	
	_local geom_arg << _self.need_geometry(.arg)
	_return geom.distance_to_within?(geom_arg, distance) = (_not .inverse?)
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_iter _method distance_area_filter_collection.fast_elements()
	_local geom_arg << _self.need_geometry(.arg)
	_local distance << _self.distance_value
	_for i_geom _over _self.base_collection.fast_geometries(_unset, .geom_name)
	_loop			
		_if i_geom.distance_to_within?(geom_arg, distance) = (_not .inverse?)
		_then
			_local rwo << i_geom.rwo
			_if rwo _isnt _unset
			_then 
				_loopbody(rwo)
			_endif 
		_endif 
	_endloop
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_method distance_area_filter_collection.convert_to_geometry(_optional bounds)
	_local gs << geometry_set.new()
	_local distance << _self.distance_value
	
	_local geom_arg << _self.need_geometry(.arg)
	_for i_geom _over _self.base_collection.fast_geometries(bounds, .geom_name)
	_loop
		_if i_geom.distance_to_within?(geom_arg, distance) = (_not .inverse?)
		_then 
			gs.add(i_geom)
		_endif 
	_endloop
	_return gs
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method distance_area_filter_collection.need_geometry(arg, _optional bounds)
	_return arg.convert_to_geometry(bounds)
_endmethod
$
