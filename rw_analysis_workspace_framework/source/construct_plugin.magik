##
## File            : $File$
## SCM             : $URL$
##
## Copyright       : Realworld Systems
##                   e-mail  : support@realworld-systems.com
##                   address : Venusstraat 17, 4105 JH Culemborg, The Netherlands
##                   tel     : +31(0)345 614406
##                   fax     : +31(0)345 614319
##
## Contains        : 
##
##
## Date written    : 2014-12-29
## Date changed    : $Date$
## Revision        : $Rev$

_package rwan
$

#remex(:construct_plugin)
$

_pragma(classify_level=restricted, topic={analysis})
##
## Basically the owner of a lot of ations that are available to
## the analysis dialog. The plugin doesnt do that much, mostly
## it passes messages from the dialog to other plugins.
##
def_slotted_exemplar(:construct_plugin,
	{},
	:base_plugin)
$

_pragma(classify_level=restricted, topic={analysis}, usage={subclass})
construct_plugin.def_property(:runner_plugin_name, :type, :symbol)
$


_pragma(classify_level=restricted, topic={analysis}, usage={subclass})
construct_plugin.define_shared_constant( :dialog_exemplar_name,
	:construct_dialog,
	:public )
$


_pragma(classify_level=advanced, topic={analysis})
_method construct_plugin.init_actions()
	_self.add_action(sw_action.new(:add_collections,
				       :engine, _self.dialog,
				       :image, {:add_collections, _self.module_name},
				       :action_message, :|add_collections_from_dialog()|))
	_self.add_action(sw_action.new(:add_trail,
				       :engine, _self.dialog,
				       :image, {:add_trail, _self.module_name},
				       :action_message, :|add_trail()|))
	_self.add_action(sw_action.new(:add_geom_selection,
				       :engine, _self.dialog,
				       :image, {:add_geom_selection, _self.module_name},
				       :action_message, :|add_geom_selection()|))
	_self.add_action(sw_action.new(:add_collection_selection,
				       :engine, _self.dialog,
				       :image, {:add_col_selection, _self.module_name},
				       :action_message, :|add_collection_selection()|))
	_self.add_action(sw_action.new(:add_explorer_content,
				       :engine, _self.dialog,
				       :image, {:add_explorer, _self.module_name},
				       :action_message, :|add_explorer_content()|))
	_self.add_action(sw_action.new(:add_explorer_selection,
				       :engine, _self.dialog,
				       :image, {:add_explorer_selection, _self.module_name},
				       :action_message, :|add_explorer_selection()|))
	_self.add_action(sw_action.new(:add_scrapbook,
				       :engine, _self.dialog,
				       :image, {:add_scrapbook, _self.module_name},
				       :action_message, :|add_scrapbook()|))
	_self.add_action(sw_action.new(:spatial_filter,
				       :engine, _self.dialog,
				       :image, {:spatial, _self.module_name},
				       :action_message, :|create_spatial_filter()|))
	_self.add_action(sw_action.new(:distance_filter,
				       :engine, _self.dialog,
				       :image, {:distance, _self.module_name},
				       :action_message, :|create_distance_filter()|))
	_self.add_action(sw_action.new(:predicate_filter,
				       :engine, _self.dialog,
				       :image, {:predicate, _self.module_name},
				       :action_message, :|create_predicate_filter()|))
	_self.add_action(sw_action.new(:intersection,
				       :engine, _self.dialog,
				       :image, {:intersection, _self.module_name},
				       :action_message, :|create_intersection()|))
	_self.add_action(sw_action.new(:subtraction,
				       :engine, _self.dialog,
				       :image, {:subtraction, _self.module_name},
				       :action_message, :|create_subtraction()|))
	_self.add_action(sw_action.new(:union,
				       :engine, _self.dialog,
				       :image, {:union, _self.module_name},
				       :action_message, :|create_union()|))
	_self.add_action(sw_action.new(:xor,
				       :engine, _self.dialog,
				       :image, {:xor, _self.module_name},
				       :action_message, :|create_xor()|))
	_self.add_action(sw_action.new(:follow_topology,
				       :engine, _self.dialog,
				       :image, {:topology, _self.module_name},
				       :action_message, :|follow_topology()|))
	_self.add_action(sw_action.new(:follow_join,
				       :engine, _self.dialog,
				       :image, {:relation, _self.module_name},
				       :action_message, :|follow_join()|))
	_self.add_action(sw_action.new(:follow_method,
				       :engine, _self.dialog,
				       :image, {:method, _self.module_name},
				       :action_message, :|follow_method()|))
	_self.add_action(sw_action.new(:follow_root,
				       :engine, _self.dialog,
				       :image, {:root, _self.module_name},
				       :action_message, :|follow_root()|))
	_self.add_action(sw_action.new(:create_spatial,
				       :engine, _self.dialog,
				       :image, {:new_spatial, _self.module_name},
				       :action_message, :|create_spatial_collection()|))
	_self.add_action(sw_action.new(:create_buffer,
				       :engine, _self.dialog,
				       :image, {:buffer, _self.module_name},
				       :action_message, :|create_buffer()|))
	
	_self.add_action(sw_action.new(:view_by_join,
				       :engine, _self.dialog,
				       :image, {:view_collection, _self.module_name},
				       :action_message, :|create_join_view()|))
	_self.add_action(sw_action.new(:view_by_eq,
				       :engine, _self.dialog,
				       :image, {:eq_view_collection, _self.module_name},
				       :action_message, :|create_eq_view()|))
	_self.add_action(sw_action.new(:materialize,
				       :engine, _self.dialog,
				       :image, {:materialize, _self.module_name},
				       :action_message, :|materialize()|))
	_self.add_action(sw_action.new(:materialize_spatial,
				       :engine, _self.dialog,
				       :image, {:materialize_spatial, _self.module_name},
				       :action_message, :|materialize_spatial()|))
	
	_self.add_action(sw_action.new(:delete,
				       :engine, _self.dialog,
				       :action_message, :|delete()|,
				       :image, {:delete, :ui_resources}))
	_self.add_action(sw_action.new(:move_up,
				       :engine, _self.dialog,
				       :action_message, :|move_up()|,
				       :image, {:move_up, _self.module_name}))
	_self.add_action(sw_action.new(:move_down,
				       :engine, _self.dialog,
				       :action_message, :|move_down()|,
				       :image, {:move_down, _self.module_name}))
	_self.add_action(sw_action.new(:copy,
				       :engine, _self.dialog,
				       :action_message, :|copy()|,
				       :image, {:copy, :ui_resources}))
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_plugin.map_trail
	_return _self.app_plugin.map_trail
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_plugin.map_selection 
	_return _self.app_plugin.map_selection 
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_plugin.explorer_selection
	_return _self.app_plugin.explorer_selection
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_plugin.scrapbook_results
	_return _self.app_plugin.scrapbook_results
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_plugin.ace_control
	_return _self.app_plugin.ace_control	
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_plugin.dataset_manager
	_return .workspace_holder.dsm
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_plugin.dataset
	_return _self.dataset_manager.actual_dataset
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_plugin.runner_plugin
	_return _self.framework.plugin(_self.runner_plugin_name)
_endmethod
$


_pragma(classify_level=advanced, topic={analysis})
_method construct_plugin.run_in_background(who, meth, args, descr)
	_self.runner_plugin.run_in_background(who, meth, args, descr)
_endmethod
$

