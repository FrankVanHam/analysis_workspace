##
## File            : $File$
## SCM             : $URL$
##
## Copyright       : Realworld Systems
##                   e-mail  : support@realworld-systems.com
##                   address : Venusstraat 17, 4105 JH Culemborg, The Netherlands
##                   tel     : +31(0)345 614406
##                   fax     : +31(0)345 614319
##
## Contains        : 
##
##
## Date written    : 2014-12-31
## Date changed    : $Date$
## Revision        : $Rev$

_package rwan
$

#remex(:distance_filter_dialog)
$

_pragma(classify_level=basic, topic={analysis})
## Dialog that create a distance collection for the base record
## collection.
def_slotted_exemplar(:distance_filter_dialog,
	{
		{:items, _unset},
		{:holder, _unset},
		{:spatial_holder, _unset}
	},
	:model)
$

_pragma(classify_level=basic, topic={analysis})
message_handler.new(:distance_filter_dialog).add_uses(:model, :gen_graphics)
$

_pragma(classify_level=restricted, topic={analysis})
_method distance_filter_dialog.set_holder(holder, spatial_holder)
	.holder << holder
	.spatial_holder << spatial_holder
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method distance_filter_dialog.activate_in(container)
	container.modality << :primary_modal
	.items << property_list.new()
	_local rc << rowcol.new(container,_unset, 1, _unset, :style, :top_level, :resize?, _true, :row_resize_values, {100})
	_self.build_top_label(rc)
	_self.build_distance_options(rc)
	panel_separator.new(rc, :col_alignment, :fill)
	_self.build_buttons(rc)
	_return rc
_endmethod
$


_pragma(classify_level=restricted, topic={analysis})
_private _method distance_filter_dialog.build_top_label(container)
	text_window.new(container, 7, 50, _unset,
			:horizontal_scrollbar?, _false,
			:editable?, _false,
			:contents, _self.message(:top_label),
			:col_alignment, :fill,
			:row_alignment, :fill )
_endmethod
$


_pragma(classify_level=restricted, topic={analysis})
_private _method distance_filter_dialog.build_distance_options(container)
	_local rc << rowcol.new(container, _unset, 2, _unset, :style, :nested, :col_alignment, :fill)
	label_item.new(rc, _self.message(:source_collection))
	.items[:col] << label_item.new(rc, .holder.name, :col_alignment, :fill)
	
	label_item.new(rc, _self.message(:geometry))
	.items[:geometry_choice] << text_choice_item.new(rc, _unset, :items, {}, :col_alignment, :fill)
	
	label_item.new(rc, _self.message(:distance))
	.items[:distance] << ti << managed_value_text_item.new(rc, _unset, :value, 10, :display_length, 10, :col_alignment, :fill)
	ti.manager << unit_value_manager.new(unit_manager.unit(:m))
	
	label_item.new(rc, _self.message(:inverse?))
	.items[:inverse?] << toggle_item.new(rc, _unset, :col_alignment, :fill)
	
	label_item.new(rc, _self.message(:target))
	label_item.new(rc, .spatial_holder.name, :col_alignment, :fill)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method distance_filter_dialog.build_buttons(container)
	_local rc << rowcol.new(container, 1, _unset, _unset, :style, :button_box, :col_alignment, :right)
	.items[:ok]     << button_item.new_safe(rc, _self.message(:ok), _self, :|ok()|, :min_width, 75)
	.items[:cancel] << button_item.new_safe(rc, _self.message(:cancel), _self, :|cancel()|, :min_width, 75)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method distance_filter_dialog.on_activation()
	_self.initialise_geometry_choice()
	_self.manage_actions()
	_return _super.on_activation()
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method distance_filter_dialog.initialise_geometry_choice()
	_local choice << .items[:geometry_choice]
	choice.items << items << _self.geom_field_items
	choice.value_with_notify << _self.most_likely_geom_field(items)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method distance_filter_dialog.most_likely_geom_field(items)
	_if items.size = 1
	_then
		_return items[1][1]
	_endif 
	_local _constant topo_cats << {:chain, :point, :area}
	_for i_vec _over items.fast_elements()
	_loop
		_local geom_cat << i_vec[1].geom_category
		_if topo_cats.includes?(geom_cat)
		_then
			_return i_vec[1]
		_endif
	_endloop
	_return items[1][1]	 
_endmethod
$


_pragma(classify_level=restricted, topic={analysis})
_method distance_filter_dialog.manage_actions()
	_local col? << .holder.is_record_collection?
	.items[:col].enabled? << col?
	.items[:geometry_choice].enabled? << col?
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method distance_filter_dialog.ok()
	_local new_col << _self.construct_distance_filter()
	.parent_model.add_collection(new_col)
	_self.close()
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method distance_filter_dialog.construct_distance_filter()
	## 
	##
	_local distance << .items[:distance].value
	_local fd << .items[:geometry_choice].value
	_local inverse? << .items[:inverse?].value
	_local col_geom << fd.name
	
	_local new_col << .holder.collection.distance_collection(col_geom, distance, .spatial_holder.collection, inverse?)
	_return new_col
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method distance_filter_dialog.cancel()
	_self.close()
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method distance_filter_dialog.geom_field_items
	_return _self.geom_field_items_for(.holder.collection)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method distance_filter_dialog.geom_field_items_for(col)
	_local items << rope.new()
	_local sw_col << col.expose()
	_for i_fd _over sw_col.descriptor.geometry_fields()
	_loop
		_if i_fd.name _is :meatball _then _continue _endif 
		items.add( {i_fd, i_fd.external_name} )
	_endloop
	items << items.as_sorted_collection(_proc(a,b) >> a[2] _cf b[2] _endproc )
	items << rope.new_from(items)
	_return items
_endmethod
$


