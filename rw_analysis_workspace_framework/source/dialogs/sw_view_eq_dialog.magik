_package rwan
$


#remex(:sw_view_eq_dialog)
$


_pragma(classify_level=restricted, topic={analsis})
##
## Dialog to constrct a view collection. The user should take
## two collections and link them on a common field.
##
def_slotted_exemplar(:sw_view_eq_dialog,
	{
		{:eq_source_field, _unset},
		{:eq_linked_field, _unset}
	},
	:base_sw_view_dialog)
$


message_handler.new(:sw_view_eq_dialog).add_uses(:base_sw_view_dialog)
$


_pragma(classify_level=restricted, topic={analysis})
_method sw_view_eq_dialog.set_holder(holder1, holder2, dsm)
	.holder << holder1
	.source_table << holder1.collection.expose()
	.linked_table << holder2.collection.expose()
	.analysis_dsm << dsm
_endmethod
$


_pragma(classify_level=restricted, topic={analysis})
_private _method sw_view_eq_dialog.build_link_button(container)
	_local rc << rowcol.new(container, _unset, 1, _unset, :style, :nested,
				:row_alignment, :fill)
	.items[:link] << button_item.new_safe(rc, _self.message(:link),
					      _self, :|link()|,
					      :min_width, 75,
					      :row_alignment, :top)
	.items[:swap] << button_item.new_safe(rc, _self.message(:swap),
					      _self, :|swap()|,
					      :min_width, 75,
					      :row_alignment, :bottom)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method sw_view_eq_dialog.on_activation()
	_self.set_source_table()
	_self.set_linked_table()
	_self.update_link_label()
	_self.manage_actions()
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method sw_view_eq_dialog.build_result_collection(container)
	_local rc << rowcol.new(container, _unset, 2, _unset, :style, :nested,
				:row_alignment, :fill)
	label_item.new(rc, _self.message(:table_name))
	.items[:result_table] << text_item.new(rc, _unset, :col_alignment, :fill)
	label_item.new(rc, _self.message(:table_link))
	.items[:result_eq] << label_item.new(rc, _unset, :col_alignment, :fill)
_endmethod
$


_pragma(classify_level=restricted, topic={analysis})
_private _method sw_view_eq_dialog.manage_link_action()
	.items[:link].enabled? << _self.link_enabled?
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method sw_view_eq_dialog.link()
	.eq_source_field << .items[:source_tree].selection.an_element().key
	.eq_linked_field << .items[:linked_tree].selection.an_element().key
	_self.update_link_label()
_endmethod
$


_pragma(classify_level=restricted, topic={analysis})
_private _method sw_view_eq_dialog.update_link_label()
	_if .eq_source_field _is _unset
	_then
		label << _self.message(:no_relation)
	_else
		label << write_string( .eq_source_field.external_name , " = ", .eq_linked_field.external_name)
	_endif
	.items[:result_eq].label << label 
_endmethod
$


_pragma(classify_level=restricted, topic={analysis})
_private _method sw_view_eq_dialog.link_enabled?
	_local source_sel << .items[:source_tree].selection.an_element()
	_local linked_sel << .items[:linked_tree].selection.an_element()
	_if source_sel _is _unset _orif
	    linked_sel _is _unset
	_then
		_return _false
	_endif 
	_return source_sel.key.is_physical? _andif
		linked_sel.key.is_physical?
_endmethod
$



_pragma(classify_level=restricted, topic={analysis})
_method sw_view_eq_dialog.swap()
	(.source_table, .linked_table) << (.linked_table, .source_table)
	(.eq_source_field, .eq_linked_field) << (.eq_linked_field, .eq_source_field)
	_self.set_source_table()
	_self.set_linked_table()
	_self.update_link_label()
	_self.manage_actions()	
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method sw_view_eq_dialog.validate()
	_self.validate_eq_fields()
	_super.validate()
_endmethod
$


_pragma(classify_level=restricted, topic={analysis})
_private _method sw_view_eq_dialog.validate_eq_fields()
	_if .eq_source_field _is _unset
	_then
		_self.user_error(:set_eq_fields)
	_endif 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method sw_view_eq_dialog.construct_view()
	_local ds_name << .source_table.dataset.original_dataset_name
	_local (int_name, ext_name) << _self.new_table_name
	_local field_specs << _self.field_specs()
	_local tables << {.source_table, .linked_table}
	_local eqs << {{.eq_source_field, :|=|, .eq_linked_field}}
	_local col << sw_view_collection.new_eq(.analysis_dsm,
						int_name, ext_name,
						tables,
						eqs,
						field_specs)
	_return col
_endmethod
$
