##
## File            : $File$
## SCM             : $URL$
##
## Copyright       : Realworld Systems
##                   e-mail  : support@realworld-systems.com
##                   address : Venusstraat 17, 4105 JH Culemborg, The Netherlands
##                   tel     : +31(0)345 614406
##                   fax     : +31(0)345 614319
##
## Contains        : 
##
##
## Date written    : 2014-12-31
## Date changed    : $Date$
## Revision        : $Rev$

_package rwan
$

#remex(:root_dialog)
$

_pragma(classify_level=restricted, topic={analysis})
##
## Dialog to create root_collection that will yield one of the
## base collections that make up the compound current collection.
##
def_slotted_exemplar(:root_dialog,
	{
		{:items, _unset},
		{:holder, _unset}
	},
	:model)
$

message_handler.new(:root_dialog).add_uses(:model, :gen_graphics)
$


_pragma(classify_level=restricted, topic={analysis})
_method root_dialog.set_holder(holder)
	.holder << holder
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method root_dialog.activate_in(container)
	container.modality << :primary_modal
	.items << property_list.new()
	_local rc << rowcol.new(container,_unset, 1, _unset, :style, :top_level, :resize?, _true, :row_resize_values, {100})
	_self.build_top_label(rc)
	_self.build_root_selection(rc)
	panel_separator.new(rc, :col_alignment, :fill)
	_self.build_buttons(rc)
	_return rc
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method root_dialog.on_activation()
	.items[:ok].enabled? << .items[:root_choice].value _isnt _unset 
_endmethod
$


_pragma(classify_level=restricted, topic={analysis})
_private _method root_dialog.build_top_label(container)
	text_window.new(container, 7, 50, _unset,
			:horizontal_scrollbar?, _false,
			:editable?, _false,
			:contents, _self.message(:top_label),
			:col_alignment, :fill,
			:row_alignment, :fill )
_endmethod
$


_pragma(classify_level=restricted, topic={analysis})
_private _method root_dialog.build_root_selection(container)
	_local rc << rowcol.new(container, _unset, 2, _unset, :style, :nested, :col_alignment, :fill)
	label_item.new(rc, _self.message(:source_collection))
	.items[:col] << label_item.new(rc, .holder.name, :col_alignment, :fill)
	
	label_item.new(rc, _self.message(:root))
	_local choice << text_choice_item.new(rc, _unset, :items, _self.root_items, :col_alignment, :fill)
	.items[:root_choice] << choice
_endmethod
$


_pragma(classify_level=restricted, topic={analysis})
_private _method root_dialog.build_buttons(container)
	## 
	_local rc << rowcol.new(container, 1, _unset, _unset, :style, :button_box, :col_alignment, :right)
	.items[:ok]     << button_item.new_safe(rc, _self.message(:ok), _self, :|ok()|, :min_width, 75)
	.items[:cancel] << button_item.new_safe(rc, _self.message(:cancel), _self, :|cancel()|, :min_width, 75)
_endmethod
$


_pragma(classify_level=restricted, topic={analysis})
_method root_dialog.ok()
	_local new_col << _self.construct_root_filter()
	.parent_model.add_collection(new_col)
	_self.close()
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method root_dialog.construct_root_filter()
	_local table << .items[:root_choice].value
	_local new_col << .holder.collection.root(table)
	_return new_col
_endmethod
$


_pragma(classify_level=restricted, topic={analysis})
_method root_dialog.cancel()
	_self.close()
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method root_dialog.root_items
	_local done << set.new()
	_local items << rope.new()
	
	_local current_sw_col << .holder.collection.expose()
	_for i_col _over .holder.collection.branch_to_root()
	_loop
		_local sw_col << i_col.expose()
		_if current_sw_col _is sw_col _then _continue _endif
		
		_if _not done.includes?(sw_col)
		_then
			items.add({sw_col, sw_col.external_name})
		_endif
	_endloop
	_if items.empty?
	_then
		items.add({_unset, _self.message(:no_root)})
	_endif 
	_return items
_endmethod
$
