##
## File            : $File$
## SCM             : $URL$
##
## Copyright       : Realworld Systems
##                   e-mail  : support@realworld-systems.com
##                   address : Venusstraat 17, 4105 JH Culemborg, The Netherlands
##                   tel     : +31(0)345 614406
##                   fax     : +31(0)345 614319
##
## Contains        : 
##
##
## Date written    : 2014-12-31
## Date changed    : $Date$
## Revision        : $Rev$

_package rwan
$

#remex(:join_dialog)
$

_pragma(classify_level=restricted, topic={analysis})
##
## Dialog to select a join from a base collection to follow to
## a new collection.
##
def_slotted_exemplar(:join_dialog,
	{
		{:items,           _unset},
		{:holder,          _unset},
		{:record_holder,   _unset},
		{:join_field_name, _unset}
	},
	:model)
$

message_handler.new(:join_dialog).add_uses(:model, :gen_graphics)
$

_pragma(classify_level=restricted, topic={analysis})
_method join_dialog.set_holder(holder, record_holder, dsm, join_field_name)
	.holder << holder
	.record_holder << record_holder
	.join_field_name << join_field_name
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method join_dialog.activate_in(container)
	container.modality << :primary_modal
	.items << property_list.new()
	_local rc << rowcol.new(container,_unset, 1, _unset, :style, :top_level)
	_self.build_top_label(rc)
	_self.build_join_selection(rc)
	panel_separator.new(rc, :col_alignment, :fill) 
	_self.build_buttons(rc)
	_return rc
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method join_dialog.build_top_label(container)
	text_window.new(container, 5, 50, _unset,
			:horizontal_scrollbar?, _false,
			:editable?, _false,
			:contents, _self.message(:top_label),
			:col_alignment, :fill,
			:row_alignment, :fill )
_endmethod
$


_pragma(classify_level=restricted, topic={analysis})
_private _method join_dialog.build_join_selection(container)
	## 
	_local rc << rowcol.new(container, _unset, 2, _unset, :style, :nested, :col_alignment, :fill)
	label_item.new(rc, _self.message(:source_collection))
	label_item.new(rc, .record_holder.name, :col_alignment, :fill)
	
	label_item.new(rc, _self.message(:join))
	.items[:join_choice] << text_choice_item.new(rc, _unset, :items, {},
						     :model, _self,
						     :change_selector, :|join_field_name_changed()|,
						     :col_alignment, :fill)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method join_dialog.build_buttons(container)
	## 
	_local rc << rowcol.new(container, 1, _unset, _unset, :style, :button_box, :col_alignment, :right)
	.items[:ok]     << button_item.new_safe(rc, _self.message(:ok), _self, :|ok()|, :min_width, 75)
	.items[:cancel] << button_item.new_safe(rc, _self.message(:cancel), _self, :|cancel()|, :min_width, 75)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method join_dialog.on_activation()
	_local items << _self.join_items
	.items[:join_choice].items << items
	_self.set_current_join(items)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method join_dialog.join_field_name_changed(value)
	.join_field_name << value
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method join_dialog.set_current_join(items)
	_local value << _unset
	_if items.size > 0
	_then
		value << items[1][1]
	_endif 
	_if .join_field_name _isnt _unset
	_then
		_for i_vec _over items.fast_elements()
		_loop
			_if i_vec[1] = .join_field_name
			_then
				value << i_vec[1]
			_endif
		_endloop
	_endif 
	_if value _isnt _unset
	_then
		.items[:join_choice].value_with_notify << value
	_endif 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method join_dialog.ok()
	_if .holder _is _unset
	_then 
		_local new_col << _self.construct_join_filter()
		.parent_model.add_collection(new_col)
	_else
		.holder.collection.update(.join_field_name)
		.parent_model.update_holder(.holder)
	_endif 
	_self.close()
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method join_dialog.construct_join_filter()
	_local name << .items[:join_choice].value
	_local new_col << .record_holder.collection.follow_join(name)
	_return new_col
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method join_dialog.cancel()
	_self.close()
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method join_dialog.join_items
	_local items << rope.new()
	_local sw_col << .record_holder.collection.expose()
	_if sw_col.join_fields.empty?
	_then
		items.add( {_unset, _self.message(:no_join)} )
	_else
		_for i_join _over sw_col.join_fields.fast_elements()
		_loop
			_if i_join.name = :int!info_flags _then _continue _endif 
			_if i_join.heterogeneous? _then _continue _endif
			
			_local target << i_join.result_table(sw_col.dataset)
			_if target _is _unset _then _continue _endif 
			target << target.descriptor
			_if target.internal_table?.not
			_then 
				_local str << write_string( i_join.external_name, " -> ", target.external_name)
				items.add({i_join.name, str})
			_endif 
		_endloop
		items << items.as_sorted_collection(_proc(a,b) >> a[2] _cf b[2] _endproc )
		items << rope.new_from(items)
	_endif
	_return items
_endmethod
$
