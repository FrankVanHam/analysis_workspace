_package rwan
$

#remex(:grouping_test_case)

_pragma(classify_level=basic, topic={analysis})
## Testing the grouping engine
def_slotted_exemplar(:grouping_test_case,
	{},
	:base_analysis_test_case)
$

_pragma(classify_level=basic, topic={analysis})
_method grouping_test_case.test_basic_count
	_local dsm << rwan:analysis_dataset_manager.new(:test)
	_local cable_col << rwan:sw_collection.new(dsm, _self.cable_collection)
	
	_local en << rwan:grouping_engine.new(cable_col)
	_local result_tree << en.group({rwan:grouping_element.new(:count, _unset)})
	
	_local count << result_tree.value.calculation(:count)
	_self.assert_is(count, cable_col.size, "Sizes of engine and collection should match ")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method grouping_test_case.test_one_grouping_count
	_local dsm << rwan:analysis_dataset_manager.new(:test)
	_local cable_col << rwan:sw_collection.new(dsm, _self.cable_collection)
	
	_local en << rwan:grouping_engine.new(cable_col)
	_local result_tree << en.group({rwan:grouping_element.new(:group, _self.cable_collection.field(:voltage)),
					rwan:grouping_element.new(:count, _unset)})
	_self.assert_is(result_tree.children.size, 2, "there should be a group of 2")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method grouping_test_case.test_two_grouping_count
	_local dsm << rwan:analysis_dataset_manager.new(:test)
	_local cable_col << rwan:sw_collection.new(dsm, _self.cable_collection)
	
	_local en << rwan:grouping_engine.new(cable_col)
	_local result_tree << en.group({rwan:grouping_element.new(:group, _self.cable_collection.field(:voltage)),
					rwan:grouping_element.new(:group, _self.cable_collection.field(:status)),
					rwan:grouping_element.new(:count, _unset)})
	
	_local lv << _self.find(result_tree, :voltage, "LV")
	_local kv << _self.find(result_tree, :voltage, "11kV")
	_self.assert_is(result_tree.children.size, 2, "there should be a group of 2")
	_self.assert_is(lv.children.size, 2, "there should be a group of 2 in LV")
	_self.assert_is(kv.children.size, 1, "there should be a group of 1 in 11kV")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method grouping_test_case.test_one_grouping_sum
	_local dsm << rwan:analysis_dataset_manager.new(:test)
	_local cable_col << rwan:sw_collection.new(dsm, _self.cable_collection)
	
	_local en << rwan:grouping_engine.new(cable_col)
	_local result_tree << en.group({rwan:grouping_element.new(:group, _self.cable_collection.field(:voltage)),
					rwan:grouping_element.new(:sum, _self.cable_collection.field(:length))})
	_self.assert_is(result_tree.children.size, 2, "there should be a group of 2")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method grouping_test_case.test_one_grouping_min
	_local dsm << rwan:analysis_dataset_manager.new(:test)
	_local cable_col << rwan:sw_collection.new(dsm, _self.cable_collection)
	
	_local en << rwan:grouping_engine.new(cable_col)
	_local result_tree << en.group({rwan:grouping_element.new(:group, _self.cable_collection.field(:voltage)),
					rwan:grouping_element.new(:min, _self.cable_collection.field(:length))})
	
	_local min_lv << _self.find(result_tree, :voltage, "LV")
	_local min_lv_length << min_lv.value.calculation(:min, :length)	
	_self.assert_true(min_lv_length.value = 0.0, "min length for LV = 0")
	
	_local min_kv << _self.find(result_tree, :voltage, "11kV")
	_local min_kv_length << min_kv.value.calculation(:min, :length)	
	_self.assert_true(min_kv_length.value.rounded = 12, "min length for KV = 11.61")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method grouping_test_case.test_one_grouping_count_skip_unset
	_local dsm << rwan:analysis_dataset_manager.new(:test)
	_local cable_col << rwan:sw_collection.new(dsm, _self.cable_collection)
	
	_local en << rwan:grouping_engine.new(cable_col)
	_local result_tree << en.group({rwan:grouping_element.new(:group, _self.cable_collection.field(:voltage)),
					rwan:grouping_element.new(:count, _self.cable_collection.field(:known_as))})
	
	_local lv << _self.find(result_tree, :voltage, "LV")
	_local count_lv << lv.value.calculation(:count, :known_as)
	_self.assert_is(count_lv, 4, "There should be 4 cables with a valid known_as value")
	
	_local kv << _self.find(result_tree, :voltage, "11kV")
	_local count_kv << kv.value.calculation(:count, :known_as)
	_self.assert_is(count_kv, 1, "There should be 1 cables with a valid known_as value")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method grouping_test_case.test_average_skipping_unset
	_local dsm << rwan:analysis_dataset_manager.new(:test)
	_local cable_col << rwan:sw_collection.new(dsm, _self.customer_collection)
	
	_local en << rwan:grouping_engine.new(cable_col)
	_local result_tree << en.group({rwan:grouping_element.new(:sum, _self.customer_collection.field(:sales)),
					rwan:grouping_element.new(:count, _self.customer_collection.field(:sales)),
					rwan:grouping_element.new(:average, _self.customer_collection.field(:sales))})
	_local sum << result_tree.value.calculation(:sum, :sales)
	_local count << result_tree.value.calculation(:count, :sales)
	_local average << result_tree.value.calculation(:average, :sales)
	
	_self.assert_equals( average, sum/count, "The average of the sales should be the sum of the values divided by the count of the valid values. Unset values should be ignored", 0.001)
_endmethod
$


_pragma(classify_level=basic, topic={analysis})
_private _method grouping_test_case.find(tree,fieldname,value)
	_for i_tree _over tree.fast_trees()
	_loop
		_if i_tree.key _is _unset _then _continue _endif
		
		_if i_tree.key.key.name = fieldname _andif
		    i_tree.key.value = value
		_then
			_return i_tree
		_endif
	_endloop 
_endmethod
$
