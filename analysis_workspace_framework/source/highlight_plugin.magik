#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:highlight_plugin)
$

_pragma(classify_level=advanced, topic={analysis})
## Publishes a colour action to colour a analysis
## collection. Also passes thru the highlight rendering to the dialog.
def_slotted_exemplar(:highlight_plugin,
	{
		{:highlighting?, _unset}
	}, :base_plugin)
$


_pragma(classify_level=basic, topic={analysis})
##
## defines the z-order of rendering of this plugin.
highlight_plugin.def_property( :highlight_priority,
	:type, :integer, :default_value, -40,
	:description, "Z priority of highlight rendering" )
$

_pragma(classify_level=restricted, topic={analysis}, usage={subclass})
highlight_plugin.define_shared_constant( :dialog_exemplar_name,
	:highlight_dialog,
	:public )
$

_pragma(classify_level=restricted, topic={analysis}, usage={subclass})
_private _method highlight_plugin.init(_gather args)
	.highlighting? << _false
	_return _super.init(_scatter args)
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method highlight_plugin.init_actions()
	_self.add_action(sw_action.new(:colour,
				       :engine, _self.dialog,
				       :action_message, :|set_highlight_colour()|,
				       :image, {:colour, _self.module_name}))
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_private _method highlight_plugin.note_workspace_change(workspace)
	_if workspace.empty?.not _andif _not .highlighting?
	_then
		# the new isnt empty, but the previous was. So start highlighting
		_self.start_highlighting()
		.highlighting? << _true
	_elif workspace.empty? _andif .highlighting?
	_then 
		# the new workspace is empty, so stop highlighting
		_self.stop_highlighting()
		.highlighting? << _false		
	_endif
	_return _super.note_workspace_change(workspace)
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_private _method highlight_plugin.stop_highlighting()
	_local mm << _self.map_manager
	mm.remove_post_renderer(_self)
	mm.trigger_transient_redraw()
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_private _method highlight_plugin.start_highlighting()
	_local mm << _self.map_manager
	mm.add_post_renderer(_self, _self.highlight_priority, :transient_drawer)
	mm.trigger_transient_redraw()
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_private _method highlight_plugin.map_manager
	_return _self.app_plugin.map_manager
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_iter _method highlight_plugin.highlight_collections()
	_for i_holder _over _self.all_holders.fast_elements()
	_loop
		_if i_holder.highlight?
		_then
			_local col << i_holder.collection
			_local colour << i_holder.colour
			_loopbody(col, colour)
		_endif
	_endloop
_endmethod
$

_pragma(classify_level=restricted)
_method highlight_plugin.map_damage_notify(graphics_context, map_view)
	## Callback method from P_MAP_VIEW to allow us to render onto
	## it. Only render on the main map.
	_if map_view.map_manager.current_map_view _is map_view
	_then
		_for i_col, i_colour _over _self.highlight_collections()
		_loop
			_local hset << _self.highlight_set(i_col, i_colour, map_view.current_view_bounds)
			map_view.draw_geometry_on(graphics_context, hset, _unset ,
						  _unset, _true )
		_endloop
	_endif 
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_private _method highlight_plugin.highlight_set(col, given_colour, window_bounds)
	_dynamic !rwan_limit_bounds! << window_bounds
	_local gs << col.convert_to_geometry()

	_if _not gs.is_collection?
	_then
		gs << geometry_set.new_with(gs)
	_endif
	_local clr << given_colour

	_local thick << line_style.new_with_properties(
				:width, 3,
				:foreground_colour, clr)
	_local fill << fill_style.new_with_properties( :foreground_colour, clr,
						       :wash_percent, 50 )

	_local sts << transient_style_system.new(clr)

	sts.deferred? << col.origin_is_sw_collection?

	_local pstyle << composite_point_style.new(
				 {pseudo_chain.new(
					  circle.new(coordinate.new(0,0),5))},
				 {thick})

	sts.set_default_style(:simple_point,
			      pstyle)
	sts.set_default_style(:point,
			      pstyle)
#	sts.set_default_style(:text,
#			      thick)
	sts.set_default_style(:area,
			      fill)
	sts.set_default_style(:chain,
			      thick)

	_local comp << composite_geometry_set.new({gs})
	comp.style_system << sts
	_return comp, clr
_endmethod
$

_pragma(classify_level=restricted)
_method highlight_plugin.terminate()
	##
	_local mm << _self.map_manager
	mm.remove_post_renderer(_self)
	_super.terminate()
_endmethod
$
