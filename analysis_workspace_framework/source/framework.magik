#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:framework)
$

_pragma(classify_level=basic, topic={analysis})
##
## The framework holds analysis plugins. The title is dynamic
## and shows the current workspace dataset.
##
def_slotted_exemplar(:framework,
	{
		{:dsm, _unset, :readable}
	},
	:gui_framework)
$

_pragma(classify_level=restricted)
framework.define_shared_constant( :databus_consumer_data_types,
	{ :workspace },
	:public )
$

_pragma(classify_level=restricted)
framework.define_shared_constant( :databus_producer_data_types,
	{ :ace_context, :service_provider },
	:public )
$

_pragma(classify_level=basic, topic={analysis})
_method framework.init_actions()
	_self.add_action(sw_action.new(:exit,
				       :engine, _self,
				       :action_message, :|close()|))
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method framework.set_title(_optional dirty?)
	dirty? << dirty?.default(_false)
	_if .dsm _isnt _unset
	_then 
		_local source_path << .dsm.dataset_path
		_local (source_file,source_dir)  << system.pathname_components(source_path)
		_local idx << source_dir.index_of_seq("file::")
		_if idx _is 1
		_then
			source_dir << source_dir.slice_to_end(7)
		_endif
		_if source_dir.size > 30
		_then
			source_dir << write_string(
					      source_dir.slice(1,15),
					      "...",
					      source_dir.slice_to_end(source_dir.size-15))
		_endif
		_if dirty?
		_then 
			title << _self.message( :dirty_title, source_dir, source_file)
		_else
			title << _self.message( :title, source_dir, source_file)
		_endif 
	_else
		title << _self.message( :title_for_empty_dialog)
	_endif
	_self.title << title
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method framework.ace
	_return .framework.ace
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method framework.activate(_gather args)
	_local ok? << _false
	_protect
		_super.activate(_scatter args)
		ok? << _true
	_protection
		_if _not ok?
		_then
			_self.on_deactivation()
		_endif
	_endprotect
	_return _self 
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method framework.post_activation()
	_self.plugin(:tree).add_event_handler(
				   :colour_double_clicked,
				   _self.plugin(:highlight).action(:colour), 
				   :|execute_action()|)
	_return _super.post_activation() 
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method framework.pre_activation()
	_self.set_title()
	_return _super.pre_activation()
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method framework.terminate()
	.framework.deactivated(_self)
	_super.terminate()
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method framework.app_plugin
	_return .framework
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method framework.sw_databus_data_available(data_type_name, data)
	_if data_type_name _is :workspace
	_then
		_self.set_title_for(data)
	_endif 
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method framework.sw_databus_data_requested(data_type_name, _gather data)
	_if data_type_name _is :ace_context
	_then
		_return .framework.ace_context
	_elif data_type_name _is :service_provider
	_then
		_return .framework.get_service_provider(_scatter data)
	_endif 
_endmethod
$


_pragma(classify_level=advanced, topic={analysis})
_private _method framework.set_title_for(workspace)
	## todo dont set the title is the dirty flag is included allready.
	_if workspace _isnt _unset
	_then 
		.dsm << workspace.dsm
		_self.set_title(workspace.dirty?)
	_else
		.dsm << _unset
		_self.set_title(_false)
	_endif 
_endmethod
$
