
_package rwan
$

#remex(:dataset_dialog)
$

_pragma(classify_level=advanced, topic={analysis})
## Implements the basic file based actions like open, close,
## save, etc.
def_slotted_exemplar(:dataset_dialog,
	{},
	:base_model)
$
message_handler.new(:dataset_dialog).add_uses(:base_model)
$

_pragma(classify_level=advanced, topic={analysis})
_method dataset_dialog.activate_in(container)
	.top_frame << container.top_frame
	_local rc << rowcol.new(container, 1, _unset, _unset, :style, :nested)
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method dataset_dialog.manage_actions()
	_local open? << _self.open?
	.owner.action(:new_file).enabled? << _true  
	.owner.action(:save).enabled? << open? 
	.owner.action(:save_as).enabled? << open? 
	.owner.action(:close).enabled? << open? 
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method dataset_dialog.save()
	_self.save_ds_file()
	_self.workspace_changed()
	_self.manage_actions()
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_private _method dataset_dialog.save_ds_file()
	.owner.workspace_holder.save()
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method dataset_dialog.save_as()
	_local dia << file_dialog.new(_self, :|save_ds_as()|, _unset,
				      :operation, :save,
				      :do_creation_check?, _true,
				      :do_overwrite_check?, _true,
				      :filter, {"Analytic file (*.ds)", "*.ds"})
	dia.activate()
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method dataset_dialog.save_ds_as(path)
	_self.save_ds_file_as(path)
	_self.workspace_changed()
	_self.manage_actions()
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method dataset_dialog.save_ds_file_as(target_path)
	
	_if system.file_exists?(target_path)
	_then
		system.unlink(target_path, _true)
	_endif 
	_local source_path << _self.dsm.dataset_path
	_local (source_file,source_dir)  << system.pathname_components(source_path)
	_local (target_file, target_dir) << system.pathname_components(target_path)
	
	_self.close_ds_file()
	ds_environment.copy_datastore_file(source_dir, source_file, target_dir,
					   :target_file, target_file,
					   :source_concurrency_mode, :single_user,
					   :concurrency_mode, :single_user)
	_return _self.open_ds(target_path)
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_private _method dataset_dialog.save_or_cancel_if_updated()
	_if .owner.workspace_holder.dirty?
	_then
		_local what << _self.show_query( {
							 _self.message(:save),
							 _self.message(:ignore),
							 _self.message(:cancel)
						 },
						 {
							 :save,
							 :ignore,
							 :cancel
						 },
						 :save,
						 _self.message(:workspace_has_changed_want_to_save))
		_if what _is :save
		_then
			_self.save()
		_elif what _is :cancel
		_then
			!abort!()
		_endif
	_endif 	
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method dataset_dialog.open_default_ds()
	
	_if _self.dsm _isnt _unset _then _return _endif
	
	_local path << .owner.ace.default("rw:path")
	_if path _isnt _unset _andif path.empty?.not 
	_then
		_if system.file_exists?(path)
		_then 
			_local dsm << rwan:analysis_dataset_manager.open(_self.dsm_name, path)
			workspace_holder << dsm.retrieve()
			.owner.publish_workspace_holder(workspace_holder)
			.owner.add_to_application(workspace_holder.dsm)
		_endif 
	_endif 
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method dataset_dialog.new_file()
	_self.save_or_cancel_if_updated()
	_local dia << file_dialog.new(_self, :|new_ds()|, _unset,
				      :operation, :save,
				      :title, _self.message(:new_file_title),
				      :do_creation_check?, _true,
				      :do_overwrite_check?, _true,
				      :filter, {"Analytic file (*.ds)", "*.ds"})
	dia.activate()
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method dataset_dialog.new_ds(path)
	_self.new_ds_file(path)
	_self.workspace_changed()
	_self.manage_actions()
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method dataset_dialog.new_ds_file(target_path)
	
	_if system.file_exists?(target_path)
	_then
		system.unlink(target_path, _true)
	_endif 
	_local source_path << smallworld_product.get_resource_file("analysis.ds","data",rwan:analysis_dataset_manager.module_name)
	_local (source_file,source_dir)  << system.pathname_components(source_path)
	_local (target_file, target_dir) << system.pathname_components(target_path)
	_self.close_ds_file()
	ds_environment.copy_datastore_file(source_dir, source_file, target_dir,
					   :target_file, target_file,
					   :source_concurrency_mode, :single_user,
					   :concurrency_mode, :single_user)
	_return _self.open_ds_file(target_path, _true)
_endmethod
$


_pragma(classify_level=advanced, topic={analysis})
_method dataset_dialog.close()
	_self.save_or_cancel_if_updated()
	_self.close_ds_file()
	_self.workspace_changed()
	_self.manage_actions()
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_private _method dataset_dialog.close_ds_file()
	_if _self.dsm _isnt _unset
	_then 
		.owner.remove_from_application()
		_self.dsm.discard()
		workspace_holder << rwan:workspace_holder.new_empty()
		.owner.publish_workspace_holder(workspace_holder)
	_endif 
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method dataset_dialog.open()
 	_self.save_or_cancel_if_updated()
	_local dia << file_dialog.new(_self, :|open_ds()|, _unset,
				      :operation, :open,
				      :do_existence_check?, _true,
				      :filter, {"Analytic file (*.ds)", "*.ds"})
	dia.activate()
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method dataset_dialog.open_ds(file)
	_self.open_ds_file(file)
	_self.workspace_changed()
	_self.manage_actions()
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method dataset_dialog.open_ds_file(path, _optional first_time?)
	_local dsm << rwan:analysis_dataset_manager.open(_self.dsm_name, path)
	
	_self.close_ds_file()
	_if first_time? _is _true
	_then
		.owner.adjust_dsm_for_application(dsm)
	_endif 
	workspace_holder << dsm.retrieve()
	.owner.publish_workspace_holder(workspace_holder)
	.owner.add_to_application(workspace_holder.dsm)
	
	.owner.ace.set_default("rw:path", path, _true, _true)
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_private _method dataset_dialog.workspace_changed()
	.owner.publish_workspace_holder()
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_private _method dataset_dialog.dsm
	_return .owner.workspace_holder.dsm
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_private _method dataset_dialog.dsm_name
	_return .owner.dsm_name	 
_endmethod
$
