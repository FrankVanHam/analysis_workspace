#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:highlight_dialog)
$

_pragma(classify_level=advanced, topic={analysis})
## Main function is to highlight collections. The functionality
## is very basic at the moment, simply a colored
## line/symbol/area.
def_slotted_exemplar(:highlight_dialog,
	{
	}, :base_model)
$

_pragma(classify_level=advanced, topic={analysis})
_method highlight_dialog.set_highlight_colour()
	_if .items[:editor] _is _unset
	_then
		.items[:editor] << _self.activate_colour_editor()
	_else
		.items[:editor].reactivate()
	_endif
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_private _method highlight_dialog.activate_colour_editor()
	_local colour_editor << sw:colour_palette_editor.new_dialog(
					   _self,
					   _self, :|set_colour()|,
					   _self.message(:pick_highlight_colour),
					   :draw_style, :buttons,
					   :disable_items, {:no_colour, :update})
	colour_editor.activate_relative_to(_unset, .top_frame, 50, 50)
	>> colour_editor
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method highlight_dialog.set_colour(action, clr)
	_local holders << _self.selected_holders
	_if holders.empty?.not
	_then
		_for i_holder _over holders.fast_elements()
		_loop 
			i_holder[:colour] << clr
		_endloop 
		_self.workspace.set_dirty()
		.owner.publish_workspace()
	_endif 
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method highlight_dialog.manage_actions()
	_local any_sel? << _self.any_selection?
	_local open? << _self.open?
	
	.owner.action(:colour).enabled? << open?  _andif any_sel?
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method highlight_dialog.note_selection_change()
	_self.manage_actions()
_endmethod
$
