#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:dataset_plugin)
$

_pragma(classify_level=basic, topic={analysis})
## Publishes the standard file actions, like open, close, new, etc.
def_slotted_exemplar(:dataset_plugin,
	{},
	:base_plugin)
$

_pragma(classify_level=basic, topic={analysis})
##
## defines the name of the dataset_manager.
dataset_plugin.def_property( :dsm_name,
	:type, :symbol, :default_value, :analysis,
	:description, "Dataset Manager name" )
$

_pragma(classify_level=restricted, topic={analysis}, usage={subclass})
dataset_plugin.define_shared_constant( :dialog_exemplar_name,
	:dataset_dialog,
	:public )
$

_pragma(classify_level=basic, topic={analysis})
_method dataset_plugin.adjust_dsm_for_application(dsm)
	_return _self.app_plugin.adjust_dsm_for_application(dsm)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method dataset_plugin.add_to_application(dsm)
	_return _self.app_plugin.add_to_application(dsm)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method dataset_plugin.remove_from_application()
	_return _self.app_plugin.remove_from_application(.workspace.dsm)
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method dataset_plugin.init_actions()
	##
	_self.add_action(sw_action.new(:new_file,
				       :engine, _self.dialog,
				       :action_message, {:|perform_safely()|, :|new_file()|},
				       :image, {:new_file, _self.module_name}))
	_self.add_action(sw_action.new(:save,
				       :engine, _self.dialog,
				       :action_message, {:|perform_safely()|, :|save()|},
				       :image, {:save, _self.module_name}))
	_self.add_action(sw_action.new(:save_as,
				       :engine, _self.dialog,
				       :action_message, {:|perform_safely()|, :|save_as()|},
				       :image, {:save_as, _self.module_name}))
	_self.add_action(sw_action.new(:open,
				       :engine, _self.dialog,
				       :action_message, {:|perform_safely()|, :|open()|},
				       :image, {:open, _self.module_name}))
	_self.add_action(sw_action.new(:close,
				       :engine, _self.dialog,
				       :action_message, {:|perform_safely()|, :|close()|},
				       :image, {:close, _self.module_name}))
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method dataset_plugin.pre_activation()
	_self.dialog.open_default_ds()
	_return _super.pre_activation()
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method dataset_plugin.on_deactivation()
	_local dialog << _self.dialog
	_if dialog _isnt _unset
	_then 
		dialog.close()
	_endif 
	_return _super.on_deactivation()
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method dataset_plugin.terminate()
	_self.dialog.close()
	_super.terminate()
_endmethod
$

