#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:root_dialog)
$

_pragma(classify_level=restricted, topic={analysis})
##
## Dialog to create root_collection that will yield one of the
## base collections that make up the compound current collection.
##
def_slotted_exemplar(:root_dialog,
	{
		{:items,         _unset},
		{:holder,        _unset},
		{:record_holder, _unset},
		{:target_collection, _unset}
	},
	:model)
$

message_handler.new(:root_dialog).add_uses(:model, :gen_graphics)
$

_pragma(classify_level=restricted, topic={analysis})
_method root_dialog.set_holder(holder, record_holder, dsm, target_col)
	.holder        << holder
	.record_holder << record_holder
	.target_collection << target_col
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method root_dialog.activate_in(container)
	container.top_frame.modality << :primary_modal
	.items << property_list.new()
	_local rc << rowcol.new(container,_unset, 1, _unset, :style, :top_level,
				:col_alignment, :fill,
				:row_alignment, :fill)
	_self.build_top_label(rc)
	_self.build_root_selection(rc)
	panel_separator.new(rc, :col_alignment, :fill)
	_self.build_buttons(rc)
	_return rc
_endmethod
$


_pragma(classify_level=restricted, topic={analysis})
_private _method root_dialog.build_top_label(container)
	text_window.new(container, 7, 100, _unset,
			:horizontal_scrollbar?, _false,
			:editable?, _false,
			:contents, _self.message(:top_label),
			:col_alignment, :fill )
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method root_dialog.build_root_selection(container)
	_local rc << rowcol.new(container, _unset, 2, _unset, :style, :nested, :col_alignment, :fill)
	label_item.new(rc, _self.message(:source_collection))
	.items[:col] << label_item.new(rc, .record_holder.name, :col_alignment, :fill)
	
	label_item.new(rc, _self.message(:root))
	_local choice << text_choice_item.new(rc, _unset, :text_items, {},
					      :model, _self,
					      :change_selector, :|root_changed()|,
					      :col_alignment, :fill)
	.items[:root_choice] << choice
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method root_dialog.build_buttons(container)
	## 
	_local rc << rowcol.new(container, 1, _unset, _unset, :style, :button_box,
				:row_alignment, :fill,
				:col_alignment, :right)
	.items[:ok]     << button_item.new_safe(rc, _self.message(:ok), _self, :|ok()|,
						:row_alignment, :bottom,
						:min_width, 75)
	.items[:cancel] << button_item.new_safe(rc, _self.message(:cancel), _self, :|cancel()|,
						:row_alignment, :bottom,
						:min_width, 75)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method root_dialog.on_activation()
	_self.initialise_target_choice()
	.items[:ok].enabled? << .items[:root_choice].value _isnt _unset 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method root_dialog.initialise_target_choice()
	_local items << _self.root_items
	.items[:root_choice].text_items << items
	_self.set_current_target_collection(items)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method root_dialog.set_current_target_collection(items)
	_local value << _unset
	_if items.size > 0
	_then
		value << items[1][1]
	_endif
	_if .target_collection _isnt _unset
	_then
		_for i_vec _over items.fast_elements()
		_loop
			_if i_vec[1] _is .target_collection
			_then
				value << i_vec[1]
			_endif
		_endloop
	_endif
	.items[:root_choice].rwan_value_with_notify << value
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method root_dialog.root_changed(value)
	.target_collection << value
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method root_dialog.ok()
	_if .holder _is _unset
	_then
		_local new_col << .record_holder.collection.root(.target_collection)
		.parent_model.add_collection(new_col)
	_else
		.holder.collection.update(.target_collection)
		.parent_model.update_holder(.holder)
	_endif 
	_self.close()
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method root_dialog.cancel()
	_self.close()
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method root_dialog.root_items
	_local done << set.new()
	_local items << rope.new()
	
	_local current_sw_col << .record_holder.collection.expose()
	_for i_col _over .record_holder.collection.branch_to_root()
	_loop
		_local sw_col << i_col.expose()
		_if current_sw_col _is sw_col _then _continue _endif
		
		_if _not done.includes?(sw_col)
		_then
			items.add({sw_col, sw_col.external_name})
		_endif
	_endloop
	_if items.empty?
	_then
		items.add({_unset, _self.message(:no_root)})
	_endif 
	_return items
_endmethod
$
