#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:follow_join_dialog)
$

_pragma(classify_level=restricted, topic={analysis})
##
## Dialog to select a join from a base collection to follow to
## a new collection.
##
def_slotted_exemplar(:follow_join_dialog,
	{
		{:join_field_name, _unset}
	},
	:base_dialog)
$

message_handler.new(:follow_join_dialog).add_uses(:model, :base_dialog)
$

_pragma(classify_level=restricted, topic={analysis})
_method follow_join_dialog.set_source_holder(workspace, source_holder)
	.workspace << workspace
	.source_holder << source_holder
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method follow_join_dialog.set_holder(workspace,
				      holder, source_holder,
				      join_field_name)
	.workspace << workspace
	.holder << holder
	.source_holder << source_holder
	.name << holder.name
	.join_field_name << join_field_name
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method follow_join_dialog.activate_in(container)
	container.top_frame.modality << :primary_modal
	_local rc << rowcol.new(container,_unset, 1, _unset, :style, :top_level,
				:col_alignment, :fill,
				:row_alignment, :fill)
	_self.build_top_label(rc)
	_self.build_join_selection(rc)
	_self.build_name(rc)
	panel_separator.new(rc, :col_alignment, :fill) 
	_self.build_buttons(rc)
	_return rc
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method follow_join_dialog.build_join_selection(container)
	## 
	_local rc << rowcol.new(container, _unset, 2, _unset, :style, :nested, :col_alignment, :fill)
	sw_label_item.new(rc, _self.message(:source_holder))
	sw_text_item.new(rc,
			 :value, .source_holder.name,
			 :enabled?, _false,
			 :col_alignment, :fill)
	
	sw_label_item.new(rc, _self.message(:join))
	.items[:join_choice] << sw_text_item.new(rc, :text_items, {},
						 :editable?, _false,
						 :model, _self,
						 :change_selector, :|join_field_name_changed()|,
						 :col_alignment, :fill)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method follow_join_dialog.on_activation()
	_self.initialise_join()
	_self.initialise_name()
	_super.on_activation()
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method follow_join_dialog.initialise_join()
	_local items << _self.join_items
	.items[:join_choice].text_items << items
	_self.set_current_join(items) 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method follow_join_dialog.join_field_name_changed(value)
	.join_field_name << value
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method follow_join_dialog.set_current_join(items)
	_local value << _unset
	_if items.size > 0
	_then
		value << items[1][1]
	_endif 
	_if .join_field_name _isnt _unset
	_then
		_for i_vec _over items.fast_elements()
		_loop
			_if i_vec[1] = .join_field_name
			_then
				value << i_vec[1]
			_endif
		_endloop
	_endif 
	_if value _isnt _unset
	_then
		.items[:join_choice].rwan_value_with_notify << value
	_endif 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method follow_join_dialog.construct_holder()
	_local col << .source_holder.collection.follow_join(.join_field_name)
	_return .parent_model.new_holder(col, .name)
_endmethod
$


_pragma(classify_level=restricted, topic={analysis})
_method follow_join_dialog.join_items
	_local items << rope.new()
	_local sw_col << .source_holder.collection.expose()
	_if sw_col.join_fields.empty?
	_then
		items.add( {_unset, _self.message(:no_join)} )
	_else
		_for i_join _over sw_col.join_fields.fast_elements()
		_loop
			_if i_join.name = :int!info_flags _then _continue _endif 
			_if i_join.heterogeneous? _then _continue _endif
			
			_local target << i_join.result_table(sw_col.dataset)
			_if target _is _unset _then _continue _endif 
			target << target.descriptor
			_if target.internal_table?.not
			_then 
				_local str << write_string( i_join.external_name, " -> ", target.external_name)
				items.add({i_join.name, str})
			_endif 
		_endloop
		items << items.as_sorted_collection(_proc(a,b) >> a[2] _cf b[2] _endproc )
		items << rope.new_from(items)
	_endif
	_return items
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method follow_join_dialog.manage_actions()
	_local has_name? << .name.default("") <> ""
	.items[:ok].enabled? << .readonly?.not _andif has_name? _andif (.join_field_name _isnt _unset)
	.items[:name].enabled? << .readonly?.not
_endmethod
$
