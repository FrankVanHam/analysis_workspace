#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:distance_filter_dialog)
$

_pragma(classify_level=basic, topic={analysis})
## Dialog that create a distance collection for the base record
## collection.
def_slotted_exemplar(:distance_filter_dialog,
	{
		{:distance,  _unset},
		{:inverse?,  _unset}
	},
	:base_dialog)
$

_pragma(classify_level=basic, topic={analysis})
message_handler.new(:distance_filter_dialog).add_uses(:model, :base_dialog)
$

_pragma(classify_level=restricted, topic={analysis})
_method distance_filter_dialog.set_source_holder(workspace, source_holder)
	.workspace << workspace
	.source_holder << source_holder
	.inverse? << _false
	.distance << length_value.new(10,:m)
_endmethod
$
_pragma(classify_level=restricted, topic={analysis})
_method distance_filter_dialog.set_holder(workspace,
					 holder, source_holder, source_geom_name,
					 distance, inverse?, filter_holder, filter_geom_name)
	.workspace << workspace
	.holder << holder
	.source_holder << source_holder
	.source_geom_name << source_geom_name
	.distance << distance
	.inverse? << inverse?
	.filter_holder << filter_holder
	.filter_geom_name << filter_geom_name
	.name << holder.name
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method distance_filter_dialog.activate_in(container)
	container.top_frame.modality << :primary_modal
	_local rc << rowcol.new(container,_unset, 1, _unset, :style, :top_level,
				:row_alignment, :fill,
				:col_alignment, :fill)
	_self.build_top_label(rc)
	_self.build_distance_options(rc)
	_self.build_name(rc)
	panel_separator.new(rc, :col_alignment, :fill)
	_self.build_buttons(rc)
	_return rc
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method distance_filter_dialog.build_distance_options(container)
	_local rc << rowcol.new(container, _unset, 2, _unset, :style, :nested, :col_alignment, :fill)
	_self.build_source_selection_rc(rc)
	_self.build_filter_selection_rc(rc)
	
	sw_label_item.new(rc, _self.message(:distance))
	.items[:distance] << ti << managed_value_text_item.new(rc, _unset,
							       :model, _self,
							       :change_selector, :|distance_changed()|,
							       :display_length, 10, :col_alignment, :fill)
	ti.manager << unit_value_manager.new(unit_manager.unit(:m))
	
	sw_label_item.new(rc, _self.message(:inverse?))
	.items[:inverse?] << toggle_item.new(rc, _unset,
					     :model, _self,
					     :change_selector, :|inverse_changed()|,
					     :col_alignment, :fill)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method distance_filter_dialog.on_activation()
	_self.initialise_source_geometry_choice()
	_self.initialise_filter_holder_choice()
	_self.initialise_distance()
	_self.initialise_inverse()
	_self.initialise_name()
	_return _super.on_activation()
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method distance_filter_dialog.initialise_distance()
	.items[:distance].value << .distance
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method distance_filter_dialog.initialise_inverse()
	.items[:inverse?].value << .inverse?
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method distance_filter_dialog.distance_changed(value)
	.distance << value 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method distance_filter_dialog.inverse_changed(value)
	.inverse? << value 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method distance_filter_dialog.construct_holder()
	_local col << .source_holder.collection.filter_by_distance(.source_geom_name, .distance, .inverse?,
								   .filter_holder.collection,.filter_geom_name)
	_return .parent_model.new_holder(col, .name)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method distance_filter_dialog.manage_actions()
	_local has_name? << .name.default("") <> ""
	.items[:ok].enabled? << .readonly?.not _andif has_name? _andif .source_geom_name _isnt _unset _andif .filter_geom_name _isnt _unset

	.items[:source_geometry_choice] .enabled? << .readonly?.not
	.items[:filter_holder_choice].enabled? << .readonly?.not
	.items[:filter_geometry_choice].enabled? << .readonly?.not
	.items[:name].enabled? << .readonly?.not
	.items[:distance].enabled? << .readonly?.not
	.items[:inverse?].enabled? << .readonly?.not
_endmethod
$
