#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:predicate_filter_dialog)
$

_pragma(classify_level=restricted, topic={analysis})
##
## Dislog to create filtered collection on a predicate of a
## base collection. Lets the user construct a predicate using a
## query_predicate_component.
##
def_slotted_exemplar(:predicate_filter_dialog,
	{
		{:holder,              _unset},
		{:items,               _unset},
		{:predicate_component, _unset},
		{:predicate,           _unset},
		{:record_holder,       _unset}
	},
	:model)
$

message_handler.new(:predicate_filter_dialog).add_uses(:model, :gen_graphics)
$

_pragma(classify_level=restricted, topic={analysis})
_method predicate_filter_dialog.set_holder(holder, record_holder, dsm, predicate)
	.holder << holder
	.record_holder << record_holder
	.predicate << predicate
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method predicate_filter_dialog.activate_in(container)
	container.top_frame.modality << :primary_modal
#	container.top_frame.resizable? << _false
	
	.items << property_list.new()
	_local rc << rowcol.new(container,_unset, 1, _unset, :style, :top_level, :resize?, _true, :row_resize_values, {25,0,75,0,0})
	_self.build_top_label(rc)
	_self.build_source_label(rc)
	_self.build_predicate_selection(rc)
	panel_separator.new(rc, :col_alignment, :fill)
	_self.build_buttons(rc)
	_return rc
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method predicate_filter_dialog.build_top_label(container)
	text_window.new(container, 3, 50, _unset,
			:horizontal_scrollbar?, _false,
			:editable?, _false,
			:contents, _self.message(:top_label),
			:col_alignment, :fill)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method predicate_filter_dialog.build_source_label(container)
	_local rc << rowcol.new(container, _unset, 4, _unset, :style, :nested, :col_alignment, :fill)
	label_item.new(rc, _self.message(:source_collection))
	label_item.new(rc, .record_holder.name)
	label_item.new(rc, _self.message(:indexes))
	text_choice_item.new(rc, _unset, :items, _self.index_items, :col_alignment, :fill,
			    :balloon_help_text, _self.message(:indexes_balloon) )
_endmethod
$



_pragma(classify_level=restricted, topic={analysis})
_private _method predicate_filter_dialog.build_predicate_selection(container)
	_local rc << rowcol.new(container, 1, _unset, _unset, :style, :nested, :col_alignment, :fill, :row_alignment, :fill)
	_local ace << .parent_model.ace
	.predicate_component << query_predicate_component.new( :query, _self, :ace, ace)
	.predicate_component.build_gui(rc)
	
	_local col << .record_holder.collection.expose()
	_local names << _self.physical_fields(col, ace)
	.predicate_component.set_collection(col,
					    :field_names,
					    names)
	.predicate_component.set_predicate(.predicate)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method predicate_filter_dialog.physical_fields(col, ace)
	_local all_names << ace.table_visible_field_names_with_defaults(
				    col.dataset.dataset_name,
				    col.name,
				    :browser )
	_local names << rope.new()
	_for i_name _over all_names.fast_elements()
	_loop
		_if _not col.field(i_name).is_geometry?
		_then
			names.add(i_name)
		_endif
	_endloop
	_return names
_endmethod
$


_pragma(classify_level=restricted, topic={analysis})
_private _method predicate_filter_dialog.build_buttons(container)
	_local rc << rowcol.new(container, 1, _unset, _unset, :style, :button_box, :col_alignment, :right)
	.items[:ok]     << button_item.new_safe(rc, _self.message(:ok), _self, :|ok()|, :min_width, 75)
	.items[:cancel] << button_item.new_safe(rc, _self.message(:cancel), _self, :|cancel()|, :min_width, 75)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method predicate_filter_dialog.ok()
	_local pred << _self.construct_predicate()
	_if .holder _is _unset
	_then 
		_local new_col << .record_holder.collection.filter_by_predicate(pred)
		.parent_model.add_collection(new_col)
	_else
		.holder.collection.update(pred)
		.parent_model.update_holder(.holder)
	_endif 
	_self.close()
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method predicate_filter_dialog.construct_predicate()
	_local pred << .predicate_component.predicate()
	_if pred _is _unset
	_then
		_self.user_error(:please_supply_a_predicate)
	_endif
	_return pred
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method predicate_filter_dialog.cancel()
	_self.close()
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method predicate_filter_dialog.index_items
	_local items << rope.new()
	_local sw_col << .record_holder.collection.expose()
	_local indexes << _if sw_col.responds_to?(:all_index_names)
			  _then >> sw_col.all_index_names
			  _else >> {}
			  _endif 
	_for i_vec _over indexes.fast_elements()
	_loop
		_if i_vec.size = 1 _andif i_vec[1] _is :rwo_id _then _continue _endif 
		_local str << internal_text_output_stream.new()
		_local comma? << _false 
		_for i_field_name _over i_vec.fast_elements()
		_loop
			_if (comma?^<<_true)
			_then
				str.write( ", ")
			_endif
			str.write(sw_col.field(i_field_name).external_name)
		_endloop
		items.add(str.string)
	_endloop
	_if items.empty?
	_then
		items.add(_self.message(:no_indexes))
	_endif 
	_return items
_endmethod
$
