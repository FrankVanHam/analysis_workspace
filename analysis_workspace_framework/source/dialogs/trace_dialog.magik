#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:trace_dialog)
$

_pragma(classify_level=basic, topic={demo})
##
## dialog to construct a trace collection to trace topology
## of the source collection to find records of the target
## collection. The user can apply a maximum distance and set
## stop predicates.
##
def_slotted_exemplar(:trace_dialog,
	{
		{:items,             _unset},
		{:holder,            _unset},
		{:record_holder,     _unset},
		{:geom_name,         _unset},
		{:max_length,        _unset},
		{:stop_predicates,   _unset},
		{:selected_stop_collection, _unset},
		{:target_collection, _unset}
	}, :model )
$

message_handler.new(:trace_dialog).add_uses(:model, :gen_graphics) 
$

_pragma(classify_level=restricted, topic={analysis})
_method trace_dialog.set_holder(holder, record_holder, dsm, geom_name, stop_preds, max_length, target_col)
	.holder        << holder
	.record_holder << record_holder
	.geom_name     << geom_name
	.max_length    << max_length
	.stop_predicates << stop_preds.default(property_list.new())
	.target_collection << target_col
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method trace_dialog.activate_in(container) 
	container.modality << :primary_modal
	.items << property_list.new()
	_local rc << rowcol.new(container,_unset, 1, _unset, :style, :top_level, :resize?, _true, :row_resize_values, {25,0,0,75})
	_self.build_top_label(rc)
	_self.build_trace_selection(rc)
	_self.build_length_item(rc)
	_self.build_stop_predicates(rc)
	panel_separator.new(rc, :col_alignment, :fill) 
	_self.build_buttons(rc) 
	_return rc
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method trace_dialog.build_top_label(container)
	text_window.new(container, 5, 50, _unset,
			:horizontal_scrollbar?, _false,
			:editable?, _false,
			:contents, _self.message(:top_label),
			:col_alignment, :fill,
			:row_alignment, :fill )
_endmethod
$
_pragma(classify_level=restricted, topic={analysis})
_private _method trace_dialog.build_trace_selection(container) 
	_local rc << rowcol.new(container, _unset, 2, _unset, :style, :nested, :col_alignment, :fill)
	label_item.new(rc, _self.message(:source_collection))
	.items[:col] << label_item.new(rc, _self.collection_description, :col_alignment, :fill)
	
	label_item.new(rc, _self.message(:geometry)) 
	.items[:geometry_choice] << text_choice_item.new(rc, _unset, :items, {},
							 :model, _self,
							 :change_selector, :|geometry_changed()|,
							 :col_alignment, :fill)
	
	label_item.new(rc, _self.message(:topology) ) 
	.items[:topology_choice] << text_choice_item.new(rc, _unset, :items, {},
							 :model, _self,
							 :change_selector, :|target_changed()|,
							 :col_alignment, :fill)  
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method trace_dialog.build_length_item(container)
	_local rc << rowcol.new(container, _unset, 2, _unset, :style, :nested, :col_alignment, :fill)
	label_item.new(rc, _self.message(:max_length))
	.items[:max_length] << ti << managed_value_text_item.new(rc, _unset, 
								 :model, _self,
								 :change_selector, :|max_length_changed()|,
								 :col_alignment, :fill)
	ti.manager << unit_value_manager.new(unit_manager.unit(:m))
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method trace_dialog.build_stop_predicates(container)
	_local rc << rowcol.new(container, _unset, 1, _unset, :style, :nested,
				:row_alignment, :fill, :row_resize_values, {0,100},
				:col_alignment, :fill, :col_resize_values, {0,100})

	_local rrc << _self.new_toolbar(rc)
	label_item.new(rrc, _self.message(:stop_predicates))
	.items[:add_predicate] << image_button_item.new_safe(rrc,_self.add_image,
							     _self,:|add_predicate()|,
							     :balloon_help_id, :add_predicate_tt,
							     :insensitive_image, _self.grey_add_image)
	.items[:edit_predicate] << image_button_item.new_safe(rrc,_self.edit_image,
							     _self,:|edit_predicate()|,
							     :balloon_help_id, :edit_predicate_tt,
							     :insensitive_image, _self.grey_edit_image)
	.items[:remove_predicate] << image_button_item.new_safe(rrc,_self.remove_image,
							     _self,:|remove_predicate()|,
							     :balloon_help_id, :remove_predicate_tt,
							     :insensitive_image, _self.grey_remove_image)
	
	.items[:list] << tree_item.new(rc,
				       :mode, :one,
				       :aspect, :stop_predicates_trees,
				       :model, _self,
				       :double_click_notifier, {:|perform_safely()|, :|edit_predicate()|},
				       :select_notifier,       {:|perform_safely()|, :|predicate_selected()|},
				       :row_alignment, :fill, :col_alignment, :fill)
_endmethod
$


_pragma(classify_level=advanced, topic={analysis})
_private _method trace_dialog.new_toolbar(container)
	rc << toolbar.new(container, _false)
	rc.col_spacing << 0
	rc.row_spacing << 0
	rc.outer_spacing << 2
	_return rc
_endmethod
$


_pragma(classify_level=restricted, topic={analysis})
_private _method trace_dialog.build_buttons(container) 
	_local rc << rowcol.new(container, 1, _unset, _unset, :style, :button_box, :col_alignment, :right)
	.items[:ok]     << button_item.new_safe(rc, _self.message(:ok) , _self, :|ok()|, :min_width, 75) 
	.items[:cancel] << button_item.new_safe(rc, _self.message(:cancel) , _self, :|cancel()|, :min_width, 75) 
_endmethod
$
_pragma(classify_level=restricted, topic={analysis})
_method trace_dialog.on_activation() 
	_self.initialise_geometry_choice()
	_self.initialise_target_choice()
	_self.initialise_max_length()
	_self.manage_actions()
	_return _super(model).on_activation()
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method trace_dialog.initialise_geometry_choice()
	_local items << _self.geom_field_items
	.items[:geometry_choice].items << items
	_self.set_current_geom_field(items)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method trace_dialog.initialise_target_choice()
	_if .geom_name _isnt _unset
	_then 
		_local geom_field << .record_holder.collection.expose().field(.geom_name)
		_local items << _self.topology_items(geom_field)
		.items[:topology_choice].items << items
		_self.set_current_target_collection(items)
	_endif 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method trace_dialog.initialise_max_length()
	.items[:max_length].value << .max_length
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method trace_dialog.add_predicate()
	_local geom_field << .record_holder.collection.expose().field(.geom_name)
	_local possible_collections << _self.collections_for_topology(geom_field)
	_local ed << trace_stop_dialog.new_dialog(_self, possible_collections, _unset, .parent_model.ace)
	ed.activate_relative_to(_self.message(:predicate_dialog_title), _self.top_frame)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method trace_dialog.edit_predicate()
	_local pred << .stop_predicates[.selected_stop_collection]
	_local possible_collections << {.selected_stop_collection}
	_local ed << trace_stop_dialog.new_dialog(_self, possible_collections, pred, .parent_model.ace)
	ed.activate_relative_to(_self.message(:predicate_dialog_title), _self.top_frame)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method trace_dialog.stop_predicates_trees
	_local list << rope.new()
	_for i_col, i_pred _over .stop_predicates.fast_keys_and_elements()
	_loop
		list.add(_self.display_tree_for(i_pred, i_col))
	_endloop
	_return list
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method trace_dialog.display_tree_for(pred, col)
	#
	_local t << display_tree.new(col)
	_local image << col.record_exemplar.legend_info_for(property_list.new())
	_if image _is _unset _orif image _is :use_default
	_then
		image << {:collection, :ui_resources}
	_endif
	_if pred _isnt _unset
	_then 
		style << {:image, image, col.external_name.copy(), _self.message(:where),
			  :blue, pred.write_string}
	_else
		style << {:image, image, col.external_name.copy()}
	_endif
	t.styled_string << style
	_return t 
_endmethod
$


_pragma(classify_level=restricted, topic={analysis})
_method trace_dialog.predicate_selected(tree_selection)
	_local tree << tree_selection.an_element()
	_if tree _isnt _unset
	_then
		col << tree.key
	_else
		col << _unset
	_endif 
	.selected_stop_collection << col
	_self.manage_actions()
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method trace_dialog.update_predicate(pred, col)
	.stop_predicates[col] << pred
	_self.refresh_list()
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method trace_dialog.remove_predicate()
	.stop_predicates.remove_key(.selected_stop_collection)
	_self.refresh_list()
	_self.manage_actions()	
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method trace_dialog.refresh_list()
	_self.changed(:stop_predicates_trees, :renew)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method trace_dialog.max_length_changed(value)
	.max_length << value
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method trace_dialog.set_current_target_collection(items)
	_local value << _unset
	_if items.size > 0
	_then
		value << items[1][1]
	_endif
	_if .target_collection _isnt _unset
	_then
		_for i_vec _over items.fast_elements()
		_loop
			_if i_vec[1] _is .target_collection
			_then
				value << i_vec[1]
			_endif
		_endloop
	_endif
	.items[:topology_choice].value_with_notify << value
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method trace_dialog.set_current_geom_field(items)
	_local value << _unset
	_if items.size > 0
	_then
		value << items[1][1]
		_local _constant topo_cats << {:chain, :point, :area}
		_for i_vec _over items.fast_elements()
		_loop
			_local geom_cat << i_vec[1].geom_category
			_if topo_cats.includes?(geom_cat)
			_then
				value << i_vec[1]
				_leave 
			_endif
		_endloop
	_endif
	_if .geom_name _isnt _unset
	_then
		_for i_vec _over items.fast_elements()
		_loop
			_if i_vec[1].name = .geom_name
			_then
				value << i_vec[1]
			_endif
		_endloop
	_endif
	_if value _isnt _unset
	_then 
		.items[:geometry_choice].value_with_notify << value
	_endif
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method trace_dialog.ok()
	_if .holder _is _unset
	_then
		_local col << .record_holder.collection.follow_trace(.geom_name, .target_collection, _self.trace_stop_predicates, _self.max_length)
		.parent_model.add_collection(col)
	_else
		.holder.collection.update(.geom_name, _self.trace_stop_predicates, _self.max_length, .target_collection)
		.parent_model.update_holder(.holder)
	_endif 
	_self.close() 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method trace_dialog.trace_stop_predicates
	_return .stop_predicates
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method trace_dialog.max_length
	_return .items[:max_length].value	
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method trace_dialog.cancel() 
	_self.close() 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method trace_dialog.geometry_changed(geom_field)
	.geom_name << geom_field.name
	.items[:topology_choice].items << _self.topology_items(geom_field)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method trace_dialog.target_changed(value)
	.target_collection << value
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method trace_dialog.topology_items(geom_field) 
	_local items << rope.new()
	_local cols << _self.collections_for_topology(geom_field) 
	_for i_col _over cols.fast_elements()
	_loop
		items.add({ i_col, i_col.external_name.copy()}) 
	_endloop
	items << items.as_sorted_collection(_proc(a, b) 
						    _return a[2] _cf b[2]
					    _endproc) 
	items << rope.new_from(items) 
	_if items.empty?
	_then
		items.add({_unset, _self.message(:no_topology)})
	_endif 
	_return items
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method trace_dialog.collections_for_topology(geom_field) 
	_local sw_col << .record_holder.collection.expose()
	_local ds << sw_col.dataset
	_if geom_field.mapped?
	_then
		fds << geom_field.mapped_geometry_fields.elements
	_else
		fds << {geom_field}
	_endif
	_local done << set.new_with(sw_col.descriptor)
	_local cols << rope.new()
	_for fd _over fds.fast_elements()
	_loop
		_if _not fd.has_topology? _then _continue _endif 
		_local gs << ds.geometry_on_manifold(fd.manifold_code)
		_for i_fd _over gs.fast_elements()
		_loop
			_local dd << i_fd.owner
			_local col << dd.dataset.collections[dd.name]
			_if done.includes?(col).not
			_then 
				cols.add(col)
				done.add(col)
			_endif 
		_endloop
	_endloop 
	_return cols
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method trace_dialog.geom_field_items
	_return _self.geom_field_items_for(.record_holder.collection) 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method trace_dialog.geom_field_items_for(col)
	_local sw_col << col.expose()
	_local fds << rope.new()
	_for i_fd  _over sw_col.descriptor.geometry_fields()
	_loop
		_if i_fd.name _is :meatball
		_then
			_continue
		_endif
		fds.add({ i_fd, i_fd.external_name }) 
	_endloop
	fds << fds.as_sorted_collection(_proc(a, b) 
						_return a[2] _cf b[2]
					_endproc) 
	fds << rope.new_from(fds)
	_return fds
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method trace_dialog.collection_description
	_if .record_holder.is_record_collection?
	_then
		_return .record_holder.collection.expose().external_name
	_else
		_return _self.message(:geometry_collection)
	_endif 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method trace_dialog.manage_actions()
	_local topo? << . target_collection _isnt _unset 
	_local any? << .stop_predicates.empty?.not 
	_local sel? << .selected_stop_collection _isnt _unset
	.items[:add_predicate].enabled? << topo?
	.items[:edit_predicate].enabled? << topo? _and sel?
	.items[:remove_predicate].enabled? << topo? _and sel?
	.items[:ok].enabled? << topo?
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_private _method trace_dialog.edit_image
	_return smallworld_product.get_raster_image(:edit, :ui_resources)
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_private _method trace_dialog.grey_edit_image
	_return smallworld_product.get_raster_image(:edit_grey, :ui_resources)
_endmethod
$
_pragma(classify_level=advanced, topic={analysis})
_private _method trace_dialog.add_image
	_return smallworld_product.get_raster_image(:add, _self.module_name)
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_private _method trace_dialog.grey_add_image
	_return smallworld_product.get_raster_image(:add_grey, _self.module_name)
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_private _method trace_dialog.remove_image
	_return smallworld_product.get_raster_image(:remove, _self.module_name)
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_private _method trace_dialog.grey_remove_image
	_return smallworld_product.get_raster_image(:remove_grey, _self.module_name)
_endmethod
$
