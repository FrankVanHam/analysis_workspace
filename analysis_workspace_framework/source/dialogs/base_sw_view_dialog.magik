#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$


#remex(:base_sw_view_dialog)
$

_pragma(classify_level=restricted, topic={analysis})
##
## Dialog to create a view collection that links two
## collections by a join. The user can pick the fields that
## should be included and rename them.
## 
def_slotted_exemplar(:base_sw_view_dialog,
	{
		{:items, _unset},
		{:holder, _unset},
		{:analysis_dsm,  _unset},
		{:source_fields, _unset},
		{:source_table,  _unset},
		{:linked_table,  _unset},
		{:linked_fields, _unset},
		{:result_fields, _unset}
	},
	:model)
$

message_handler.new(:base_sw_view_dialog).add_uses(:model, :gen_graphics)
$


_pragma(classify_level=restricted, topic={authorisation,editors})
## The names of fields to be skipped
base_sw_view_dialog.define_shared_constant( :skip_field_names,	{ :ds!version, :rwo_id, :meatball }, :private )
$


_pragma(classify_level=restricted, topic={analysis})
_method base_sw_view_dialog.init(_gather a)
	.source_fields << rope.new()
	.linked_fields << rope.new()
	.result_fields << rope.new()
	
	_return _super.init(_scatter a)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_abstract _method base_sw_view_dialog.set_holder(holder, dsm)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method base_sw_view_dialog.activate_in(container)
	container.modality << :primary_modal
	.items << property_list.new()
	_local rc << rowcol.new(container,_unset, 1, _unset, :style, :top_level, :resize?, _true, :row_resize_values, {0,100})
	_self.build_top_label(rc)
	_self.build_trees(rc)
	panel_separator.new(rc, :col_alignment, :fill)
	_self.build_buttons(rc)
	_return rc
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method base_sw_view_dialog.build_top_label(container)
	text_window.new(container, 4, 50, _unset,
			:horizontal_scrollbar?, _false,
			:editable?, _false,
			:contents, _self.message(:top_label),
			:col_alignment, :fill,
			:row_alignment, :fill )
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method base_sw_view_dialog.build_trees(container)
	_local rc << rowcol.new(container, 1, _unset, _unset, :style, :nested,
				:col_alignment, :fill,
				:col_resize_values, {30,0,30,0,30},
				:row_alignment, :fill)
	_self.build_source_tree(rc)
	_self.build_link_button(rc)
	_self.build_linked_tree(rc)
	_self.build_arrow(rc)
	_self.build_result_tree(rc)
_endmethod
$


_pragma(classify_level=restricted, topic={analysis})
_private _method base_sw_view_dialog.build_source_tree(container)
	_local rc << rowcol.new(container, _unset, 1, _unset, :style, :nested,
				:col_alignment, :fill,
				:row_alignment, :fill)
	.items[:source_table] << label_item.new(rc, .source_table.external_name)
	.items[:source_tree] << tree_item.new(rc,
					      :model, _self,
					      :distribute_spare_width, :always,
					      :select_notifier, :|source_field_selected()|,
					      :data_selector, :|get_source_tree()|,
					      :aspect, :source,
					      :column_allow_sort?, _false,
					      :column_heading_ids, {:use?, :img, :source_field},
					      :col_resize_values, {0,0, 40},
					      :column_widths, {35,30, 100},
					      :toggle_notifier, {:|perform_safely()|, :|toggled_source()|},
					      :col_alignment, :fill,
					      :row_alignment, :fill)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method base_sw_view_dialog.set_source_table()
	_local sw_table << .source_table.descriptor
	.source_fields << _self.fields_for(sw_table)
	
	_self.changed(:source, :refresh)
	
	_self.manage_actions()
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method base_sw_view_dialog.get_source_tree()
	##
	_local sw_table << .source_table.descriptor
	_return _self.trees_for(sw_table, .source_fields)
_endmethod
$


_pragma(classify_level=restricted, topic={analysis})
_method base_sw_view_dialog.get_linked_tree()
	##
	_return _self.trees_for(.linked_table, .linked_fields)
_endmethod
$



_pragma(classify_level=restricted, topic={analysis})
_abstract _private _method base_sw_view_dialog.build_link_button(container)
_endmethod
$


_pragma(classify_level=restricted, topic={analysis})
_private _method base_sw_view_dialog.build_linked_tree(container)
	_local rc << rowcol.new(container, _unset, 1, _unset, :style, :nested,
				:col_alignment, :fill,
				:row_alignment, :fill)
	.items[:linked_table] << label_item.new(rc, _self.message(:no_table_yet))
	.items[:linked_tree] << tree_item.new(rc,
					      :model, _self,
					      :distribute_spare_width, :always,
					      :select_notifier, :|linked_field_selected()|,
					      :data_selector, :|get_linked_tree()|,
					      :aspect, :linked,
					      :column_allow_sort?, _false,
					      :column_heading_ids, {:use?, :img, :linked_field},
					      :col_resize_values, {0,0, 40},
					      :column_widths, {35,30, 100},
					      :toggle_notifier, {:|perform_safely()|, :|toggled_linked()|},
					      :col_alignment, :fill,
					      :row_alignment, :fill)
_endmethod
$



_pragma(classify_level=restricted, topic={analysis})
_private _method base_sw_view_dialog.build_arrow(container)
	_local rc << rowcol.new(container, _unset, 1, _unset, :style, :nested,
				:row_alignment, :fill)
	image_item.new(rc,  _self.arrow_item,
		       :row_alignment, :top)
	.items[:move_up]   << image_button_item.new_safe( rc, _self.move_up_image, _self, :|move_up()|,
							  :row_alignment, :bottom,
							  :insensitive_image, _self.move_up_grey_image)
	.items[:move_down] << image_button_item.new_safe( rc, _self.move_down_image, _self, :|move_down()|,
							  :row_alignment, :bottom,
							  :insensitive_image, _self.move_down_grey_image)
_endmethod
$


_pragma(classify_level=restricted, topic={analysis})
_private _method base_sw_view_dialog.build_result_tree(container)
	_local rc << rowcol.new(container, _unset, 1, _unset, :style, :nested,
				:col_alignment, :fill,
				:row_alignment, :fill)
	_self.build_result_collection(rc)
	.items[:result_tree] << tree_item.new(rc,
				       :model, _self,
				       :distribute_spare_width, :always,
				       :select_notifier, :|result_field_selected()|,
				       :data_selector, :|get_result_tree()|,
				       :aspect, :result,
				       :column_allow_sort?, _false,
				       :column_heading_ids, {:img, :source_field, :target_field},
				       :col_resize_values, {0, 40, 40},
				       :column_widths, {30, 100, 100},
				       :editors, {{:name, in_place_value_editor}},
				       :value_changed_notifier, :|name_changed()|,
				       #:edit_on_click?, _false,
				       :col_alignment, :fill,
				       :row_alignment, :fill)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_abstract _private _method base_sw_view_dialog.build_result_collection(container)
_endmethod
$



_pragma(classify_level=restricted, topic={analysis})
_private _method base_sw_view_dialog.build_buttons(container) 
	_local rc << rowcol.new(container, 1, _unset, _unset, :style, :button_box, :col_alignment, :right)
	.items[:ok]     << button_item.new_safe(rc, _self.message(:ok), _self, :|ok()|, :min_width, 75)
	.items[:cancel] << button_item.new_safe(rc, _self.message(:cancel), _self, :|cancel()|, :min_width, 75)
_endmethod
$


_pragma(classify_level=restricted, topic={analysis})
_method base_sw_view_dialog.source_field_selected()
	_self.manage_actions()
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method base_sw_view_dialog.linked_field_selected()
	_self.manage_actions()
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method base_sw_view_dialog.result_field_selected()
	_self.manage_actions()
_endmethod
$


_pragma(classify_level=restricted, topic={analysis})
_method base_sw_view_dialog.toggled_linked(tree)
	_self.toggled_tree(tree)
	_self.manage_actions()
	_return _true 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method base_sw_view_dialog.toggled_source(tree)
	_self.toggled_tree(tree)
	_self.manage_actions()
	_return _true 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method base_sw_view_dialog.toggled_tree(tree)
	_local add? << _not tree.value(:use?)
	tree.value(:use?) << add?
	_if add?
	_then
		_self.add_result_field(tree.key)
	_else
		_self.remove_result_field(tree.key)
	_endif
_endmethod
$


_pragma(classify_level=restricted, topic={analysis})
_private _method base_sw_view_dialog.add_result_field(fd)
	.result_fields.add({fd, fd.external_name})
	_self.update_result_tree()
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method base_sw_view_dialog.remove_result_field(fd)
	_local (uses?, the_vec) << _self.uses?(fd)
	.result_fields.remove(the_vec)
	_self.update_result_tree()		
_endmethod
$


_pragma(classify_level=restricted, topic={analysis})
_private _method base_sw_view_dialog.uses?(fd)
	_for i_vec _over .result_fields.fast_elements()
	_loop
		_if i_vec[1] _is fd
		_then
			_return _true, i_vec
		_endif
	_endloop
	_return _false 
_endmethod
$


_pragma(classify_level=restricted, topic={analysis})
_private _method base_sw_view_dialog.update_result_tree()
	_self.changed(:result, :refresh)
	_self.manage_actions()
_endmethod
$



_pragma(classify_level=restricted, topic={analysis})
_method base_sw_view_dialog.get_result_tree()
	_local trees << rope.new()
	_for i_vec _over .result_fields.fast_elements()
	_loop
		(fd, name) << (_scatter i_vec)
		_local org_name   << fd.external_name.write_string
		_local value  << property_list.new_with(:name, name)
		_local tree << display_tree.new(fd, value)
		_local img << _if fd.is_key?
			      _then >> {:key, :ui_resources}
			      _elif fd.is_join?
			      _then >> {:relationship_field, :ui_resources}
			      _else >> fd.icon_scheme
			      _endif
		tree.styled_string << {:image, img, :tab,
				       org_name, :tab,
				       :value, :name}
		trees.add(tree)
	_endloop
	_return trees 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method base_sw_view_dialog.name_changed(tree, key, new_name)
	_local (uses?, the_vec) << _self.uses?(tree.key)
	the_vec[2] << new_name
#	_self.update_result_tree()			
_endmethod
$


_pragma(classify_level=restricted, topic={analysis})
_method base_sw_view_dialog.ok()
	_self.validate()
	_local col << _self.construct_view()
	.parent_model.add_collection(col)
	_self.close()
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_abstract _method base_sw_view_dialog.on_activation()

_endmethod
$


_pragma(classify_level=restricted, topic={analysis})
_private _method base_sw_view_dialog.validate()
	_self.validate_table_name()
	_self.validate_table_unique()
	_self.validate_any()
	_self.validate_single_names()
	_self.validate_field_names()
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method base_sw_view_dialog.validate_table_name()
	_local tname << _self.new_table_name
	_if tname.empty?
	_then
		_self.user_error(:please_enter_table_name)
	_endif 
	_if tname.as_symbol().requires_escape?
	_then
		_self.user_error(:table_name_invalid, _unset, tname)
	_endif
_endmethod
$


_pragma(classify_level=restricted, topic={analysis})
_private _method base_sw_view_dialog.validate_table_unique()
	_local tname << _self.new_table_name
	_local ds << .source_table.dataset
	_if ds.collections.includes_key?(tname)
	_then
		_self.user_error(:table_name_exists, _unset, tname)
	_endif
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method base_sw_view_dialog.validate_any()
	_if .result_fields.empty?
	_then
		_self.user_error(:please_add_result_fields)
	_endif 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method base_sw_view_dialog.validate_single_names()
	_local names << equality_set.new()
	_for i_vec _over .result_fields.fast_elements()
	_loop
		(fd,name) << (_scatter i_vec)
		int_name << _self.ext_to_int(name)
		_if names.includes?(int_name)
		_then
			_self.user_error(:no_double_names, _unset, name)
		_endif
		names.add(int_name)
	_endloop 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method base_sw_view_dialog.validate_field_names()
	_for i_vec _over .result_fields.fast_elements()
	_loop
		(fd,name) << (_scatter i_vec)
		int_name << _self.ext_to_int(name)
		_if int_name.as_symbol().requires_escape?
		_then
			_self.user_error(:field_name_invalid, _unset, fd.external_name, int_name)
		_endif 
	_endloop
_endmethod
$


_pragma(classify_level=restricted, topic={analysis})
_abstract _private _method base_sw_view_dialog.construct_view()
_endmethod
$


_pragma(classify_level=restricted, topic={analysis})
_private _method base_sw_view_dialog.field_specs()
	_local field_specs << rope.new()
	_for i_vec _over .result_fields.fast_elements()
	_loop
		_local (fd, ext_name) << (_scatter i_vec)
		_local int_name << _self.ext_to_int(ext_name)
		field_specs.add({fd.owner.name, fd.name, int_name, ext_name})
	_endloop
	_return field_specs
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method base_sw_view_dialog.cancel()
	_self.close()
_endmethod
$




_pragma(classify_level=restricted, topic={analysis})
_private _method base_sw_view_dialog.set_linked_table()
	.items[:linked_table].label << .linked_table.external_name
	.linked_fields << _self.fields_for(.linked_table)
	_self.changed(:linked, :refresh)	
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method base_sw_view_dialog.unlink()
	_local changed? << _false 
	_for i_fd _over .linked_fields.fast_elements()
	_loop
		_local (used?, v)  << _self.uses?(i_fd)
		_if used?
		_then
			changed? << _true 
			.result_fields.remove(v)
		_endif 
	_endloop
	_if changed?
	_then 
		_self.changed(:result, :refresh)
	_endif 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method base_sw_view_dialog.move_up()
	_local fds << .items[:result_tree].selection.keys
	_for i_fd _over fds.fast_elements()
	_loop
		_local (uses?, v) << _self.uses?(i_fd)
		_local idx << .result_fields.index_of(v)
		_if idx <> 1
		_then
			.result_fields.remove(v)
			.result_fields.add_nth(v, idx-1)
		_endif
	_endloop
	_self.changed(:result, :refresh)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method base_sw_view_dialog.move_down()
	_local fds << .items[:result_tree].selection.keys
	_for i_fd _over fds.fast_elements()
	_loop
		_local (uses?, v) << _self.uses?(i_fd)
		_local idx << .result_fields.index_of(v)
		_if idx <> .result_fields.size
		_then
			.result_fields.remove(v)
			.result_fields.add_nth(v, idx+1)
		_endif
	_endloop
	_self.changed(:result, :refresh)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method base_sw_view_dialog.trees_for(sw_table, fields)
	_local trees << rope.new()
	_for i_field _over fields.fast_elements()
	_loop
		_local name   << i_field.external_name.write_string
		_local used?  << _self.uses?(i_field)
		_local value  << property_list.new_with(:use?, used?)
		_local tree << display_tree.new(i_field, value)
		_local img << _if i_field.is_key?
			      _then >> {:key, :ui_resources}
			      _elif i_field.is_join?
			      _then >> {:relationship_field, :ui_resources}
			      _else >> i_field.icon_scheme
			      _endif
		tree.styled_string << {:toggle, :use?, :tab,
				       :image, img, :tab,
				       name}
		trees.add(tree)
	_endloop
	_return trees 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method base_sw_view_dialog.new_table_name
	_local external_name << .items[:result_table].value.write_string
	_local internal_name << _self.ext_to_int(external_name)
	_return internal_name, external_name
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method base_sw_view_dialog.ext_to_int(str)
	_return str.write_string.convert_to_non_escape_string().as_symbol()
_endmethod
$


_pragma(classify_level=restricted, topic={analysis})
_private _method base_sw_view_dialog.manage_actions()
	_self.manage_link_action()
	
	_local result_sel? << .items[:result_tree].selection.empty?.not 
	.items[:move_up].enabled? << result_sel?
	.items[:move_down].enabled? << result_sel?
_endmethod
$



_pragma(classify_level=restricted, topic={analysis})
_private _method base_sw_view_dialog.fields_for(col)
	_local fields << rope.new()
	_local all_fields <<  sorted_collection.new_from( col.descriptor.all_fields,
							  :external_names )
	# Skip internal fields
	_for a_field _over all_fields.fast_elements()
	_loop
		_if _not _self.skip_field_names.includes?( a_field.name ) _andif
		    a_field.name.index_of_seq( "dd!" ) _is _unset 
		_then
			fields.add(a_field)
		_endif 
	_endloop 
	_return fields
_endmethod
$


_pragma(classify_level=restricted, topic={analysis})
_private _method base_sw_view_dialog.arrow_item
	_return smallworld_product.get_raster_image(:big_arrow_right, _self.module_name)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method base_sw_view_dialog.move_up_image
	_return smallworld_product.get_raster_image(:move_up, _self.module_name)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method base_sw_view_dialog.move_up_grey_image
	_return smallworld_product.get_raster_image(:move_up_grey, _self.module_name)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method base_sw_view_dialog.move_down_image
	_return smallworld_product.get_raster_image(:move_down, _self.module_name)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method base_sw_view_dialog.move_down_grey_image
	_return smallworld_product.get_raster_image(:move_down_grey, _self.module_name)
_endmethod
$
