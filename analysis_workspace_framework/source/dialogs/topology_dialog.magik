#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:topology_dialog)
$

_pragma(classify_level=basic, topic={analysis})
##
## dialog to construct a topology collection to follow topology
## of the source collection.
##
def_slotted_exemplar(:topology_dialog,
	{
		{:target_collection, _unset}
	},
	:base_dialog)
$

message_handler.new(:topology_dialog).add_uses(:model, :base_dialog) 
$

_pragma(classify_level=restricted, topic={analysis})
_method topology_dialog.set_source_holder(workspace, source_holder)
	.workspace << workspace
	.source_holder << source_holder
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method topology_dialog.set_holder(workspace,
				   holder, source_holder, source_geom_name,
				   target_col)
	.workspace << workspace
	.holder << holder
	.source_holder << source_holder
	.source_geom_name << source_geom_name
	.target_collection << target_col
	.name << holder.name
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method topology_dialog.activate_in(container) 
	container.top_frame.modality << :primary_modal
	_local rc << rowcol.new(container,_unset, 1, _unset, :style, :top_level,
				:col_alignment, :fill)
	_self.build_top_label(rc)
	_self.build_topology_selection(rc)
	_self.build_name(rc)
	panel_separator.new(rc, :col_alignment, :fill) 
	_self.build_buttons(rc) 
	_return rc
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method topology_dialog.build_topology_selection(container) 
	_local rc << rowcol.new(container, _unset, 2, _unset, :style, :nested, :col_alignment, :fill)
	_self.build_source_selection_rc(rc)
	
	sw_label_item.new(rc, _self.message(:topology) ) 
	.items[:topology_choice] << sw_text_item.new(rc,
						     :text_items, {},
						     :model, _self,
						     :editable?, _false,
						     :change_selector, :|target_changed()|,
						     :col_alignment, :fill)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method topology_dialog.on_activation() 
	_self.initialise_source_geometry_choice()
	_self.initialise_target_choice()
	_self.initialise_name()
	_return _super.on_activation()
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method topology_dialog.initialise_target_choice()
	_local geom_field << .source_holder.collection.expose().field(.source_geom_name)
	_local items << _self.topology_items(geom_field)
	.items[:topology_choice].text_items << items
	_self.set_current_target_collection(items)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method topology_dialog.set_current_target_collection(items)
	_local value << _unset
	_if items.size > 0
	_then
		value << items[1][1]
	_endif
	_if .target_collection _isnt _unset
	_then
		_for i_vec _over items.fast_elements()
		_loop
			_if i_vec[1] _is .target_collection
			_then
				value << i_vec[1]
			_endif
		_endloop
	_endif
	.items[:topology_choice].rwan_value_with_notify << value
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method topology_dialog.ok()
	_if .holder _is _unset
	_then
		_local col << _self.construct_topology_collection()
		.parent_model.add_holder(.parent_model.new_holder(col,
								  .name))
	_else
		.holder.name << .name
		.holder.collection.update(.source_geom_name, .target_collection)
		.parent_model.update_holder(.holder)
	_endif 
	_self.close() 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method topology_dialog.construct_topology_collection()
	_return .source_holder.collection.follow_topology(.source_geom_name, .target_collection)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method topology_dialog.target_changed(value)
	.target_collection << value
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method topology_dialog.topology_items(geom_field) 
	_local items << rope.new()
	_local cols << _self.collections_for_topology(geom_field) 
	_for i_col _over cols.fast_elements()
	_loop
		items.add({ i_col, i_col.external_name.copy()}) 
	_endloop
	items << items.as_sorted_collection(_proc(a, b) 
						    _return a[2] _cf b[2]
					    _endproc) 
	items << rope.new_from(items) 
	_if items.empty?
	_then
		items.add({_unset, _self.message(:no_topology)})
	_endif 
	_return items
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method topology_dialog.collections_for_topology(geom_field) 
	_local sw_col << .source_holder.collection.expose()
	_local ds << sw_col.dataset
	_if geom_field.mapped?
	_then
		fds << geom_field.mapped_geometry_fields.elements
	_else
		fds << {geom_field}
	_endif
	_local done << set.new_with(sw_col.descriptor)
	_local cols << rope.new()
	_for fd _over fds.fast_elements()
	_loop
		_if _not fd.has_topology? _then _continue _endif 
		_local gs << ds.geometry_on_manifold(fd.manifold_code)
		_for i_fd _over gs.fast_elements()
		_loop
			_local dd << i_fd.owner
			_local col << dd.dataset.collections[dd.name]
			_if done.includes?(col).not
			_then 
				cols.add(col)
				done.add(col)
			_endif 
		_endloop
	_endloop 
	_return cols
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method topology_dialog.manage_actions()
	_local has_name? << .name.default("") <> ""
	.items[:ok].enabled? << .readonly?.not _andif has_name? 
	.items[:source_geometry_choice].enabled? << .readonly?.not
	.items[:name].enabled? << .readonly?.not
	.items[:topology_choice].enabled? << .readonly?.not
_endmethod
$
