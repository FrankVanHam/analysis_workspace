#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package sw
$

_pragma(classify_level=restricted)
_method query_predicate_component.set_predicate(predicate)
	## 
	## Fill the list with the compound predicate. Note that there
	## can be many ands and ors in there.
	#	
	.predicate_elements << _self.predicate_as_list_of_elements(predicate)
	_self.changed( :predicate_elements, :renew )
_endmethod
$

_pragma(classify_level=restricted)
_private _method query_predicate_component.predicate_as_list_of_elements(predicate)
	##
	## Convert the predicate into a list of elements that will
	## recreate predicate.
	#
	_local result << rope.new()
	_if predicate _isnt _unset
	_then 
		_local l << predicate.rwan_as_lineair_list()
		_for i_pred _over l.fast_elements()
		_loop
			_if i_pred _is :or
			_then
				result.add({_unset,:or,_unset})
			_else
				_local field << .collection.field(i_pred.field)
				_local operand << _self.browser_op_for_predicate(i_pred)
				_if operand _isnt _unset
				_then
					result.add({field, operand, i_pred.datum})
				_else 
					condition.raise(:warning, :string,
							"Could not handle predicate " + i_pred.write_string )
				_endif 
			_endif 
		_endloop
	_endif 
	_return result
_endmethod
$

_pragma(classify_level=restricted)
_private _method query_predicate_component.browser_op_for_predicate(predicate)
	##
	## Do a reverse lookup in the physical_operators and the
	## operators to find out what browser operator could have
	## created predicate.
	#
	_local (creation_method, neg?) << predicate.rwan_creation_method
	
	_local field << .collection.field(predicate.field)
	_local ops << _self.physical_operators_for(field)
	_for i_browser_op _over ops.fast_elements()
	_loop 
		_local v << _self.operators[i_browser_op]
		
		_if v[1] = creation_method _andif
		    v[4] = neg?.not
		_then
			operand << i_browser_op
			_leave
		_endif
	_endloop
	_return operand
_endmethod
$
