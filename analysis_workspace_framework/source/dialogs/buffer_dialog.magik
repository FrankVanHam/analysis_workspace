#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:buffer_dialog)
$

_pragma(classify_level=basic, topic={analysis})
## Dialog that creates a buffer around the base collection. The
## collection can either be a record_collection or a geometry
## collection. 
def_slotted_exemplar(:buffer_dialog,
	{
		{:distance,     _unset},
		{:corner_style, _unset},
		{:end_style,    _unset}
	},
	:base_dialog)
$

_pragma(classify_level=basic, topic={analysis})
message_handler.new(:buffer_dialog).add_uses(:model, :base_dialog)
$

_pragma(classify_level=restricted, topic={analysis})
_method buffer_dialog.set_source_holder(workspace, source_holder)
	.workspace << workspace
	.source_holder << source_holder
	.distance << length_value.new(10,:m)
	.corner_style << :circular
	.end_style << :circular
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method buffer_dialog.set_holder(workspace,
				 holder, source_holder, source_geom_name,
				 distance, corner_style, end_style)
	.workspace << workspace
	.holder << holder
	.source_holder << source_holder
	.source_geom_name << source_geom_name
	.distance << distance
	.corner_style << corner_style
	.end_style << end_style
	.name << holder.name
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method buffer_dialog.activate_in(container)
	container.top_frame.modality << :primary_modal
	.items << property_list.new()
	_local rc << rowcol.new(container,_unset, 1, _unset, :style, :top_level,
				:row_alignment, :fill,
				:col_alignment, :fill,
				:row_resize_values, {100})
	_self.build_top_label(rc)
	_self.build_buffer_options(rc)
	_self.build_name(rc)
	panel_separator.new(rc, :col_alignment, :fill)
	_self.build_buttons(rc)
	_return rc
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method buffer_dialog.build_buffer_options(container)
	_local rc << rowcol.new(container, _unset, 2, _unset, :style, :nested, :col_alignment, :fill)
	_self.build_source_selection_rc(rc)
		
	sw_label_item.new(rc, _self.message(:distance))
	_local a_manager << unit_value_manager.new(unit_manager.unit(:m))
	.items[:distance] << sw_managed_text_item.new(rc,  
						      :model, _self,
						      :manager, a_manager,
						      :incremental_change_selector, :|distance_changed()|,
						      :col_alignment, :fill)
	
	sw_label_item.new(rc, _self.message(:corner_style))
	_local act << sw_action.new(:corner_style,
				    :dialog_control, :image_choice_item,
				    :change_selector, :|corner_style_changed()|,
				    :items, _self.corner_style_items)
	.items[:corner_style] << act.place_control_on(rc, :dialog, :col_alignment, :left)
	
	sw_label_item.new(rc, _self.message(:end_style))
	act << sw_action.new(:corner_style,
			     :dialog_control, :image_choice_item,
			     :change_selector, :|end_style_changed()|,
			     :items, _self.end_style_items)
	.items[:end_style] << act.place_control_on(rc, :dialog, :col_alignment, :left)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method buffer_dialog.build_buttons(container)
	_local rc << rowcol.new(container, 1, _unset, _unset, :style, :button_box,
				:row_alignment, :fill,
				:col_alignment, :right)
	.items[:ok]     << sw_button_item.new_safe(rc, _self.message(:ok), _self, :|ok()|,
						:row_alignment, :bottom,
						:min_width, 75)
	.items[:cancel] << sw_button_item.new_safe(rc, _self.message(:cancel), _self, :|cancel()|,
						:row_alignment, :bottom,
						:min_width, 75)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method buffer_dialog.on_activation()
	_self.initialise_source_geometry_choice()
	_self.initialise_settings()
	_self.initialise_name()
	_return _super.on_activation()
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method buffer_dialog.initialise_settings()
	.items[:corner_style].value << .corner_style
	.items[:end_style].value << .end_style
	.items[:distance].value << .distance
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method buffer_dialog.distance_changed(value)
	.distance << value 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method buffer_dialog.end_style_changed(value)
	.end_style << value 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method buffer_dialog.corner_style_changed(value)
	.corner_style << value 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method buffer_dialog.construct_holder()
	_local col << .holder.collection.buffer(.source_geom_name, .distance, .corner_style, .end_style)
	_return .parent_model.new_holder(col, .name)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method buffer_dialog.corner_style_items
	_local styles << {:circular, :bevelled, :square, :acute}
	_local items << rope.new()
	_for i_style _over styles.fast_elements()
	_loop
		_local img << smallworld_product.get_raster_image(:corner_style_+i_style,
								  _self.module_name)
		items.add( {i_style, img})
	_endloop
	_return items
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method buffer_dialog.end_style_items
	_local styles << {:circular, :square, :truncate}
	_local items << rope.new()
	_for i_style _over styles.fast_elements()
	_loop
		_local img << smallworld_product.get_raster_image(:end_style_+i_style,
								  _self.module_name)
		items.add({i_style, img})
	_endloop
	_return items
_endmethod
$


_pragma(classify_level=restricted, topic={analysis})
_method buffer_dialog.manage_actions()
	_local has_name? << .name.default("") <> ""
	.items[:ok].enabled? << .readonly?.not _andif has_name? _andif .source_geom_name _isnt _unset
	.items[:source_geometry_choice] .enabled? << .readonly?.not
	.items[:name].enabled? << .readonly?.not
	.items[:distance].enabled? << .readonly?.not
	.items[:end_style].enabled? << .readonly?.not
	.items[:corner_style].enabled? << .readonly?.not
_endmethod
$

