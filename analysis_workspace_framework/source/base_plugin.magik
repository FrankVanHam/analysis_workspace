#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:base_plugin)
$

_pragma(classify_level=advanced, topic={analysis})
## Base plugin for all plugins in the analysis workspace frameworkd.
def_slotted_exemplar(:base_plugin,
	{
		{:workspace_holder, _unset},
		{:selection,        _unset}
	}, :plugin)
$

base_plugin.def_property(:runner_plugin_name, :type, :symbol)
$

_pragma(classify_level=restricted)
base_plugin.define_shared_constant( :databus_consumer_data_types,
	{ :workspace_holder, :selection },
	:public )
$

_pragma(classify_level=restricted)
base_plugin.define_shared_constant( :databus_producer_data_types,
	{ :workspace_holder, :selection },
	:public )
$

_pragma(classify_level=restricted, topic={analysis}, usage={subclass})
base_plugin.define_shared_constant( :dialog_exemplar_name,
	_unset,
	:public )
$

_pragma(classify_level=restricted, topic={analysis})
_private _method base_plugin.init(_gather a)
	 _super.init(_scatter a)
	.selection << rope.new()
	 _local dialog << _self.dialog_exemplar.new(_self)
	_self.cache_dialog(:dialog, dialog)
	 _return _self
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method base_plugin.dialog_exemplar
	_return package(:rwan)[_self.dialog_exemplar_name]
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method base_plugin.dialog
	_return _self.get_dialog(:dialog)
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_private _method base_plugin.selection
	_return .selection
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method base_plugin.workspace_holder
	_return .workspace_holder
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method base_plugin.current_workspace
	_if .workspace_holder _isnt _unset
	_then 
		_return .workspace_holder.current_workspace
	_else
		_return _unset
	_endif 
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method base_plugin.selected_holders
	_return .selection
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method base_plugin.selected_top_holders
	_local cur << _self.current_workspace
	_if cur _isnt _unset
	_then 
		_return cur.top_holders(.selection)
	_else
		_return {}
	_endif 
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method base_plugin.all_holders
	_local cur << _self.current_workspace
	_if cur _isnt _unset
	_then 
		_return cur.all_holders
	_else
		_return {}
	_endif 
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method base_plugin.top_holders
	_local cur << _self.current_workspace
	_if cur _isnt _unset
	_then 
		_return cur.top_holders
	_else
		_return {}
	_endif 
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method base_plugin.app_plugin
	_return .framework.app_plugin
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method base_plugin.ace
	_return _self.app_plugin.ace
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method base_plugin.open?
	_if .workspace_holder _is _unset
	_then
		_return _false
	_else 
		_return _not .workspace_holder.empty?
	_endif 
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method base_plugin.build_gui(container)
	_self.dialog.build_embedded_gui(container)
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method base_plugin.post_activation()
	## It is guaranteed that all GUI components will be realised.
	show(:assign, _self.framework, _self.framework.top_frame)
	_self.dialog.assign_top_frame(_self.framework.top_frame)
	_self.manage_actions()
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method base_plugin.publish_workspace_holder(_optional holder)
	_self.databus_make_data_available(:workspace_holder, holder.default(.workspace_holder))
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method base_plugin.publish_selection(_optional selection)
	_self.databus_make_data_available(:selection, selection.default(.selection))
_endmethod
$


_pragma(classify_level=advanced, topic={analysis})
_method base_plugin.manage_actions()
	_self.dialog.manage_actions()
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method base_plugin.sw_databus_data_available(data_type_name, data, sender)
#	_if _self _is sender
#	_then
#		_return
#	_endif

	_if data_type_name _is :selection
	_then
		_self.note_selection_change(data)
	_elif data_type_name _is :workspace_holder
	_then
		_self.note_workspace_holder_change(data)
	_endif
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_private _method base_plugin.note_selection_change(selection)
	.selection << selection
	_self.dialog.note_selection_change()
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_private _method base_plugin.note_workspace_holder_change(workspace_holder)
	_local renew? << .workspace_holder _isnt workspace_holder
	.workspace_holder << workspace_holder

	_local dialog << _self.dialog
	_if dialog _isnt _unset
	_then 
		dialog.note_workspace_holder_change(renew?)
	_endif 
_endmethod
$
