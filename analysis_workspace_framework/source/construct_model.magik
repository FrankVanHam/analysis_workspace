#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:construct_model)
$

_pragma(classify_level=advanced, topic={analysis})
## Dialog that will add and create analysis collections.
def_slotted_exemplar(:construct_model,
	{},
	:base_model)
$

message_handler.new(:construct_model).add_uses(:base_model)
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.owner
	_return .owner	
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.run_in_background(meth, descr)
	.owner.run_in_background(_self, meth, {}, descr)
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.update_holder(old_holder, new_holder)
	_self.workspace.set_dirty()
	_self.workspace.update_holder(old_holder, new_holder)
	.owner.publish_workspace()
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.add_holder(holder)
	_self.add_holders({holder})
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.add_holders(holders)
	_local workspace << _self.workspace
	workspace.add_holders(holders)
	.owner.publish_workspace()
	#.owner.publish_selection({holders.last})
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.new_holder(col, _optional a_msg)
	_local clr << colour.called(:red)
	_local msg << _if a_msg _isnt _unset
		      _then >> a_msg
		      _else >> _self.name_for_collection(col)
		      _endif 
	>>  collection_holder.new(col,
				  msg,
				  clr)
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.name_for_collection(col)
	_return col.description(_self.workspace)
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.edit()
	_return _self.selected_holder.activate_editor_in(_self)
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.view()
	_local editor << _self.edit()
	editor.set_readonly()
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.delete()
	## delete the collections, but only the top level collections
	## to avoid creating inconsistencies.
	_local workspace << _self.workspace
	_local to_del << _self.selected_top_holders.copy()	
	_if to_del.empty? _then _return _endif

	_local ok? << _self.can_delete?(to_del)
	_if _not ok? _then _return _endif 
	
	_for i_holder _over to_del.fast_elements()
	_loop
		workspace.remove_holder(i_holder)
		i_holder.discard()
	_endloop
	.owner.publish_workspace()
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_private _method construct_model.can_delete?(to_del)
	_return _self.question_alert( :yes, :no,
				      :sure_to_delete, to_del.size)
_endmethod
$


_pragma(classify_level=advanced, topic={analysis})
_method construct_model.add_collections_from_dialog()
	_local dia << object_control_dialog.new_dialog(_self)
	dia.set_dataset(.owner.dataset, _self.dataset_manager)
	dia.activate_relative_to(_unset, .top_frame, 50, 50 )
	_return dia
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.copy()
	_local cp << _self.selected_holder.copy()
	cp.name << _self.message(:copy_holder, _unset, cp.name)
	cp.collection.dp
	_self.add_holder(cp)
	.owner.publish_workspace()
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.move_up()
	_local workspace << _self.workspace
	_local holders << _self.selected_top_holders
	_for i_holder _over holders.fast_elements()
	_loop
		workspace.move_up(i_holder)
	_endloop
	.owner.publish_workspace()
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.can_move_up?
	_local workspace << _self.workspace
	_local holders << _self.selected_top_holders
	_for i_holder _over holders.fast_elements()
	_loop
		_if workspace.can_move_up?(i_holder)
		_then
			_return _true
		_endif
	_endloop
	_return _false
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.move_down()
	_local workspace << _self.workspace
	_local holders << _self.selected_top_holders
	_for i_holder _over holders.fast_elements()
	_loop
		workspace.move_down(i_holder)
	_endloop
	.owner.publish_workspace()
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.can_move_down?
	_local workspace << _self.workspace
	_local holders << _self.selected_top_holders
	_for i_holder _over holders.fast_elements()
	_loop
		_if workspace.can_move_down?(i_holder)
		_then
			_return _true
		_endif
	_endloop
	_return _false
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.add_trail()
	_local dsm << _self.dataset_manager
	_local pseudo << _self.trail
	col << rwan:geometry_collection.new(dsm, geometry_set.new_with(pseudo))
	_if pseudo.geom_category _is :area
	_then
		msg << _self.message(:closed_trail_col_name)
	_else
		msg << _self.message(:trail_col_name)
	_endif
	_self.add_holder(_self.new_holder(col, msg))
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.add_geom_selection()
	_local sel << .owner.map_selection
	_local sel_by_type << hash_table.new()
	_for i_geom _over sel.fast_elements()
	_loop
		_local rwo << i_geom.rwo
		_if rwo _isnt _unset
		_then 
			sel_by_type.at_or_new_if_absent(rwo.source.name, rwo_set).add(rwo)
		_endif 
	_endloop
	_local holders << rope.new()
	_local dsm << _self.dataset_manager
	_for type, set _over sel_by_type.fast_keys_and_elements()
	_loop
		col << rwan:record_set_collection.new(dsm, set)
		msg << _self.message(:record_selection, _unset, set.size, set.an_element().external_name)
		holders.add(_self.new_holder(col, msg))
	_endloop
	_self.add_holders(holders)
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_private _method construct_model.union_areas(areas)
	_local un
	_local world
	_for i_area _over areas.fast_elements()
	_loop
		_if un _is _unset
		_then
			un << pseudo_area.new_for_world(i_area, i_area.world)
		_else
			w << un.world
			un << _self.safe_union(un, i_area)
			un.world << w
		_endif
	_endloop
	_return un
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_private _method construct_model.safe_union(un, an_area)
	_try
		_handling error _with _proc(c)
					      c.report_contents_on(!output!)
					      !traceback!(!output!)
		_endproc

		new_un << un.union(an_area)

	_when polygon_acp_invalid_area
		new_un << un
	_endtry
	_return new_un
_endmethod
$


_pragma(classify_level=advanced, topic={analysis})
_method construct_model.add_collection_selection()
	_self.run_in_background(:|do_add_collection_selection()|, _self.message(:adding_selection_from_explorer))
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.do_add_collection_selection()
	_local dsm << _self.dataset_manager
	_local sel << .owner.map_selection
	_local cols << set.new()
	_for i_geom _over sel.fast_elements()
	_loop
		_local rwo << i_geom.rwo
		_if rwo _is _unset _then _continue _endif
		cols.add(rwo.source_collection)
	_endloop
	_local holders << rope.new()
	_for i_col _over cols.fast_elements()
	_loop
		_local col << rwan:sw_collection.new(dsm, i_col)
		holders.add(_self.new_holder(col, i_col.external_name.copy()))
	_endloop
	_self.add_holders(holders)
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.add_explorer_content()
	_self.run_in_background(:|do_add_explorer_content()|, _self.message(:adding_from_explorer))
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.do_add_explorer_content()
	# Add the explorer content, derived from the explorer
	# selection.
	#
	_local dsm << _self.dataset_manager
	_local data << .owner.explorer_selection
	_if data _is _unset
	_then
		_self.user_error(:sorry_no_explorer)
	_endif
	_local (plug, sel) << (_scatter data)
	_local holders << rope.new()
	_for i_elem _over  sel.explorer_elements()
	_loop
		_for i_set _over i_elem.rwo_sets()
		_loop
			_if i_set.is_kind_of?(ds_collection)
			_then
				col << rwan:sw_collection.new(dsm, i_set)
			_else
				col << rwan:record_set.new(dsm, i_set)
			_endif
			_local ex_name << i_set.an_element().external_name
			holders.add(_self.new_holder(col, _self.message(:explorer_content, _unset, ex_name)))
		_endloop 
	_endloop
	_self.add_holders(holders)
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.add_explorer_selection()
	_local dsm << _self.dataset_manager
	_local data << .owner.explorer_selection
	_if data _is _unset
	_then
		_self.user_error(:sorry_no_explorer)
	_endif
	_local (plug, sel) << (_scatter data)
	_local holders << rope.new()
	_if sel.is_records?
	_then
		set << rwo_set.new_from_iter(sel, :|records()|)
		col << rwan:record_set_collection.new(dsm, set)
		_local ex_name << set.an_element().external_name
		holders.add(_self.new_holder(col, _self.message(:explorer_selection, _unset, ex_name)))
	_else
		_self.user_error(:please_select_records_in_explorer)
	_endif
	_self.add_holders(holders)
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.add_scrapbook()
	_local sel << .owner.scrapbook_results
	_if sel _is _unset
	_then
		_self.user_error(:scrapbook_is_empty)
	_else
		_self.run_in_background(:|do_add_scrapbook()|, _self.message(:adding_from_scrapbook))
	_endif
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.do_add_scrapbook()
	_local dsm << _self.dataset_manager
	_local sel << .owner.scrapbook_results
	_local sel_by_table_name << hash_table.new()

	_local holders << rope.new()
	_for i_rec_set _over sel.fast_elements()
	_loop
		_for i_rec _over i_rec_set.fast_elements()
		_loop
			sel_by_table_name.at_or_new_if_absent(
				i_rec.source_collection.name,
				rope).add(i_rec)
		_endloop
		_for set _over sel_by_table_name.fast_elements()
		_loop
			_local col << rwan:record_set.new(dsm, set)
			holders.add(_self.new_holder(col))
		_endloop
	_endloop
	_self.add_holders(holders)
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.trail
	_local geom << .owner.map_trail.as_pseudo_geometry
	_if geom _is _unset
	_then
		_self.user_error(:provide_trail)
	_endif
	geom.style_info << _unset
	_return geom
_endmethod
$
##################################

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.create_intersection()
	_local dia << area_binary_op_dialog.new_dialog(_self)
	dia.set_source_holder(_self.workspace, _self.selected_top_holder, :intersection)
	dia.activate()
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.create_union()
	_local dia << area_binary_op_dialog.new_dialog(_self)
	dia.set_source_holder(_self.workspace, _self.selected_top_holder, :union)
	dia.activate()
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.create_xor()
	_local dia << area_binary_op_dialog.new_dialog(_self)
	dia.set_source_holder(_self.workspace, _self.selected_top_holder, :xor)
	dia.activate()
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.create_subtraction()
	_local dia << area_binary_op_dialog.new_dialog(_self)
	dia.set_source_holder(_self.workspace, _self.selected_top_holder, :subtraction)
	dia.activate()
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.edit_area_binary_op_dialog(holder, source_col,
						   operation, filter_col)
	_local source_holder << _self.workspace.holder_for(source_col)
	_local filter_holder << _self.workspace.holder_for(filter_col)
	_local dia << area_binary_op_dialog.new_dialog(_self)
	dia.set_holder(_self.workspace,
		       holder, source_holder,
		       operation, filter_holder)
	dia.activate()
	_return dia
_endmethod
$

###############################

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.create_col_intersection()
	_local dia << binary_op_dialog.new_dialog(_self)
	dia.set_source_holder(_self.workspace, _self.selected_top_holder, :intersection)
	dia.activate()
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.create_col_union()
	_local dia << binary_op_dialog.new_dialog(_self)
	dia.set_source_holder(_self.workspace, _self.selected_top_holder, :union)
	dia.activate()
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.create_col_xor()
	_local dia << binary_op_dialog.new_dialog(_self)
	dia.set_source_holder(_self.workspace, _self.selected_top_holder, :xor)
	dia.activate()
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.create_col_subtraction()
	_local dia << binary_op_dialog.new_dialog(_self)
	dia.set_source_holder(_self.workspace, _self.selected_top_holder, :subtraction)
	dia.activate()
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.edit_binary_op_dialog(holder, source_col,
					      operation, filter_col)
	_local source_holder << _self.workspace.holder_for(source_col)
	_local filter_holder << _self.workspace.holder_for(filter_col)
	_local dia << binary_op_dialog.new_dialog(_self)
	dia.set_holder(_self.workspace,
		       holder, source_holder,
		       operation, filter_holder)
	dia.activate()
	_return dia
_endmethod
$

###############################


_pragma(classify_level=advanced, topic={analysis})
_method construct_model.materialize_spatial()
	_local holder << _self.selected_top_holder
	_local dia << materialize_geometry_dialog.new_dialog(_self)
	dia.set_source_holder(_self.workspace, holder)
	dia.activate()
	_return dia
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.materialize()
	_local holder << _self.selected_top_holder
	_local dia << record_materialize_dialog.new_dialog(_self)
	dia.set_source_holder(_self.workspace, holder)
	dia.activate()
	_return dia
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.create_spatial_collection()
	_local holder << _self.selected_top_holder
	_local dia << spatial_dialog.new_dialog(_self)
	dia.set_holder(holder, _self.dataset_manager)
	dia.activate()
	_return dia
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.create_buffer_dialog()
	_local holder << _self.selected_top_holder
	_local dia << buffer_dialog.new_dialog(_self)
	dia.set_source_holder(_self.workspace, holder)
	dia.activate()
	_return dia
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.edit_buffer_dialog(holder, source_col, source_geom_name,
					   distance, corner_style, end_style)
	_local source_holder << _self.workspace.holder_for(source_col)
	
	_local dia << buffer_dialog.new_dialog(_self)
	dia.set_holder(_self.workspace,
		       holder, source_holder, source_geom_name,
		       distance, corner_style, end_style)
	dia.activate()
	_return dia
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.create_follow_topology_dialog()
	_local dia << topology_dialog.new_dialog(_self)
	dia.set_source_holder(_self.workspace, _self.selected_holder)
	dia.activate()
	_return dia
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.edit_follow_topology_dialog(holder, source_col, source_geom_name, target_col)
	_local source_holder << _self.workspace.holder_for(source_col)
	
	_local dia << topology_dialog.new_dialog(_self)
	dia.set_holder(_self.workspace,
		       holder, source_holder, source_geom_name,
		       target_col)
	dia.activate()
	_return dia
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.create_follow_trace_dialog()
	_local dia << trace_dialog.new_dialog(_self)
	dia.set_source_holder(_self.workspace, _self.selected_holder)
	dia.activate()
	_return dia
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.edit_follow_trace_dialog(holder, source_col, source_geom_name, stop_predicates, max_length, target_col)
	_local source_holder << _self.workspace.holder_for(source_col)
	_local dia << trace_dialog.new_dialog(_self)
	dia.set_holder(_self.workspace,
		       holder, source_holder, source_geom_name,
		       stop_predicates, max_length, target_col)
	dia.activate()
	_return dia
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.create_follow_root_dialog()
	_local dia << follow_root_dialog.new_dialog(_self)
	dia.set_source_holder(_self.workspace, _self.selected_holder)
	dia.activate()
	_return dia
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.edit_follow_root_dialog(holder, source_col, target_col)
	_local source_holder << _self.workspace.holder_for(source_col)
	_local dia << follow_root_dialog.new_dialog(_self)
	dia.set_holder(_self.workspace,
		       holder, source_holder, target_col)
	dia.activate()
	_return dia
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.create_follow_join_dialog()
	_local dia << follow_join_dialog.new_dialog(_self)
	dia.set_source_holder(_self.workspace, _self.selected_holder)
	dia.activate()
	_return dia
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.edit_follow_join_dialog(holder, source_col, join_field_name)
	_local source_holder << _self.workspace.holder_for(source_col)
	_local dia << join_dialog.new_dialog(_self)
	dia.set_holder(_self.workspace,
		       holder, source_holder, join_field_name)
	dia.activate()
	_return dia
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.create_follow_method_dialog()
	_local dia << follow_method_dialog.new_dialog(_self)
	dia.set_source_holder(_self.workspace, _self.selected_holder)
	dia.activate()
	_return dia
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.edit_follow_method_dialog(holder,
						   source_col, methd)
	
	_local source_holder << _self.workspace.holder_for(source_col)
	_local dia << follow_method_dialog.new_dialog(_self)
	dia.set_holder(_self.workspace,
		       holder, source_holder, methd)
	dia.activate()
	_return dia
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.create_spatial_filter_dialog()
	_local dia << spatial_filter_dialog.new_dialog(_self)
	dia.set_source_holder(_self.workspace, _self.selected_holder)
	dia.activate()
	_return dia
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.edit_spatial_filter_dialog(holder, source_col, source_geom_name,
						    operator,
						    filter_col, filter_geom_name)
	_local source_holder << _self.workspace.holder_for(source_col)
	_local filter_holder << _self.workspace.holder_for(filter_col)
	
	_local dia << spatial_filter_dialog.new_dialog(_self)
	dia.set_holder(_self.workspace,
		       holder, source_holder, source_geom_name,
		       operator, filter_holder, filter_geom_name)
	dia.activate()
	_return dia
_endmethod
$


_pragma(classify_level=advanced, topic={analysis})
_method construct_model.create_distance_filter_dialog()
	_local dia << distance_filter_dialog.new_dialog(_self)
	dia.set_source_holder(_self.workspace, _self.selected_holder)
	dia.activate()
	_return dia
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.edit_distance_filter_dialog(holder, source_col, source_geom_name,
						    distance, inverse?,
						    filter_col, filter_geom_name)
	_local source_holder << _self.workspace.holder_for(source_col)
	_local filter_holder << _self.workspace.holder_for(filter_col)
	
	_local dia << distance_filter_dialog.new_dialog(_self)
	dia.set_holder(_self.workspace,
		       holder, source_holder, source_geom_name,
		       distance, inverse?, filter_holder, filter_geom_name)
	dia.activate()
	_return dia
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.create_predicate_filter_dialog()
	_local dia << predicate_filter_dialog.new_dialog(_self)
	dia.set_source_holder(_self.workspace, _self.selected_holder)
	dia.activate()
	_return dia
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.edit_predicate_filter_dialog(holder, base_col, predicate)
	_local record_holder << _self.workspace.holder_for(base_col)
	_return _self.do_create_predicate_filter_dialog(holder, record_holder, predicate)
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_private _method construct_model.do_create_predicate_filter_dialog(holder, record_holder, _optional predicate)
	_local dia << predicate_filter_dialog.new_dialog(_self)
	dia.set_holder(_self.workspace, holder, record_holder, predicate)
	dia.activate()
	_return dia
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_private _method construct_model.dataset_manager
	_return .owner.dataset_manager
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.ace_control
	_return .owner.ace_control
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.ace
	_return .owner.ace
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.note_workspace_change(renew?)
	_self.manage_actions()
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.note_selection_change()
	_self.manage_actions()
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.note_map_selection_change(data)
	_self.manage_actions()
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.note_map_record_selection_change(data)
	_local (pl, rset) << (_scatter data)
	
	_if pl.is_kind_of?(explorer_plugin)
	_then
		_self.manage_actions()
	_endif 
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.note_map_trail_change(data)
	_self.manage_actions()
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_private _method construct_model.has_trail?
	>> _self.owner.map_trail.empty?.not
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_private _method construct_model.has_map_selection?
	>> _self.owner.map_selection.empty?.not 
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_private _method construct_model.has_explorer_selection?
	_local data << .owner.explorer_selection
	
	_if data _is _unset _then _return _false _endif
	
	_local (plug, sel) << (_scatter data)
	
	>> sel.is_records?
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_model.manage_actions()
	_local holders << _self.selected_top_holders
	_local holder << _if holders.size = 1
			 _then >> holders.an_element()
			 _else >> _unset
			 _endif 
	_local any_sel? << _self.selected_holders.empty?.not
	_local any_top_sel? << holder _isnt _unset
	_local record? << holder _isnt _unset _andif holder.is_record_collection?
	_local geom?   << holder _isnt _unset _andif holder.is_record_collection?.not
	_local open? << _self.open?
	.owner.action(:add_collections).enabled? << open?
	.owner.action(:add_trail).enabled? << open? _andif _self.has_trail?
	.owner.action(:add_geom_selection).enabled? << open? _andif _self.has_map_selection?
	.owner.action(:add_collection_selection).enabled? << open? _andif _self.has_map_selection?
	.owner.action(:add_explorer_content).enabled? << open?
	.owner.action(:add_explorer_selection).enabled? << open? _andif _self.has_explorer_selection?
	.owner.action(:add_scrapbook).enabled? << open?
	.owner.action(:spatial_filter).enabled? << open? _andif any_top_sel?
	.owner.action(:distance_filter).enabled? << open? _andif any_top_sel?
	.owner.action(:predicate_filter).enabled? << open? _andif any_top_sel? _andif record?

	.owner.action(:follow_topology).enabled? << open? _andif record?
	.owner.action(:follow_trace).enabled? << open? _andif record?
	.owner.action(:follow_join).enabled? << open? _andif record?
	.owner.action(:follow_method).enabled? << open? _andif record?
	.owner.action(:follow_root).enabled? << open? _andif record?

	.owner.action(:create_spatial).enabled? << open?
	.owner.action(:create_buffer).enabled? << open? _andif any_top_sel?

	.owner.action(:intersection).enabled? << open? _andif any_top_sel?
	.owner.action(:subtraction).enabled? << open? _andif any_top_sel?
	.owner.action(:union).enabled? << open? _andif any_top_sel?
	.owner.action(:xor).enabled? << open? _andif any_top_sel?

	.owner.action(:col_intersection).enabled? << open? _andif any_top_sel?
	.owner.action(:col_subtraction).enabled? << open? _andif any_top_sel?
	.owner.action(:col_union).enabled? << open? _andif any_top_sel?
	.owner.action(:col_xor).enabled? << open? _andif any_top_sel?

	.owner.action(:materialize).enabled? << open? _andif record?
	.owner.action(:materialize_spatial).enabled? << open? _andif geom?

	.owner.action(:edit).enabled? << open? _andif any_top_sel? _andif holder.editable?
	.owner.action(:view).enabled? << open? _andif any_top_sel? _andif holder.editable?
	.owner.action(:delete).enabled? << open? _andif any_top_sel?
	.owner.action(:move_up).enabled? << open?  _andif any_top_sel?   _andif _self.can_move_up?
	.owner.action(:move_down).enabled? << open?  _andif any_top_sel? _andif _self.can_move_down?
	.owner.action(:copy).enabled? << open? _andif any_sel?
_endmethod
$
