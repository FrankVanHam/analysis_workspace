#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:construct_plugin)
$

_pragma(classify_level=restricted, topic={analysis})
##
## Basically the owner of a lot of ations that are available to
## the analysis dialog. The plugin doesnt do that much, mostly
## it passes messages from the dialog to other plugins.
##
def_slotted_exemplar(:construct_plugin,
	{},
	:base_plugin)
$

_pragma(classify_level=restricted, topic={analysis}, usage={subclass})
construct_plugin.def_property(:runner_plugin_name, :type, :symbol)
$

_pragma(classify_level=restricted, topic={analysis}, usage={subclass})
construct_plugin.define_shared_constant( :dialog_exemplar_name,
	:construct_dialog,
	:public )
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_plugin.init_actions()
	_self.add_action(sw_action.new(:add_collections,
				       :engine, _self.dialog,
				       :image, {:add_collections, _self.module_name},
				       :action_message, :|add_collections_from_dialog()|))
	_self.add_action(sw_action.new(:add_shape,
				       :engine, _self.dialog,
				       :image, {:add_shape, _self.module_name},
				       :action_message, :|add_shape_from_dialog()|))
	_self.add_action(sw_action.new(:add_trail,
				       :engine, _self.dialog,
				       :image, {:add_trail, _self.module_name},
				       :action_message, :|add_trail()|))
	_self.add_action(sw_action.new(:add_geom_selection,
				       :engine, _self.dialog,
				       :image, {:add_geom_selection, _self.module_name},
				       :action_message, :|add_geom_selection()|))
	_self.add_action(sw_action.new(:add_collection_selection,
				       :engine, _self.dialog,
				       :image, {:add_col_selection, _self.module_name},
				       :action_message, :|add_collection_selection()|))
	_self.add_action(sw_action.new(:add_explorer_content,
				       :engine, _self.dialog,
				       :image, {:add_explorer, _self.module_name},
				       :action_message, :|add_explorer_content()|))
	_self.add_action(sw_action.new(:add_explorer_selection,
				       :engine, _self.dialog,
				       :image, {:add_explorer_selection, _self.module_name},
				       :action_message, :|add_explorer_selection()|))
	_self.add_action(sw_action.new(:add_scrapbook,
				       :engine, _self.dialog,
				       :image, {:add_scrapbook, _self.module_name},
				       :action_message, :|add_scrapbook()|))
	_self.add_action(sw_action.new(:spatial_filter,
				       :engine, _self.dialog,
				       :image, {:filter_spatial, _self.module_name},
				       :action_message, :|create_spatial_filter_dialog()|))
	_self.add_action(sw_action.new(:distance_filter,
				       :engine, _self.dialog,
				       :image, {:filter_distance, _self.module_name},
				       :action_message, :|create_distance_filter_dialog()|))
	_self.add_action(sw_action.new(:predicate_filter,
				       :engine, _self.dialog,
				       :image, {:filter_predicate, _self.module_name},
				       :action_message, :|create_predicate_filter_dialog()|))
	_self.add_action(sw_action.new(:intersection,
				       :engine, _self.dialog,
				       :image, {:binary_op_intersection, _self.module_name},
				       :action_message, :|create_intersection()|))
	_self.add_action(sw_action.new(:subtraction,
				       :engine, _self.dialog,
				       :image, {:binary_op_subtraction, _self.module_name},
				       :action_message, :|create_subtraction()|))
	_self.add_action(sw_action.new(:union,
				       :engine, _self.dialog,
				       :image, {:binary_op_union, _self.module_name},
				       :action_message, :|create_union()|))
	_self.add_action(sw_action.new(:xor,
				       :engine, _self.dialog,
				       :image, {:binary_op_xor, _self.module_name},
				       :action_message, :|create_xor()|))
	_self.add_action(sw_action.new(:follow_topology,
				       :engine, _self.dialog,
				       :image, {:follow_topology, _self.module_name},
				       :action_message, :|create_follow_topology_dialog()|))
	_self.add_action(sw_action.new(:follow_trace,
				       :engine, _self.dialog,
				       :image, {:follow_trace, _self.module_name},
				       :action_message, :|create_follow_trace_dialog()|))
	_self.add_action(sw_action.new(:follow_join,
				       :engine, _self.dialog,
				       :image, {:follow_relation, _self.module_name},
				       :action_message, :|create_follow_join_dialog()|))
	_self.add_action(sw_action.new(:follow_method,
				       :engine, _self.dialog,
				       :image, {:filter_method, _self.module_name},
				       :action_message, :|create_follow_method_dialog()|))
	_self.add_action(sw_action.new(:follow_root,
				       :engine, _self.dialog,
				       :image, {:follow_root, _self.module_name},
				       :action_message, :|create_follow_root_dialog()|))
	_self.add_action(sw_action.new(:create_spatial,
				       :engine, _self.dialog,
				       :image, {:new_spatial, _self.module_name},
				       :action_message, :|create_spatial_collection()|))
	_self.add_action(sw_action.new(:create_buffer,
				       :engine, _self.dialog,
				       :image, {:buffer, _self.module_name},
				       :action_message, :|create_buffer()|))
	
	_self.add_action(sw_action.new(:view_by_join,
				       :engine, _self.dialog,
				       :image, {:view_collection, _self.module_name},
				       :action_message, :|create_join_view()|))
	_self.add_action(sw_action.new(:view_by_eq,
				       :engine, _self.dialog,
				       :image, {:view_eq_collection, _self.module_name},
				       :action_message, :|create_eq_view()|))
	_self.add_action(sw_action.new(:materialize,
				       :engine, _self.dialog,
				       :image, {:materialize, _self.module_name},
				       :action_message, :|materialize()|))
	_self.add_action(sw_action.new(:materialize_spatial,
				       :engine, _self.dialog,
				       :image, {:materialize_spatial, _self.module_name},
				       :action_message, :|materialize_spatial()|))
	
	_self.add_action(sw_action.new(:edit,
				       :engine, _self.dialog,
				       :action_message, :|edit()|,
				       :image, {:edit_object, :ui_resources}))
	_self.add_action(sw_action.new(:delete,
				       :engine, _self.dialog,
				       :action_message, :|delete()|,
				       :image, {:delete, :ui_resources}))
	_self.add_action(sw_action.new(:move_up,
				       :engine, _self.dialog,
				       :action_message, :|move_up()|,
				       :image, {:move_up, _self.module_name}))
	_self.add_action(sw_action.new(:move_down,
				       :engine, _self.dialog,
				       :action_message, :|move_down()|,
				       :image, {:move_down, _self.module_name}))
	_self.add_action(sw_action.new(:copy,
				       :engine, _self.dialog,
				       :action_message, :|copy()|,
				       :image, {:copy, :ui_resources}))
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_plugin.map_trail
	_return _self.app_plugin.map_trail
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_plugin.map_selection 
	_return _self.app_plugin.map_selection 
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_plugin.explorer_selection
	_return _self.app_plugin.explorer_selection
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_plugin.explorer_content
	_return _self.app_plugin.explorer_content
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_plugin.scrapbook_results
	_return _self.app_plugin.scrapbook_results
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_plugin.ace_control
	_return _self.app_plugin.ace_control	
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_plugin.dataset_manager
	_return .workspace.dsm
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_plugin.dataset
	_return _self.dataset_manager.actual_dataset
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method construct_plugin.runner_plugin
	_return _self.framework.plugin(_self.runner_plugin_name)
_endmethod
$


_pragma(classify_level=advanced, topic={analysis})
_method construct_plugin.run_in_background(who, meth, args, descr)
	_self.runner_plugin.run_in_background(who, meth, args, descr)
_endmethod
$

