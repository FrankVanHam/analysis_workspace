_package rwan
$

#remex(:workspace_dialog)

_pragma(classify_level=advanced, topic={analysis})
##
## Helper object that wraps the creation and handling of the
## workspace dropdown and buttons.
##
## Uses the owner to get the workspace. uses the changed()
## protocol to inform the owner of changes in me.
##
def_slotted_exemplar(:workspace_dialog, 
	{
	}, :base_model)
$

message_handler.new(:workspace_dialog).add_uses(:base_model)
$

_pragma(classify_level=advanced, topic={analysis})
_method workspace_dialog.activate_in(container)
	_local rc << rowcol.new(container, 1, _unset, _unset, :style, :nested, :left_spacing, 7, :resize?, _true )
	.items[:workspace_choice] << text_choice_item.new(rc, _self.message(:workspace),
							  :model, _self,
							  :items, {},
							  :change_selector, :|workspace_chosen()|)
	tb << _self.new_toolbar(rc)
	.items[:edit_workspace] << image_button_item.new_safe(tb, _self.edit_image, _self, :|edit_workspace()|,
							     :insensitive_image, _self.grey_edit_image)
	.items[:add_workspace] << image_button_item.new_safe(tb, _self.add_image, _self, :|add_workspace()|,
							     :insensitive_image, _self.grey_add_image)
	.items[:delete_workspace] <<image_button_item.new_safe(tb, _self.remove_image, _self, :|delete_workspace()|,
							       :insensitive_image, _self.grey_remove_image)

	.top_frame << container.top_frame
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method workspace_dialog.workspace_chosen(ws)
	_self.workspace_holder.pick_workspace(ws)
	.owner.publish_workspace_holder(_self.workspace_holder)
	_self.update_gui()
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method workspace_dialog.workspace_items
	_return _self.workspace_holder.gui_items
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method workspace_dialog.current_workspace_name
	_return _self.workspace_holder.current_workspace_name
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method workspace_dialog.edit_workspace()
	prompter.open_dialog(.owner, _self, _self.message(:give_workspace_a_new_name),
				      _self.current_workspace_name,
				      {:|perform_safely()|, :|do_edit_workspace()|}, _unset)
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method workspace_dialog.do_edit_workspace(name_string)
	_local name << name_string.as_symbol()
	_if _self.workspace_holder.has_workspace?(name)
	_then
		condition.raise(:user_error, :string, _self.message(:workspace_exists, _unset, name_string))
	_endif

	_self.workspace_holder.rename_workspace(name)
	.owner.publish_workspace_holder(_self.workspace_holder)
_endmethod
$


_pragma(classify_level=advanced, topic={analysis})
_method workspace_dialog.add_workspace()
	prompter.open_dialog(.owner, _self, _self.message(:give_workspace_name),
				      _self.message(:initial_workspace_name),
				      {:|perform_safely()|, :|do_add_workspace()|}, _unset)
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method workspace_dialog.do_add_workspace(name_string)
	_local name << name_string.as_symbol()
	_if _self.workspace_holder.has_workspace?(name)
	_then
		condition.raise(:user_error, :string, _self.message(:workspace_exists, _unset, name_string))
	_endif
	
	_self.workspace_holder.create_workspace(name)
	.owner.publish_workspace_holder(_self.workspace_holder)
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method workspace_dialog.delete_workspace()	
	_local v << .items[:workspace_choice].value
	_local yes? << _self.question_alert(:yes, :no,
					    :sure_to_delete_workspace,  v)
	_if yes?
	_then
		_self.do_delete_workspace(v)
	_endif 
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_private _method workspace_dialog.do_delete_workspace(v)
	_self.workspace_holder.delete_workspace(v)
	.owner.publish_workspace_holder(_self.workspace_holder)
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method workspace_dialog.manage_actions()
	_local open? << _self.open?
	.items[:workspace_choice].enabled? << open?
	.items[:add_workspace].enabled? << open?
	.items[:delete_workspace].enabled? << open? _andif _self.workspace_holder.nr_of_workspaces > 1
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method workspace_dialog.note_workspace_holder_change(renew?)
	_self.update_gui()
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method workspace_dialog.update_gui()
	.items[:workspace_choice].items << _self.workspace_items
	.items[:workspace_choice].value << _self.current_workspace_name
	_self.manage_actions()
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_private _method workspace_dialog.edit_image
	_return smallworld_product.get_raster_image(:edit, :ui_resources)
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_private _method workspace_dialog.grey_edit_image
	_return smallworld_product.get_raster_image(:edit_grey, :ui_resources)
_endmethod
$
_pragma(classify_level=advanced, topic={analysis})
_private _method workspace_dialog.add_image
	_return smallworld_product.get_raster_image(:add, _self.module_name)
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_private _method workspace_dialog.grey_add_image
	_return smallworld_product.get_raster_image(:add_grey, _self.module_name)
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_private _method workspace_dialog.remove_image
	_return smallworld_product.get_raster_image(:remove, _self.module_name)
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_private _method workspace_dialog.grey_remove_image
	_return smallworld_product.get_raster_image(:remove_grey, _self.module_name)
_endmethod
$
