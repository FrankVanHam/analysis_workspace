#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:export_shape_settings)
$

_pragma(classify_level=restricted, topic={analysis})
##
## Holder for the settings that are required to create a 
## shape file.
## Note that the ID field and geometry field are added seperately.
##
def_slotted_exemplar(:export_shape_settings,
	{
		{:fields,   _unset}
	})
$

_pragma(classify_level=restricted, topic={analysis})
_method export_shape_settings.new()
	_return _clone.init()
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method export_shape_settings.init()
	.fields << rope.new()
	_return _self 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method export_shape_settings.add_field(shape_name, name, type)
	_self.do_add_field(shape_name, name, :alpha, type)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method export_shape_settings.add_geom_field(name, type)
	_self.do_add_field("the_geom", name, :geom, type)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method export_shape_settings.do_add_field(shape_name, name, meta, type)
	_if meta _is _unset _then condition.raise(:error, :string, "Meta is mandatory") _endif 
	.fields.add({shape_name, symbol.check_type(name), meta, type})
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method export_shape_settings.geom_def()
	_local (shape_name, name, meta, type) << _self.meta_def(:geom)
	_return name, type
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method export_shape_settings.meta_def(meta)
	_for i_vec _over .fields.fast_elements()
	_loop
		_if i_vec[3] = meta
		_then
			_return _scatter i_vec
		_endif 
	_endloop
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_iter _method export_shape_settings.alpha_defs()
	_for i_vec _over .fields.fast_elements()
	_loop
		_if i_vec[3] = :alpha
		_then
			_loopbody(_scatter i_vec)
		_endif 
	_endloop 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_iter _method export_shape_settings.defs()
	_for i_vec _over .fields.fast_elements()
	_loop
		_loopbody(_scatter i_vec)
	_endloop 
_endmethod
$
