#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:buffer_geometry_collection)

_pragma(classify_level=basic, topic={analysis})
##
## A collection of geometry that represents a buffer around some other
## collection. In its nature self is an area, can be big and
## complex, but still an area.
def_slotted_exemplar(:buffer_geometry_collection,
	{
		{:source_collection, _unset},
		{:distance, _unset},
		{:corner_style, _unset},
		{:end_style,_unset}
	}, :base_spatial_collection)
$

message_handler.new(:buffer_geometry_collection).add_use(:base_spatial_collection)
$

_pragma(classify_level=basic, topic={analysis})
_method buffer_geometry_collection.new(dsm, source_col, distance, corner_style, end_style)
	_return _clone.init(dsm, source_col, distance, corner_style, end_style)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method buffer_geometry_collection.init(dsm, source_col, distance, corner_style, end_style)
	.source_collection << source_col
	.distance << distance
	.corner_style << corner_style
	.end_style << end_style
	
	_return _super.init(dsm)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method buffer_geometry_collection.activate_editor_in(dialog, holder)
	_return dialog.edit_buffer_dialog(holder,
					  .source_collection,
					  .distance, .corner_style, .end_style)
_endmethod
$

###################################################################################################################


_pragma(classify_level=restricted, topic={analysis})
_method buffer_geometry_collection.editable?
	_return _true
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method buffer_geometry_collection.ref_collections
	## return the collections I depend on
	_return {.source_collection}
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method buffer_geometry_collection.size_is_fast?
	## 
	_return .source_collection.size_is_fast?
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method buffer_geometry_collection.size
	_return .source_collection.size
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method buffer_geometry_collection.geometry_for(a_geom, geom_name)
	_local source_geom << .source_collection.geometry_for(a_geom, :geometry)
	_if source_geom _isnt _unset
	_then
		_local distance << .distance.value_in(source_geom.world.unit)
		_local area << source_geom.buffer(distance, .corner_style, .end_style)
		_return pseudo_area.new_for_world(area, source_geom.world)
	_else
		_return _unset 
	_endif 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method buffer_geometry_collection.read_stream(_optional filter)
	## Return my read_stream. If filter is set, the let the filter
	## filter my results. Otherwise set myself as the filter of my
	## source_collection
	#
	_local str << .source_collection.read_stream()
	_if filter _isnt _unset
	_then
		_return filter.filter_stream(str)
	_else 
		_return str
	_endif 
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method buffer_geometry_collection.display_tree_in(owner)
	_return owner.display_tree_for_buffer_geometry_collection(_self, .source_collection, :geometry, .distance)
_endmethod
$
