#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:bounds_filter_geometry_collection)

_pragma(classify_level=basic, topic={analysis})
##
## Collection that filters the geometry collection within the bounds.
##
def_slotted_exemplar(:bounds_filter_geometry_collection,
	{
		{:source_collection, _unset},
		{:bounds,            _unset}
	}, :base_spatial_filter_collection)
$

message_handler.new(:bounds_filter_geometry_collection).add_use(:base_spatial_filter_collection)
$

_pragma(classify_level=basic, topic={analysis})
_method bounds_filter_geometry_collection.new(dsm, source_col, bounds)
	_return _clone.init(dsm, source_col, bounds)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_private _method bounds_filter_geometry_collection.init(dsm, source_col, bounds)
	.bounds << bounds
	
	_return _super.init(dsm, source_col)
_endmethod
$

###################################################################################################################

_pragma(classify_level=basic, topic={analysis})
_method bounds_filter_geometry_collection.editable?
	_return _false 
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method bounds_filter_geometry_collection.ref_collections
	##
	_return {.source_collection}
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method bounds_filter_geometry_collection.filter_stream(stream)
	_return bounds_filter_read_stream.new(.source_collection, stream, :geometry, .bounds)
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method bounds_filter_geometry_collection.discard()
	.source_collection << .bounds << _unset 
	_super.discard()
_endmethod
$
