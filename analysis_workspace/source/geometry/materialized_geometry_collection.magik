#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:materialized_geometry_collection)

_pragma(classify_level=basic, topic={analysis})
##
## Analysis collection for a materialized geometry collection.
##
def_slotted_exemplar(:materialized_geometry_collection,
	{
		{:source_collection, _unset},
		{:id,                _unset}
	}, :base_spatial_collection)
$

_pragma(classify_level=basic, topic={analysis})
_method materialized_geometry_collection.new(dsm, source_col)
	_return _clone.init(dsm, source_col)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_private _method materialized_geometry_collection.init(dsm, source_col)
	.source_collection << source_col
	.id << dsm.materialize_spatial(source_col)
	dsm.increase_ref_count(.id)
	
	_return _super.init(dsm)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_private _method materialized_geometry_collection.init_copy()
	.dsm.increase_ref_count(.id)
	_return _self
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_private _method materialized_geometry_collection.actual_collection
	_return .dsm.geometry_collection(.id)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method materialized_geometry_collection.read_stream(_optional filter)
	## Return my read_stream. If filter is set, the let the filter
	## filter my results. Otherwise set myself as the filter of my
	## source_collection
	#
	_local str << derived_geometry_read_stream.new(
			      _self.actual_collection.read_stream(),
			      handler.new(_self, :|dataset_geometry()|))
	_if filter _isnt _unset
	_then
		_return filter.filter_stream(str)
	_else 
		_return str
	_endif 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method materialized_geometry_collection.dataset_geometry(rec)
	_return rec.geometries(_false).an_element()
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method materialized_geometry_collection.includes?(rec)
	_return _self.actual_collection.select(predicate.eq(:rwo_id, rec.rwo_id)).empty?.not
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method materialized_geometry_collection.ref_collections
	_return {.source_collection}
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method materialized_geometry_collection.discard()
	_if .id _isnt _unset
	_then
		_local c << .dsm.decrease_ref_count(.id)
		_if c = 0
		_then 
			.dsm.discard_geometry_set(.id)
		_endif
		.id << _unset 
	_endif 
	_super.discard()
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method materialized_geometry_collection.display_tree_in(owner)
	_return owner.display_tree_for_materialized_geometry_collection(_self, .source_collection)
_endmethod
$
