#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:grouping_element)
$

_pragma(classify_level=restricted, topic={analysis})
def_slotted_exemplar(:grouping_element,
	## Holder of the operator and field combination. Operator will
	## be like :min, :max, :sum, etc.
	{
		{:operator,  _unset, :writable},
		{:field,     _unset, :writable}
	})
$

_pragma(classify_level=restricted, topic={analysis})
_method grouping_element.new(operator, field)
	_return _clone.init(operator, field)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method grouping_element.init(operator, field)
	.operator << operator
	.field << field
	_return _self 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method grouping_element.equals?(other)
	_return other.equals_in_detail?(.operator, .field)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method grouping_element.equals_in_detail?(operator, field)
	_return .operator = operator _andif
		.field = field
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method grouping_element.matches_in_detail?(group_element)
	_return _self.equals?(group_element)
_endmethod
$
