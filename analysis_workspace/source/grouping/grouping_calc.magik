_package rwan
$

#remex(:grouping_calc)
$

_pragma(classify_level=restricted, topic={analysis})
def_slotted_exemplar(:grouping_calc,
	## Holder of calculations (sums, maxs, mins, etc).
	{
		{:private, _unset},
		{:reports, _unset}
	})
$

_pragma(classify_level=restricted, topic={analysis})
_method grouping_calc.new()
	_return _clone.init()
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method grouping_calc.init()
	.private << hash_table.new()
	.reports << rope.new()
	_return _self 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method grouping_calc.process_count(group_element, value)
	## Count the records where the value for field isnt
	## unset. In case field is unset, then the records will be
	## counted. 
	_if group_element.field _isnt _unset _andif 
	    value _is _unset
	_then
		_return
	_endif
	
	_local elem << _self.add_sum_or_create_if_absent(group_element)
	_if elem.value _is _unset
	_then
		elem.value << 1
	_else
		elem.value +<< 1
	_endif
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method grouping_calc.process_sum(group_element, value)
	_if value _is _unset _then _return _endif
	
	_local elem << _self.add_sum_or_create_if_absent(group_element)
	_if elem.value _is _unset
	_then
		elem.value << value
	_else
		elem.value +<< value
	_endif 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method grouping_calc.process_min(group_element, value)
	_if value _is _unset _then _return _endif
	
	_local elem << _self.add_sum_or_create_if_absent(group_element)
	_if elem.value _is _unset
	_then
		elem.value << value
	_else
		elem.value << min(elem.value, value)
	_endif 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method grouping_calc.process_max(group_element, value)
	_if value _is _unset _then _return _endif
	
	_local elem << _self.add_sum_or_create_if_absent(group_element)
	_if elem.value _is _unset
	_then
		elem.value << value
	_else
		elem.value << max(elem.value, value)
	_endif 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method grouping_calc.process_average(group_element, value)
	_if value _is _unset _then _return _endif
	
	_local elem << _self.add_sum_or_create_if_absent(group_element)
	
	# Use some private space to store sum and count to derive the
	# average.
	_local props << .private.at_or_new_if_absent(group_element, property_list)
	
	_if props[:sum] _is _unset
	_then
		props[:sum] << value
	_else
		props[:sum] +<< value
	_endif 
	props[:count] << props[:count].default(0) + 1
	
	elem.value << props[:sum]/props[:count]
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method grouping_calc.add_sum_or_create_if_absent(group_element)
	_local elem << _unset 
	_for i_calc_elem _over .reports.fast_elements()
	_loop
		_if i_calc_elem.matches?(group_element)
		_then 
			elem << i_calc_elem
			_leave
		_endif
	_endloop
	_if elem _is _unset
	_then
		elem << grouping_calc_element.new(group_element)
		.reports.add(elem)
	_endif
	_return elem
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method grouping_calc.calculation(operator, _optional field_name)
	_for i_calc_elem _over .reports.fast_elements()
	_loop
		_if i_calc_elem.operator = operator _andif
		    (field_name _is _unset _orif 
		    i_calc_elem.field.name = field_name)
		_then
			_return i_calc_elem.value
		_endif 
	_endloop 
_endmethod
$


_pragma(classify_level=restricted, topic={analysis})
_iter _method grouping_calc.reports()
	_if .reports _isnt _unset
	_then
		_for i_calc_elem _over .reports.fast_elements()
		_loop
			_loopbody(i_calc_elem)
		_endloop
	_endif 
_endmethod
$
