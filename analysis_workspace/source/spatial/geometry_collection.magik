#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:geometry_collection)

_pragma(classify_level=basic, topic={analysis})
##
## Analysis collection that holds a geometry_set.
##
def_slotted_exemplar(:geometry_collection,
	{
		{:id,       _unset},
		{:geometry, _unset, :readable}
	}, :base_spatial_collection)
$

message_handler.new(:geometry_collection).add_use(:base_spatial_collection)
$

_pragma(classify_level=basic, topic={analysis})
_method geometry_collection.new(dsm, geometry)
	_if _not geometry.is_kind_of?(geometry_set_mixin)
	_then
		condition.raise(:error, :string, "Input must be geometry set")
	_endif
	_if geometry.empty?
	_then
		condition.raise(:error, :string, "Input can not be empty geometry set")
	_endif 
	_return _clone.init(dsm, geometry)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_private _method geometry_collection.init(dsm, geometry)
	.geometry << geometry
	_return _super.init(dsm)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_private _method geometry_collection.init_copy()
	_if .id _isnt _unset
	_then 
		.dsm.increase_ref_count(.id)
	_endif 
	_return _super.init_copy()
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method geometry_collection.serial_slots()
	_local (keys, values) << _super.serial_slots()
	keys.add_all_last({:geometry})

	_if .id _is _unset
	_then 
		.id << .dsm.materialize_spatial(_self)
		.dsm.increase_ref_count(.id)
	_endif 
	values.add_all_last({.id})
	_return keys, values
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_private _method geometry_collection.init_from_serial(dsm, base_cols, id)
	_super.init_from_serial(dsm, base_cols)
	.id << id
	.geometry << .dsm.geometry_set(.id)
	_return _self 
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method geometry_collection.equals?(other)
	_return _self.is_class_of?(other) _andif 
		other.equals_in_details?(.nrefs, .geometry)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method geometry_collection.equals_in_details?(nrefs, geometry)
	_return _super.equals_in_details?(nrefs) _andif 
		_self.geometry_sets_equal?(.geometry, geometry)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method geometry_collection.geometry_sets_equal?( gs1, gs2 )
	_if gs1.size <> gs2.size _then _return _false _endif 
	_for i_geom _over gs1.fast_elements()
	_loop @outer
		_for i_geom2 _over gs2.fast_elements()
		_loop
			_if i_geom.equal_to?(i_geom2)
			_then
				_continue @outer
			_endif
		_endloop
		_return _false
	_endloop
	_return _true 
_endmethod
$
###########################################################################

_pragma(classify_level=basic, topic={analysis})
_method geometry_collection.geometry_set(geom_name)
	_return .geometry
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method geometry_collection.read_stream(_optional filter)
	## Return my read_stream. If filter is set, the let the filter
	## filter my results. Otherwise set myself as the filter of my
	## source_collection
	#
	_local str << .geometry.read_stream()
	_if filter _isnt _unset
	_then
		_return filter.filter_stream(str)
	_else 
		_return str
	_endif 
_endmethod
$


#_pragma(classify_level=basic, topic={analysis})
#_method geometry_collection.size
#	_return .geometry.size
#_endmethod
#$

#
#_pragma(classify_level=basic, topic={analysis})
#_method geometry_collection.convert_to_geometry(_optional bounds)
#	_if bounds _is _unset
#	_then 
#		_return .geometry
#	_else
#		.geometry.select(:bounds_interacting_with, bounds)
#	_endif 
#_endmethod
#$
#
#_pragma(classify_level=basic, topic={analysis})
#_method geometry_collection.convert_to_geometry_is_fast?
#	_return _true  
#_endmethod
#$
#
#
#_pragma(classify_level=basic, topic={analysis})
#_method geometry_collection.description(translator)
#	_if .geometry.is_collection?
#	_then
#		size << .geometry.size
#		a_geom << .geometry.an_element()
#	_else
#		size << 1
#		a_geom << .geometry
#	_endif
#	
#	_return _self.message(:description, size, a_geom.geom_category)
#_endmethod
#$

_pragma(classify_level=basic, topic={analysis})
_method geometry_collection.discard()
	_if .id _isnt _unset
	_then
		_local c << .dsm.decrease_ref_count(.id)
		_if c = 0
		_then 
			.dsm.discard_geometry_set(.id)
		_endif 
		.id << _unset
	_endif
	_super.discard()
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method geometry_collection.display_tree_in(owner)
	_return owner.display_tree_for_geometry_collection(_self,.geometry)
_endmethod
$
