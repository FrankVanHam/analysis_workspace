#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:spatial_filter_geometry_collection)

_pragma(classify_level=basic, topic={analysis})
##
## Collection that performs a spatial operator on a geometry
## collection.
def_slotted_exemplar(:spatial_filter_geometry_collection,
	{
		{:source_collection, _unset},
		{:operator,          _unset},
		{:filter_collection, _unset},
		{:filter_geom_name,  _unset}
	}, :base_spatial_collection)
$

message_handler.new(:spatial_filter_geometry_collection).add_use(:base_spatial_collection)
$

_pragma(classify_level=basic, topic={analysis})
_method spatial_filter_geometry_collection.new(dsm, source_col, operator, filter_col, filter_geom_name)
	_return _clone.init(dsm, source_col, operator, filter_col, filter_geom_name)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_private _method spatial_filter_geometry_collection.init(dsm, source_col, operator, filter_col, filter_geom_name)
	.source_collection << source_col
	.operator << operator
	.filter_collection << filter_col
	.filter_geom_name << filter_geom_name

	# protect agains nonsense
	.filter_collection.assert_geom_name(.filter_geom_name)


	_return _super.init(dsm)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method spatial_filter_geometry_collection.init_copy()

	_return _super.init_copy()
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method spatial_filter_geometry_collection.activate_editor_in(dialog, holder)
	_return dialog.edit_spatial_filter_dialog(holder,
						  .source_collection, :geometry,
						  .operator,
						  .filter_collection, .filter_geom_name)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method spatial_filter_geometry_collection.serial_slots()
	_local (keys, values) << _super.serial_slots()
	keys.add_all_last({:source_collection, :operator, :filter_collection, :filter_geom_name})
	values.add_all_last({.source_collection, .operator, .filter_collection, .filter_geom_name})
	_return keys, values
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method spatial_filter_geometry_collection.init_from_serial(dsm, source_col, operator, filter_collection, filter_geom_name)
    _super.init_from_serial(dsm)
    .source_collection << source_col
    .operator << operator
    .filter_collection << filter_collection
    .filter_geom_name << filter_geom_name
    _return _self 
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method spatial_filter_geometry_collection.equals?(other)
	_return _self.is_class_of?(other) _andif
		other.equals_in_details?(.source_collection, .operator, .filter_collection, .filter_geom_name)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method spatial_filter_geometry_collection.equals_in_details?(source_col, operator, filter_collection, filter_geom_name)
	_return _super.equals_in_details?() _andif
		.source_collection.equals?(source_col) _andif
		.operator = operator _andif
		.filter_collection.equals?(filter_collection) _andif
		.filter_geom_name = filter_geom_name
_endmethod
$

###################################################################################################################

_pragma(classify_level=basic, topic={analysis})
_method spatial_filter_geometry_collection.editable?
	_return _true 
_endmethod
$



#_pragma(classify_level=basic, topic={analysis})
#_method spatial_filter_geometry_collection.geometry_refs
#	_return .source_collection.geometry_refs
#_endmethod
#$
#
#_pragma(classify_level=basic, topic={analysis})
#_method spatial_filter_geometry_collection.expose()
#	_return .source_collection.expose()
#_endmethod
#$

_pragma(classify_level=restricted, topic={analysis})
_method spatial_filter_geometry_collection.size_is_fast?
	## no, size is generally not fast as it is spatially filtered.
	_return _false 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method spatial_filter_geometry_collection.read_stream(_optional filter)
	## Return my read_stream. If filter is set, the let the filter
	## filter my results. Otherwise set myself as the filter of my
	## source_collection
	#
	_local str << .source_collection.read_stream(_self)
	_if filter _isnt _unset
	_then
		_return filter.filter_stream(str)
	_else 
		_return str
	_endif 
_endmethod
$

#_pragma(classify_level=restricted, topic={analysis})
#_method spatial_filter_geometry_collection.filter_stream_for_actual_collection(actual_collection)
#	_local filter_gs << .filter_collection.geometry_set(.filter_geom_name)
#
#	# limit the source by the filter bounds to only look in that
#	# bounds. Except for disjoint operation...
#	_local bounds << _if .operator _isnt :disjoint_from
#			 _then >> filter_gs.bounds
#			 _else >> _unset 
#			 _endif 
#	_local source_stream << _self.source_rwo_stream(actual_collection, bounds)
#	_return rwan:spatial_filter_read_stream.new(source_stream, .source_geom_name, .operator, filter_gs)
#_endmethod
#$
#
#_pragma(classify_level=restricted, topic={analysis})
#_private _method spatial_filter_geometry_collection.source_rwo_stream(actual_collection, bounds)
#	_local source_gs << _self.source_geometry_set(actual_collection, bounds)
#	_return gs_rwo_set.new(actual_collection.dataset,
#			       property_list.new_with(
#				       :data_source, source_gs)).read_stream()
#_endmethod
#$
#
#_pragma(classify_level=restricted, topic={analysis})
#_private _method spatial_filter_geometry_collection.source_geometry_set(actual_collection, bounds)
#	# if the operator is restricting to the filter, then set the
#	# bounds.
#	_local world << actual_collection.record_exemplar.rwan_world_for(.source_geom_name)
#	_return actual_collection.geometry_set(world, bounds, .source_geom_name)
#_endmethod
#$
#
_pragma(classify_level=restricted, topic={analysis})
_method spatial_filter_geometry_collection.filter_stream(stream)
	_local filter_gs << .filter_collection.geometry_set(.filter_geom_name)
	_return spatial_filter_geometry_read_stream.new(stream, .operator, filter_gs)
_endmethod
$
#
#
#_pragma(classify_level=basic, topic={analysis, collections})
#_method spatial_filter_geometry_collection.size
#	_local geom << _self.need_geometry(.arg)
#	_return _self.source_collection.size_filtered_by_geometry(.source_geom_name, .operator, geom)
#_endmethod
#$
#
#_pragma(classify_level=basic, topic={analysis, collections})
#_method spatial_filter_geometry_collection.includes?(rec)
#	_local geom << rec.geometry(.source_geom_name)
#	_if geom _is _unset
#	_then
#		_return _false
#	_endif
#	_local rec_gs << geometry_set.new_with(geom)
#	_local geom_arg << _self.need_geometry(.arg)
#	_return rec_gs.select(.operator, geom_arg).empty?.not
#_endmethod
#$
#
#
#_pragma(classify_level=basic, topic={analysis, collections})
#_iter _method spatial_filter_geometry_collection.fast_elements()
#	_local geom << _self.need_geometry(.arg)
#	_for i_rec _over _self.source_collection.fast_elements_filtered_by_geometry(.source_geom_name, .operator, geom)
#	_loop
#		_loopbody(i_rec)
#	_endloop
#_endmethod
#$
#
#_pragma(classify_level=basic, topic={analysis, collections})
#_method spatial_filter_geometry_collection.convert_to_geometry()
#	_local geom << _self.need_geometry(.arg)
#	_return _self.source_collection.convert_to_geometry_filtered_by_geometry(.source_geom_name, .operator, geom)
#_endmethod
#$
#
#
#_pragma(classify_level=restricted, topic={analysis})
#_private _method spatial_filter_geometry_collection.need_geometry(arg)
#	_return arg.convert_to_geometry()
#_endmethod
#$
#
#
#_pragma(classify_level=basic, topic={analysis})
#_method spatial_filter_geometry_collection.description(translator)
#	_local base_name << translator.name_for_collection(_self.source_collection)
#	_local target_name << translator.name_for_collection(.arg)
#	_return _self.message(:description, base_name, .source_geom_name,
#			      .operator.write_string, target_name)
#_endmethod
#$


_pragma(classify_level=advanced, topic={analysis})
_method spatial_filter_geometry_collection.display_tree_in(owner)
	_return owner.display_tree_for_spatial_filter_geometry_collection(
			_self, .source_collection, .operator,
			.filter_collection, .filter_geom_name)
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method spatial_filter_geometry_collection.discard()
	.source_collection << .operator << .filter_collection << .filter_geom_name << _unset 
	_super.discard()
_endmethod
$
