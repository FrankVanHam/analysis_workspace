#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:spatial_collection)

_pragma(classify_level=basic, topic={analysis})
##
## Analysis collection that yields the geometries for a certain
## geometry_field in the base collection.
##
def_slotted_exemplar(:spatial_collection,
	{
		{:geom_name, _unset}
	}, :base_spatial_collection)
$


_pragma(classify_level=basic, topic={analysis})
_method spatial_collection.new(dsm, base_col, geom_name)
	_return _clone.init(dsm, base_col, geom_name)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_private _method spatial_collection.init(dsm, base_col, geom_name)
	.geom_name << geom_name
	_return _super.init(dsm, base_col)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method spatial_collection.serial_slots()
	_local (keys, values) << _super.serial_slots()
	keys.add_all_last({:geom_name})
	values.add_all_last({.geom_name})
	_return keys, values	
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method spatial_collection.init_from_serial(dsm, base_cols, geom_name)
    _super.init_from_serial(dsm, base_cols)
    .geom_name << geom_name
    _return _self 
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method spatial_collection.equals?(other)
	_return _self.is_class_of?(other) _andif
		other.equals_in_details?(.base_collections, .geom_name)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method spatial_collection.equals_in_details?(base_cols, geom_name)
	_return _super.equals_in_details?(base_cols, geom_name) _andif 
		.geom_name = geom_name
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method spatial_collection.size
	_return _self.base_collection.size_for_geometry(.geom_name )
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method spatial_collection.convert_to_geometry()
	_return _self.base_collection.convert_to_geometry(.geom_name )
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_iter _method spatial_collection.fast_geometries()
	_for i_geom _over _self.base_collection.fast_geometries(.geom_name)
	_loop
		_loopbody(i_geom)
	_endloop 
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method spatial_collection.description(translator)
	_local base_name << translator.name_for_collection(_self.base_collection)
	_return _self.message(:description, .geom_name, base_name)
_endmethod
$

