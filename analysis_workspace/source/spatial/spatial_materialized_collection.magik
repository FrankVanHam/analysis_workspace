#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:spatial_materialized_collection)

_pragma(classify_level=basic, topic={analysis})
##
## Analysis collection for a materialized geometry collection.
##
def_slotted_exemplar(:spatial_materialized_collection,
	{
		{:id, _unset}
	}, :base_spatial_collection)
$

_pragma(classify_level=basic, topic={analysis})
_method spatial_materialized_collection.new(dsm, base_col)
	_return _clone.init(dsm, base_col)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_private _method spatial_materialized_collection.init(dsm, base_col)
	.id << dsm.materialize_spatial(base_col)
	dsm.increase_ref_count(.id)
	
	_return _super.init(dsm, base_col)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_private _method spatial_materialized_collection.init_copy()
	.dsm.increase_ref_count(.id)
	_return _self
_endmethod
$

_pragma(classify_level=restricted, topic={demo})
_method spatial_materialized_collection.serial_slots()
	_local (keys, values) << _super.serial_slots()
	keys.add_all_last({:id})
	values.add_all_last({.id})
	_return keys, values
_endmethod
$

_pragma(classify_level=restricted, topic={demo})
_private _method spatial_materialized_collection.init_from_serial(dsm, base_cols, id)
	_super.init_from_serial(dsm, base_cols)
	.id << id
	_return _self 
_endmethod
$

_pragma(classify_level=basic, topic={demo})
_method spatial_materialized_collection.equals?(other)
	_return _self.is_class_of?(other) _andif 
		other.equals_in_details?(.base_collections, .id)
_endmethod
$

_pragma(classify_level=restricted, topic={demo})
_method spatial_materialized_collection.equals_in_details?(base_cols, id)
	_if _not _super.equals_in_details?(base_cols) _then _return _false _endif
	
	_return .id = id
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method spatial_materialized_collection.size
	_return _self.convert_to_geometry().size
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method spatial_materialized_collection.convert_to_geometry()
	_return .dsm.geometry_set(.id)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method spatial_materialized_collection.description
	_return _self.message(:description, _self.base_collection.description)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method spatial_materialized_collection.discard()
	_if .id _isnt _unset
	_then
		_local c << .dsm.decrease_ref_count(.id)
		_if c = 0
		_then 
			.dsm.discard_geometry_set(.id)
		_endif
		.id << _unset 
	_endif 
	_super.discard()
_endmethod
$

