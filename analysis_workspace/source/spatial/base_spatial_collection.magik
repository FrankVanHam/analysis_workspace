#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:base_spatial_collection)
$
_pragma(classify_level=basic, topic={analysis})
##
## Base class of collections that store a collection of
## geometries.
##
def_slotted_exemplar(:base_spatial_collection,
	{},
	:base_collection)
$

_pragma(classify_level=basic, topic={analysis})
_method base_spatial_collection.is_spatial?
	_return _true  
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_abstract _method base_spatial_collection.convert_to_spatial()
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_abstract _method base_spatial_collection.convert_to_geometry()
_endmethod
$


_pragma(classify_level=basic, topic={analysis})
_iter _method base_spatial_collection.fast_geometries()
	_for i_geom _over _self.fast_elements()
	_loop
		_loopbody(i_geom)
	_endloop 
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_iter _method base_spatial_collection.fast_elements()
	_for e _over _self.fast_geometries()
	_loop
		_loopbody(e)
	_endloop 
_endmethod
$


_pragma(classify_level=basic, topic={analysis})
_method base_spatial_collection.buffer(geom_name, distance, _optional corner_style, end_style)
	_return buffer_collection.new(.dsm, _self, geom_name, distance, corner_style, end_style)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_spatial_collection.spatial_operation(other, mthd)
	_return spatial_binary_op_collection.new(.dsm, _self, other, mthd)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_spatial_collection.xor(other)
	_return spatial_binary_op_collection.new(.dsm, _self, other, :xor)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_spatial_collection.union(other)
	_return spatial_binary_op_collection.new(.dsm, _self, other, :union)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_spatial_collection.subtraction(other)
	_return spatial_binary_op_collection.new(.dsm, _self, other, :difference)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_spatial_collection.intersection(other)
	_return spatial_binary_op_collection.new(.dsm, _self, other, :intersection)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_spatial_collection.description
	_return _self.message(:description)
_endmethod
$
