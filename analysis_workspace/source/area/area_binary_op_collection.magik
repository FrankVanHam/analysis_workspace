#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$


#remex(:area_binary_op_collection)

_pragma(classify_level=basic, topic={analysis})
##
## Area collection that binary combines two area
## collections. Allowed operations are :xor, :union, :subtraction, :intersection.
##
def_slotted_exemplar(:area_binary_op_collection,
	{
		{:operation, _unset}
	}, :base_area_collection)
$


_pragma(classify_level=basic, topic={analysis})
_method area_binary_op_collection.new(dsm, base_col, other_col, operation)
	_return _clone.init(dsm, base_col, other_col, operation)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method area_binary_op_collection.init(dsm, base_col, other_col, operation)
	.operation << operation
	_if _not {:xor, :union, :subtraction, :intersection}.includes?(operation)
	_then
		condition.raise(:error, :string, write_string("Unknown operation", operation))
	_endif
	_if other_col _is _unset
	_then
		condition.raise(:error, :string, "Please supply other collection")
	_endif 
	_return _super.init(dsm, base_col, other_col)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method area_binary_op_collection.serial_slots()
	_local (keys, values) << _super.serial_slots()
	keys.add_all_last({:operation})
	values.add_all_last({.operation})
	_return keys, values	
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method area_binary_op_collection.init_from_serial(dsm, base_cols, op)
    _super.init_from_serial(dsm, base_cols)
    .operation << op
    _return _self 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method area_binary_op_collection.other_collection
	_return .base_collections[2]
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method area_binary_op_collection.equals?(other)
	_return _self.is_class_of?(other) _andif
		other.equals_in_details?(.base_collections, .operation)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method area_binary_op_collection.equals_in_details?(base_cols, op)
	_return _super.equals_in_details?(base_cols, op) 
		.operation = op
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method area_binary_op_collection.area
	_return _self.convert_to_geometry()
_endmethod
$


_pragma(classify_level=basic, topic={analysis})
_method area_binary_op_collection.convert_to_geometry()
	_local area1 << _self.base_collection.convert_to_geometry()
	_local area2 << _self.other_collection.convert_to_geometry()
	_local methd << write_string(.operation+:|()|).as_symbol()

	_if area1.is_collection?
	_then
		area1 << area1.areas_as_coverage()
	_endif
	_if area2.is_collection?
	_then
		area2 << area2.areas_as_coverage()
	_endif
	
	_local area_result << area1.perform(methd, area2)
	_if area_result _isnt _unset
	_then 
		area_result.world << area1.world
		_return area_result
	_else
		_return _unset
	_endif 
_endmethod
$


_pragma(classify_level=basic, topic={analysis})
_method area_binary_op_collection.description(translator)
	_local base_name << translator.name_for_collection(_self.base_collection)
	_local other_name << translator.name_for_collection(_self.other_collection)
	_return _self.message(:description, .operation, base_name, other_name)
_endmethod
$

