##
## File            : $File$
## SCM             : $URL$
##
## Copyright       : Realworld Systems
##                   e-mail  : support@realworld-systems.com
##                   address : Venusstraat 17, 4105 JH Culemborg, The Netherlands
##                   tel     : +31(0)345 614406
##                   fax     : +31(0)345 614319
##
## Contains        : 
##
##
## Date written    : 2014-12-24
## Date changed    : $Date$
## Revision        : $Rev$

_package rwan
$

#remex(:base_area_collection)

_pragma(classify_level=basic, topic={analysis})
##
## Base for collections that hold an area. The area can be
## complex and consist of multiple polygons and holes.
##
def_slotted_exemplar(:base_area_collection,
	{},
	:base_collection)
$

_pragma(classify_level=basic, topic={analysis})
_method base_area_collection.is_spatial?
	_return _true  
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_area_collection.is_area?
	_return _true  
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_area_collection.size
	_return 1
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_iter _method base_area_collection.fast_geometries(_optional geom_name)
	_for i_area _over _self.fast_elements()
	_loop
		_loopbody(i_area)
	_endloop 
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_iter _method base_area_collection.fast_elements()
	_loopbody(_self.area)
_endmethod
$


_pragma(classify_level=basic, topic={analysis})
_method base_area_collection.size_is_fast?
	_return _true 
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_area_collection.convert_to_geometry()
	_return _self.area
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_abstract _method base_area_collection.area
	
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_area_collection.description
	_return _self.message(:description)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_area_collection.buffer(geom_name, distance, _optional corner_style, end_style)
	_return buffer_collection.new(.dsm, _self, geom_name, distance, corner_style, end_style)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_area_collection.spatial_operation(other, mthd)
	_return area_binary_op_collection.new(.dsm, _self, other, mthd)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_area_collection.xor(other)
	_return area_binary_op_collection.new(.dsm, _self, other, :xor)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_area_collection.union(other)
	_return area_binary_op_collection.new(.dsm, _self, other, :union)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_area_collection.subtraction(other)
	_return area_binary_op_collection.new(.dsm, _self, other, :subtraction)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_area_collection.intersection(other)
	_return area_binary_op_collection.new(.dsm, _self, other, :intersection)
_endmethod
$
