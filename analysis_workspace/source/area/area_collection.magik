#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:area_collection)

_pragma(classify_level=basic, topic={analysis})
##
## An area collection that holds one area.
##
def_slotted_exemplar(:area_collection,
	{
		{:id,   _unset},
		{:area, _unset, :readable}
	}, :base_area_collection)
$


_pragma(classify_level=basic, topic={analysis})
_method area_collection.new(dsm, area)
	_return _clone.init(dsm, area)
_endmethod
$


_pragma(classify_level=restricted, topic={analysis})
_private _method area_collection.init(dsm, area)
	.id   << _unset 
	.area << area
	_return _super.init(dsm)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_private _method area_collection.init_copy()
	_if .id _isnt _unset
	_then
		.dsm.increase_ref_count(.id)
	_endif 
	_return _self
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method area_collection.convert_to_geometry_is_fast?
	_return _true  
_endmethod
$


_pragma(classify_level=basic, topic={analysis})
_method area_collection.world
	_return .area.world
_endmethod
$

_pragma(classify_level=restricted, topic={demo})
_method area_collection.serial_slots()
	_local (keys, values) << _super.serial_slots()
	keys.add_all_last({:area})

	_if .id _is _unset
	_then 
		.id << .dsm.materialize_area(_self)
		.dsm.increase_ref_count(.id)
	_endif 
	values.add_all_last({.id})
	_return keys, values
_endmethod
$

_pragma(classify_level=restricted, topic={demo})
_private _method area_collection.init_from_serial(dsm, base_cols, id)
	_super.init_from_serial(dsm, base_cols)
	.id << id
	
	.area << .dsm.area(.id)
	_return _self 
_endmethod
$

_pragma(classify_level=restricted, topic={demo})
_method area_collection.equals?(other)
	_return _self.is_class_of?(other) _andif 
		other.equals_in_details?(.base_collections, .area)
_endmethod
$

_pragma(classify_level=restricted, topic={demo})
_method area_collection.equals_in_details?(base_cols, area)
	_if _not _super.equals_in_details?(base_cols) _then _return _false _endif
	
	_return .area.equal_to?(area)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method area_collection.area
	_return .area
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method area_collection.description(translator)
	_local world_unit << .area.world.unit.squared
	_local area_value << unit_value(.area.area, world_unit)
	area_value << area_value.convert_to(world_unit.base_unit)
	
	_local format << unit_specific_format.new_with_properties(area_value.unit,
								  :float_decimal_places,0)
	_return _self.message(:description, .area.npolygons, format.format(area_value))
_endmethod
$


_pragma(classify_level=basic, topic={analysis})
_method area_collection.discard()
	_if .id _isnt _unset
	_then
		_local c << .dsm.decrease_ref_count(.id)
		_if c = 0
		_then 
			.dsm.discard_area(.id)
		_endif 
		.id << _unset
	_endif
	_super.discard()
_endmethod
$
