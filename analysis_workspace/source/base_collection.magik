#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:base_collection)
$

_pragma(classify_level=basic, topic={analysis})
##
## Top base class for all analysis collections.
##
def_slotted_exemplar(:base_collection,
	{
		{:dsm,    _unset},
		{:nrefs,  _unset}
	})
$

_pragma(classify_level=basic, topic={analysis})
# Support for XML serialisation
serial_structure_mixin.add_child(base_collection)
$

_pragma(classify_level=basic, topic={analysis})
# Support for XML serialisation
base_collection.define_shared_constant(:serial_structure, :slotted, :public)
$

_pragma(classify_level=restricted, topic={analysis})
_private _method base_collection.init(dsm)
	.dsm << dsm
	.nrefs << 0
	_return _self 
_endmethod
$

#_pragma(classify_level=basic, topic={analysis})
#_method base_collection.base_collections
#	_return .base_collections
#_endmethod
#$
#
#_pragma(classify_level=basic, topic={analysis})
#_method base_collection.base_collection
#	_return .base_collections.an_element()
#_endmethod
#$
#
_pragma(classify_level=basic, topic={analysis})
_method base_collection.is_record_collection?
	_return _false 
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_collection.editable?
	_return _false 
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_collection.nrefs
	>> .nrefs
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_collection.add_use(col)
	.nrefs +<< 1
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_collection.remove_use(col)
	.nrefs -<< 1
_endmethod
$


#_pragma(classify_level=basic, topic={analysis})
#_method base_collection.viewable?
#	_return _self.editable? 
#_endmethod
#$
#
_pragma(classify_level=basic, topic={demo})
_method base_collection.has_geometry?
	# has self a geometry field or geometry?
	_return _true 
_endmethod
$

_pragma(classify_level=basic, topic={demo})
_method base_collection.geometry_refs
	>> {}	
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_abstract _method base_collection.activate_editor_in(plugin)
	## Callback method from the plugin to let the collection
	## determine what editor to use.	
_endmethod
$

#_pragma(classify_level=basic, topic={analysis})
#_method base_collection.origin_is_sw_collection?
#	_if _self.base_collection _isnt _unset 
#	_then
#		_return _self.base_collection.origin_is_sw_collection?
#	_else
#		_return _false
#	_endif 
#_endmethod
#$
#
#_pragma(classify_level=basic, topic={analysis})
#_method base_collection.is_sw_collection?
#	_return _false 
#_endmethod
#$
#
#_pragma(classify_level=basic, topic={analysis})
#_method base_collection.is_spatial?
#	_return _false 
#_endmethod
#$
#
#_pragma(classify_level=basic, topic={analysis})
#_method base_collection.is_area?
#	_return _false 
#_endmethod
#$

_pragma(classify_level=basic, topic={demo})
_method base_collection.serial_slots()
    _local keys   << rope.new_with(:oop, :nrefs)
    _local values << rope.new_with(_self.as_oop, .nrefs)
    _return keys, values
_endmethod
$

_pragma(classify_level=basic, topic={demo})
_method base_collection.new_from_serial(keys,values)
	_dynamic !current_analysis_dataset_manager!
	
	_local dsm << !current_analysis_dataset_manager!
	_local oop << values[1]
	_local col << dsm.collection_at_oop(oop)
	_if col _is _unset
	_then 
		col << _clone.init_from_serial(dsm,_scatter values.slice_to_end(2))
		dsm.cache_collection_at_oop(oop, col)
	_endif 
	_return col
_endmethod
$

_pragma(classify_level=basic, topic={demo})
_private _method base_collection.init_from_serial(dsm, nrefs)
	.dsm << dsm
	.nrefs << nrefs
	_return _self 
_endmethod
$

_pragma(classify_level=basic, topic={demo})
_method base_collection.equals?(other)
	_if _not _self.is_class_of?(other) _then _return _false _endif
	_return _self.equals_in_details?(.nrefs)
_endmethod
$

_pragma(classify_level=basic, topic={demo})
_method base_collection.equals_in_details?(nrefs)
	_return .nrefs = nrefs
_endmethod
$

#_pragma(classify_level=basic, topic={analysis})
#_method base_collection.is_leaf?
#	_return .base_collections.empty?
#_endmethod
#$
#
#_pragma(classify_level=restricted, topic={analysis})
#_method base_collection.expose()
#	## Expose the inner basic collection.
#	_if _self.base_collection _isnt _unset 
#	_then
#		_return _self.base_collection.expose()
#	_else 
#		_return _unset
#	_endif 
#_endmethod
#$
#
#_pragma(classify_level=basic, topic={analysis})
#_method base_collection.world
#	_return _self.base_collection.world
#_endmethod
#$
#
#_pragma(classify_level=basic, topic={analysis})
#_iter _method base_collection.branch_to_root()
#	_loopbody(_self)
#	_if _self.base_collection _isnt _unset 
#	_then
#		_for i_col _over _self.base_collection.branch_to_root()
#		_loop
#			_loopbody(i_col)
#		_endloop
#	_endif 
#_endmethod
#$
#
#_pragma(classify_level=basic, topic={analysis})
#_method base_collection.size_is_fast?
#	_return _false 
#_endmethod
#$
#
#_pragma(classify_level=basic, topic={analysis})
#_method base_collection.convert_to_geometry_is_fast?
#	_return _false 
#_endmethod
#$
#
#_pragma(classify_level=basic, topic={analysis})
#_abstract _method base_collection.size
#	
#_endmethod
#$

_pragma(classify_level=basic, topic={analysis})
_abstract _iter _method base_collection.fast_elements()
	
_endmethod
$
#
#_pragma(classify_level=basic, topic={analysis})
#_iter _method base_collection.fast_geometries(geom_name)
#	_for i_rec _over _self.fast_elements()
#	_loop
#		_local geom << i_rec.geometry(geom_name)
#		_if geom _isnt _unset
#		_then
#			_loopbody(geom)
#		_endif 
#	_endloop 
#_endmethod
#$
#
#_pragma(classify_level=basic, topic={analysis})
#_method base_collection.goto_bounds
#	_return _self.convert_to_geometry(_unset).bounds
#_endmethod
#$

_pragma(classify_level=basic, topic={analysis})
_method base_collection.discard()
	_if .source_collection _isnt _unset
	_then
		.source_collection.discard()
	_endif 
_endmethod
$

#_pragma(classify_level=advanced, topic={analysis})
#_method base_collection.description(translator)
#	_return _self.class_name
#_endmethod
#$

#_pragma(classify_level=advanced, topic={analysis})
#_method base_collection.description(name_translator)
#	_return _self.description
#_endmethod
#$

_pragma(classify_level=advanced, topic={analysis})
_method base_collection.copy()
	_return _clone.init_copy()
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_private _method base_collection.init_copy()
	_return _self
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method base_collection.message(id, _gather args)
	_return message_handler.new(_self.class_name).human_string(id, _unset, _scatter args)	
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_collection.filter_by_geometry(geom_name, operator, filter_collection, filter_geometry)
	_return spatial_filter_collection.new(.dsm,
					      _self, geom_name, operator,
					      filter_collection, filter_geometry)
_endmethod
$
