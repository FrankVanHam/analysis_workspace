#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:follow_base_trace_read_stream)
$

_pragma(classify_level=basic, topic={analysis, collections})
def_slotted_exemplar(:follow_base_trace_read_stream,
	{
		{:register,          _unset},
		{:source_collection, _unset},
		{:source_stream,     _unset},
		{:target_stream,     _unset}
	}, :input_stream_with_unget_mixin)
$

_pragma(classify_level=basic, topic={analysis, collections})
_method follow_base_trace_read_stream.new(source_col)
	_return _clone.init(source_col)
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_private _method follow_base_trace_read_stream.init(source_col)
	.source_collection << source_col
	.source_stream    << source_col.read_stream()
	.target_stream << _unset
	
	.register << large_record_register.new(1000)
	_return _self 
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_method follow_base_trace_read_stream.get()
	_loop
		_local rec << _self.int!get()
		_if rec _is _unset _then _return _unset _endif

		_if .register.includes?(rec).not
		_then
			.register.add(rec)
			_return rec
		_endif 
	_endloop 
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_private _method follow_base_trace_read_stream.int!get()
	_loop
		_if .target_stream _isnt _unset
		_then
			_local rec << .target_stream.get()
			_if rec _isnt _unset
			_then
				_return rec
			_else
				.target_stream << _unset 
			_endif
		_else
			.target_stream << _self.new_target_stream()
			_if .target_stream _is _unset
			_then
				_return _unset
			_endif 
		_endif
	_endloop 
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_private _method follow_base_trace_read_stream.add_root(source)
	_dynamic !root_query!
	_if !root_query! _isnt _unset
	_then 
		!root_query![.source_collection] << source
	_endif 
_endmethod
$


_pragma(classify_level=basic, topic={analysis, collections})
_abstract _method follow_base_trace_read_stream.new_target_stream()
	
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_method follow_base_trace_read_stream.close()
	.register.discard()
_endmethod
$
