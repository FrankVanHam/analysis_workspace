#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:base_source_collection)
$

_pragma(classify_level=basic, topic={analysis})
##
## Base class of collections that hold the actual
## with data. Subclasses need to implement the method
## .actual_collection to get meaningfull results.
##
## By defition the base_collections will be empty.
##
def_slotted_exemplar(:base_source_collection,
	{
		{:actual_table_name, _unset}
	}, :base_record_collection)
$

_pragma(classify_level=restricted, topic={analysis})
_private _method base_source_collection.init(dsm, base_col, actual_table_name)
	.actual_table_name << actual_table_name
	_if base_col _isnt _unset
	_then 
		_return _super.init(dsm, base_col)
	_else
		_return _super.init(dsm)
	_endif 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method base_source_collection.serial_slots()
	_local (keys, values) << _super.serial_slots()
	keys.add_all_last({:actual_table_name})
	values.add_all_last({.actual_table_name})
	_return keys, values
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method base_source_collection.init_from_serial(dsm, base_cols, actual_table_name)
    _super.init_from_serial(dsm, base_cols)
    .actual_table_name << actual_table_name
    _return _self 
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_source_collection.equals?(other)
	_return _self.is_class_of?(other) _andif 
		other.equals_in_details?(.base_collections, .actual_table_name)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method base_source_collection.equals_in_details?(base_cols, actual_table_name)
	_if _not _super.equals_in_details?(base_cols) _then _return _false _endif
	_return .actual_table_name = actual_table_name
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_abstract _method base_source_collection.actual_collection
	## Subclasses need to implement this method to return the
	## actual collection that holds the records.
	
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_source_collection.read_stream()
	_return _self.actual_collection.read_stream()
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_source_collection.size
	_return _self.actual_collection.size
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_source_collection.world
	_return _self.actual_collection.dataset.world
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_source_collection.includes?(rec)
	_return rec.source_collection _is _self.actual_collection
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method base_source_collection.expose()
	_return _self.actual_collection
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_source_collection.size_filtered_by_predicate(pred)
	_return _self.actual_collection.select(pred).size
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_source_collection.size_is_fast_filtered_by_predicate?(pred)
	_return _self.actual_collection.select(pred).size_is_fast?
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_source_collection.predicate_filtered_read_stream(pred)
	_return _self.actual_collection.select(pred).read_stream()
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_iter _method base_source_collection.fast_elements_filtered_by_predicate(pred)
	_for i_rec _over _self.actual_collection.select(pred).fast_elements()
	_loop
		_loopbody(i_rec)
	_endloop 
_endmethod
$


_pragma(classify_level=restricted, topic={analysis})
_iter _method base_source_collection.fast_elements_filtered_by_geometry(geom_name, selector, arg)
	_local base_gs << _self.convert_to_geometry(geom_name)
	_if arg.is_collection?
	_then
		args << arg
	_else
		args << {arg}
	_endif
	_for i_arg _over args.fast_elements()
	_loop
		gs << base_gs.select(selector, i_arg)
		_for i_geom _over gs.fast_elements()
		_loop
			rec << i_geom.rwo
			_if rec _isnt _unset
			_then 
				_loopbody(rec)
			_endif 
		_endloop
	_endloop 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_iter _method base_source_collection.fast_geometries(geom_name)
	_local gs << _self.convert_to_geometry(geom_name)
	_for i_geom _over gs.fast_elements()
	_loop
		_loopbody(i_geom)
	_endloop 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method base_source_collection.convert_to_geometry_filtered_by_geometry(geom_name, selector, arg, _optional bounds)
	_if arg.is_collection?
	_then
		args << arg
	_else
		args << {arg}
	_endif
	_local base_gs << _self.convert_to_geometry(geom_name)
	_if args.size = 1
	_then
		_return base_gs.select(selector, args.an_element())
	_else
		_local gss << set.new()
		_for i_arg _over args.fast_elements()
		_loop
			_local gs << base_gs.select(selector, args.an_element())
			gss.add(gs)
		_endloop
		_return composite_geometry_set.new(gss)
	_endif 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method base_source_collection.size_for_geometry(geom_name)
	_return _self.convert_to_geometry(geom_name).size
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method base_source_collection.size_filtered_by_geometry(geom_name, selector, arg)
	_if arg.is_collection?
	_then
		args << arg
	_else
		args << {arg}
	_endif
	_local base_gs << _self.convert_to_geometry(geom_name)
	_local c << 0
	_for i_arg _over args.fast_elements()
	_loop
		gs << base_gs.select(selector, i_arg)
		c +<< gs.size
	_endloop 
	_return c
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_source_collection.convert_to_geometry(_optional geom_name)
	_dynamic !rwan_limit_bounds!
	_return _self.actual_collection.geometry_set(_self.world, !rwan_limit_bounds!, geom_name)
_endmethod
$

