#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:predicate_filter_collection)

_pragma(classify_level=basic, topic={analysis})
##
## A collection that runs over the base collection and filters
## it with a predicate.
##
def_slotted_exemplar(:predicate_filter_collection,
	{
		{:pred, _unset}
	}, :base_filter_collection)
$

_pragma(classify_level=basic, topic={analysis})
_method predicate_filter_collection.new(dsm, source_col, pred)
	_return _clone.init(dsm, source_col, pred)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method predicate_filter_collection.init(dsm, source_col, pred)
	.pred << pred		
	_return _super.init(dsm, source_col)  
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method predicate_filter_collection.activate_editor_in(dialog, holder)
	_return dialog.edit_predicate_filter_dialog(holder,
						    .source_collection, .pred)
_endmethod
$

############################################

_pragma(classify_level=restricted, topic={analysis})
_private _method predicate_filter_collection.get_serial_from_slot(slot_name)
	_if slot_name _is :pred
	_then
		_local s << internal_text_output_stream.new()
		.pred.store_on(s)
		_return s.string
	_else 
		_return _super.get_serial_from_slot(slot_name)
	_endif 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method predicate_filter_collection.get_slot_from_serial(slot_name, serial_value)
	_if slot_name _is :pred
	_then
		_return serial_value.evaluate()
	_else
		_return _super.get_slot_from_serial(slot_name, serial_value)
	_endif 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method predicate_filter_collection.equal_slots?(slot_name, my_value, arg_value)
	_if slot_name _is :pred
	_then
		_return arg_value.is_equivalent_to?(my_value)
	_else
		_return _super.equal_slots?(slot_name, my_value, arg_value)
	_endif 
_endmethod
$

###########################################################################################

_pragma(classify_level=basic, topic={analysis})
_method predicate_filter_collection.editable?
	_return _true 
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method predicate_filter_collection.ref_collections
	## return the collections I depend on
	_return {.source_collection}
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method predicate_filter_collection.filter_stream_for_actual_collection(actual_collection)
	_return actual_collection.select(.pred).read_stream()
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method predicate_filter_collection.filter_stream(stream)
	
	_return rwan:predicate_filter_read_stream.new(stream, .pred)
_endmethod
$

#
#_pragma(classify_level=basic, topic={analysis, collections})
#_method predicate_filter_collection.includes?(rec)
#	_return _self.base_collection.includes?(rec) _andif
#		.pred.test?(rec)
#_endmethod
#$
#
#_pragma(classify_level=basic, topic={analysis, collections})
#_method predicate_filter_collection.size
#	_return _self.base_collection.size_filtered_by_predicate(.pred)
#_endmethod
#$
#
#_pragma(classify_level=basic, topic={analysis, collections})
#_method predicate_filter_collection.size_is_fast?
#	_return _self.base_collection.size_is_fast_filtered_by_predicate?(.pred)
#_endmethod
#$
#
#_pragma(classify_level=basic, topic={analysis, collections})
#_iter _method predicate_filter_collection.fast_elements()
#	_for i_rec _over _self.base_collection.fast_elements_filtered_by_predicate(.pred)
#	_loop
#		_loopbody(i_rec)
#	_endloop
#_endmethod
#$
#
#_pragma(classify_level=basic, topic={analysis, collections})
#_method predicate_filter_collection.read_stream()
#	_return _self.base_collection.predicate_filtered_read_stream(.pred)
#_endmethod
#$
#
#_pragma(classify_level=basic, topic={analysis})
#_method predicate_filter_collection.predicate_filtered_read_stream(pred)
#	_local new_pred << .pred _and pred
#	_return _self.base_collection.predicate_filtered_read_stream(new_pred)
#_endmethod
#$
#
#_pragma(classify_level=restricted, topic={analysis})
#_iter _method predicate_filter_collection.fast_elements_filtered_by_predicate(pred)
#	_local new_pred << .pred _and pred
#	_for i_rec _over _self.base_collection.fast_elements_filtered_by_predicate(new_pred)
#	_loop
#		_loopbody(i_rec)
#	_endloop
#_endmethod
#$
#
#_pragma(classify_level=restricted, topic={analysis})
#_method predicate_filter_collection.size_filtered_by_predicate(pred)
#	_local new_pred << .pred _and pred
#	_return _self.base_collection.size_filtered_by_predicate(new_pred)
#_endmethod
#$
#
#_pragma(classify_level=restricted, topic={analysis})
#_method predicate_filter_collection.size_is_fast_filtered_by_predicate?(pred)
#	_local new_pred << .pred _and pred
#	_return _self.base_collection.size_is_fast_filtered_by_predicate?(new_pred)
#_endmethod
#$
#
#_pragma(classify_level=basic, topic={analysis})
#_method predicate_filter_collection.description(translator)
#	_local base_name << translator.name_for_collection(_self.base_collection)
#	_return _self.message(:description, base_name, .pred)
#_endmethod
#$


_pragma(classify_level=advanced, topic={analysis})
_method predicate_filter_collection.display_tree_in(owner)
	_return owner.display_tree_for_predicate_collection(_self, .source_collection, .pred)
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method predicate_filter_collection.discard()
	.source_collection << _unset 
	_super.discard()
_endmethod
$
