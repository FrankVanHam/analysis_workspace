##
## File            : $File$
## SCM             : $URL$
##
## Copyright       : Realworld Systems
##                   e-mail  : support@realworld-systems.com
##                   address : Venusstraat 17, 4105 JH Culemborg, The Netherlands
##                   tel     : +31(0)345 614406
##                   fax     : +31(0)345 614319
##
## Contains        : 
##
##
## Date written    : 2015-01-03
## Date changed    : $Date$
## Revision        : $Rev$

_package rwan
$

#remex(:materialized_collection)
$

_pragma(classify_level=basic, topic={analysis})
##
## Holds a materialized collection in the analysis dataset.
def_slotted_exemplar(:materialized_collection,
	{},
	:base_source_collection)
$

_pragma(classify_level=basic, topic={analysis})
_method materialized_collection.new(dsm, base_col, settings)
	 _return _clone.init(dsm, base_col, settings)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method materialized_collection.init(dsm, base_col, settings)
	_local new_col << dsm.materialize_collection(base_col, settings)
	dsm.increase_ref_count(new_col.name)
	
	_return _super.init(dsm, base_col, new_col.name)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_private _method materialized_collection.init_copy()
	.dsm.increase_ref_count(.actual_table_name)
	_return _self
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method materialized_collection.origin_is_sw_collection?
	_return _false 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method materialized_collection.is_sw_collection?
	_return _true 
_endmethod
$

_pragma(classify_level=basic, topic={demo})
_private _method materialized_collection.init_from_serial(dsm, base_cols, name)
	_return _super.init_from_serial(dsm, base_cols, name)
_endmethod
$

_pragma(classify_level=basic, topic={demo})
_method materialized_collection.actual_collection
	_return .dsm.materialized_collection(.actual_table_name)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method materialized_collection.size_is_fast?
	_return _self.actual_collection.size_is_fast?
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method materialized_collection.size
	_return _self.actual_collection.size
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method materialized_collection.description
	_return _self.message(:description, _self.actual_collection.external_name)
_endmethod
$

_pragma(classify_level=basic, topic={demo})
_method materialized_collection.discard()
	_if .actual_table_name _isnt _unset
	_then
		_local c << .dsm.decrease_ref_count(.actual_table_name)
		_if c = 0
		_then 
			.dsm.discard_collection(.actual_table_name)
		_endif
		.actual_table_name << _unset
	_endif 
	_super.discard()
_endmethod
$

