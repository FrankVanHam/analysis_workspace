#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:root_collection)

_pragma(classify_level=basic, topic={analysis})
##
## Analysis collections that will yield one of the base
## collections that self was derived from.
## For example: say you start with a road, follow the topology
## to a hotel, filter on a type of hotel, then an additional
## rot collection can yield the roads that lead to the hotels
## you required.
## 
def_slotted_exemplar(:root_collection,
	{
		{:target_collection, _unset}
	},
	:base_follow_collection)
$

_pragma(classify_level=basic, topic={analysis})
_method root_collection.new(dsm, base_col, target_col)
	_return _clone.init(dsm, base_col, target_col)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_private _method root_collection.init(dsm, source_col, target_col)
	_if target_col.is_kind_of?(rwan:base_collection).not _then condition.raise(:error) _endif 
	.target_collection << target_col
	_return _super.init(dsm, source_col, _unset)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method root_collection.activate_editor_in(dialog, holder)
	_return dialog.edit_follow_root_dialog(holder,
					       .source_collection,
					       .target_collection)
_endmethod
$


_pragma(classify_level=restricted, topic={analysis})
_method root_collection.serial_slots()
	_local (keys, values) << _super.serial_slots()
	keys.add_all_last({:target_collection})
	values.add_all_last({.target_collection})
	_return keys, values
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method root_collection.init_from_serial(dsm, source_col, target_collection)
    _super.init_from_serial(dsm, source_col)
    .target_collection << target_collection
    _return _self 
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method root_collection.equals?(other)
	_return _self.is_class_of?(other) _andif 
		other.equals_in_details?(.source_collection, .target_collection)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method root_collection.equals_in_details?(source_col, target_col)
	_return _super.equals_in_details?(source_col) _andif
		.target_collection.equals?(target_col)
_endmethod
$


###################################################################################################################
_pragma(classify_level=basic, topic={analysis})
_method root_collection.editable?
	_return _true 
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method root_collection.expose()
	_return .target_collection.expose()
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method root_collection.read_stream(_optional filter)
	## Return my read_stream. If filter is set, the let the filter
	## filter my results. 
	#
	_local str << rwan:follow_root_read_stream.new(.source_collection, .target_collection)
	_if filter _isnt _unset
	_then
		_return filter.filter_stream(str)
	_else 
		_return str
	_endif 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method root_collection.discard()
	.target_collection << _unset
	_super.discard()
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method root_collection.display_tree_in(owner)
	_return owner.display_tree_for_root_collection(_self, .source_collection,
						       .target_collection)
_endmethod
$
