#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$


#remex(:base_follow_collection)
$

_pragma(classify_level=basic, topic={analysis})
##
## Base class for all classes that follow some path towards
## another collection.
def_slotted_exemplar(:base_follow_collection,
	{
		{:source_collection, _unset},
		{:target_ds_name,    _unset},
		{:target_table_name, _unset}
	},
	:base_record_collection)
$


_pragma(classify_level=basic, topic={analysis})
_method base_follow_collection.new()
	condition.raise(:error, :string, "Should not be invoked")
_endmethod
$


_pragma(classify_level=restricted, topic={analysis})
_private _method base_follow_collection.init(dsm, source_col, target_col)
	.source_collection << source_col
	
	.target_ds_name << target_col.dataset.original_dataset_name
	.target_table_name << target_col.name
	
	_return _super.init(dsm) 
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_follow_collection.init_copy()

	_return _super.init_copy()
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_abstract _method base_follow_collection.activate_editor_in(dialog, holder)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method base_follow_collection.serial_slots()
	_local (keys, values) << _super.serial_slots()
	keys.add_all_last({:source_collection, :target_ds_name, :target_table_name})
	values.add_all_last({.source_collection, .target_ds_name, .target_table_name})
	_return keys, values	
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method base_follow_collection.init_from_serial(dsm, source_col,
						target_ds_name, target_table_name)
    _super.init_from_serial(dsm)
    .source_collection << source_col
    .target_ds_name << target_ds_name
    .target_table_name << target_table_name
    _return _self 
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_private _method base_follow_collection.actual_collection
	_return gis_program_manager.databases[.target_ds_name].collections[.target_table_name]
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_follow_collection.equals?(other)
	_return _self.is_class_of?(other) _andif 
		other.equals_in_details?(.source_collection,
					 .target_ds_name, .target_table_name)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method base_follow_collection.equals_in_details?(source_col, target_ds_name, target_table_name)
	_return _super.equals_in_details?() _andif
		.source_collection.equals?(source_col) _andif
		.target_ds_name = target_ds_name _andif
		.target_table_name = target_table_name
_endmethod
$

###################################################################################################################

_pragma(classify_level=restricted, topic={analysis})
_method base_follow_collection.expose()
	_return _self.actual_collection
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method base_follow_collection.discard()
	.source_collection << .target_ds_name << .target_table_name << _unset
	_super.discard()
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_follow_collection.geometry_refs
	_return _self.geometry_refs_for(_self.expose())
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_follow_collection.ref_collections
	>> {.source_collection}
_endmethod
$
