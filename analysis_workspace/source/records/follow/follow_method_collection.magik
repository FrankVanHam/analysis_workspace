#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:follow_method_collection)

_pragma(classify_level=basic, topic={analysis})
##
## Analysis collection that performs some kind of method with
## some arguments on each record to yield the actual records we
## are interested in.
##
def_slotted_exemplar(:follow_method_collection,
	{
		{:methd, _unset}
	}, :base_follow_collection)
$

_pragma(classify_level=basic, topic={analysis})
_method follow_method_collection.new(dsm, source_col, methd)
	_return _clone.init(dsm, source_col, methd)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_private _method follow_method_collection.init(dsm, source_col, methd)
	.methd << methd

	_local (x, x, x, target) << _self.method_data(source_col, methd)
	
	_return _super.init(dsm, source_col, target)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_private _method follow_method_collection.method_data(source_col, methd)
	_local vec << source_col.expose().record_exemplar.rwan_methods[methd]
	_return _scatter vec
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method follow_method_collection.activate_editor_in(dialog, holder)
	_return dialog.edit_follow_method_dialog(holder,
						 .source_collection, .methd)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method follow_method_collection.serial_slots()
	_local (keys, values) << _super.serial_slots()
	keys.add_all_last({:methd})
	values.add_all_last({.methd})
	_return keys, values
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method follow_method_collection.init_from_serial(dsm, source_col,
					   methd)
    _super.init_from_serial(dsm, source_col)
    .methd << methd
    _return _self 
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method follow_method_collection.equals?(other)
	_return _self.is_class_of?(other) _andif 
		other.equals_in_details?(.source_collection,
					 .methd)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method follow_method_collection.equals_in_details?(source_col, methd)
	_return _super.equals_in_details?(source_col) _andif
		.methd = methd
_endmethod
$


###################################################################################################################

_pragma(classify_level=restricted, topic={analysis})
_method follow_method_collection.read_stream(_optional filter)
	## Return my read_stream. If filter is set, the let the filter
	## filter my results. 
	#
	_local (methd, args, external_name, target) << _self.method_data(.source_collection, .methd)
	_local str << rwan:follow_method_read_stream.new(.source_collection, methd, args)
	_if filter _isnt _unset
	_then
		_return filter.filter_stream(str)
	_else 
		_return str
	_endif 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method follow_method_collection.actual_collection
	_local (methd, args, external_name, target) << _self.method_data(.source_collection, .methd)
	_return target
_endmethod
$


_pragma(classify_level=restricted, topic={analysis})
_method follow_method_collection.discard()
	.methd << _unset
	_super.discard()
_endmethod
$


_pragma(classify_level=advanced, topic={analysis})
_method follow_method_collection.display_tree_in(owner)
	_return owner.display_tree_for_follow_method_analysis(_self, .source_collection,
						       _self.expose(), .methd)
_endmethod
$
