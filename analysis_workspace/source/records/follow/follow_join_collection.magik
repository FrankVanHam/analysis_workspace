#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$


#remex(:follow_join_collection)

_pragma(classify_level=basic, topic={analysis})
##
## Analysis collection that follows over a join to another
## collection
##
def_slotted_exemplar(:follow_join_collection,
	{
		{:join_field_name, _unset}
	},
	:base_follow_collection)
$

_pragma(classify_level=basic, topic={analysis})
_method follow_join_collection.new(dsm, source_col, join_field_name)
	_return _clone.init(dsm, source_col, join_field_name)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_private _method follow_join_collection.init(dsm, source_col, join_field_name)
	.join_field_name << join_field_name
	
	_return _super.init(dsm, source_col)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method follow_join_collection.activate_editor_in(dialog, holder)
	_return dialog.edit_follow_join_dialog(holder,
					       .source_collection, .join_field_name)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method follow_join_collection.serial_slots()
	_local (keys, values) << _super.serial_slots()
	keys.add_all_last({:join_field_name})
	values.add_all_last({.join_field_name})
	_return keys, values
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method follow_join_collection.init_from_serial(dsm, source_col,
					 join_field_name)
    _super.init_from_serial(dsm, source_col)
    .join_field_name << join_field_name
    _return _self 
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method follow_join_collection.equals?(other)
	_return _self.is_class_of?(other) _andif 
		other.equals_in_details?(.source_collection,
					 .join_field_name)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method follow_join_collection.equals_in_details?(source_col, join_field_name)
	_return _super.equals_in_details?(source_col) _andif
		.join_field_name = join_field_name
_endmethod
$


###################################################################################################################

_pragma(classify_level=restricted, topic={analysis})
_method follow_join_collection.actual_collection
	_local sw_col << .source_collection.expose()
	_return sw_col.field(.join_field_name).result_table(sw_col.dataset)
_endmethod
$


_pragma(classify_level=restricted, topic={analysis})
_method follow_join_collection.read_stream(_optional filter)
	## Return my read_stream. If filter is set, the let the filter
	## filter my results. 
	#
	_local str << rwan:follow_join_read_stream.new(.source_collection, .join_field_name)
	_if filter _isnt _unset
	_then
		_return filter.filter_stream(str)
	_else 
		_return str
	_endif 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method follow_join_collection.discard()
	.join_field_name << _unset
	_super.discard()
_endmethod
$


_pragma(classify_level=advanced, topic={analysis})
_method follow_join_collection.display_tree_in(owner)
	_return owner.display_tree_for_follow_join_analysis(_self, .source_collection,
						     _self.expose(), .join_field_name)
_endmethod
$
