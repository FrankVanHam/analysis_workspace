#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:follow_topology_collection)

_pragma(classify_level=basic, topic={analysis})
##
## Analysis collection that will follow the topology of a
## geometry of the base collection to another collection.
##
def_slotted_exemplar(:follow_topology_collection,
	{
		{:source_geom_name,  _unset},
		{:actual_ds_name,    _unset},
		{:actual_table_name, _unset}
	}, :base_follow_collection)
$


_pragma(classify_level=basic, topic={analysis})
_method follow_topology_collection.new(dsm, source_col, source_geom_name, actual_col)
	_return _clone.init(dsm, source_col, source_geom_name, actual_col)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method follow_topology_collection.init(dsm, source_col, source_geom_name, actual_col)
	.source_geom_name << source_geom_name
	
	_if actual_col _isnt _unset
	_then 
		.actual_ds_name << actual_col.dataset.original_dataset_name
		.actual_table_name << actual_col.name
	_endif
	
	# protect agains nonsense
	source_col.assert_geom_name(.source_geom_name)
	_return _super.init(dsm, source_col)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method follow_topology_collection.activate_editor_in(dialog, holder)
	_return dialog.edit_follow_topology_dialog(holder,
						   .source_collection,
						   .source_geom_name, _self.expose())
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method follow_topology_collection.serial_slots()
	_local (keys, values) << _super.serial_slots()
	keys.add_all_last({:geom_name, :actual_ds_name, :actual_table_name})
	values.add_all_last({.source_geom_name, .actual_ds_name, .actual_table_name})
	_return keys, values	
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method follow_topology_collection.init_from_serial(dsm, source_col,
					     source_geom_name, actual_ds_name, actual_table_name)
	_super.init_from_serial(dsm, source_col)
    .source_geom_name << source_geom_name
    .actual_ds_name << actual_ds_name
    .actual_table_name << actual_table_name
    _return _self 
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method follow_topology_collection.equals?(other)
	_return _self.is_class_of?(other) _andif
		other.equals_in_details?(.source_collection, .source_geom_name,
					 .actual_ds_name, .actual_table_name)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method follow_topology_collection.equals_in_details?(source_col, source_geom_name,
					       actual_ds_name, actual_table_name)
	_return _super.equals_in_details?(source_col) _andif
		.actual_ds_name = actual_ds_name _andif
		.actual_table_name = actual_table_name _andif
		.source_geom_name = source_geom_name
_endmethod
$

###################################################################################################################

_pragma(classify_level=basic, topic={analysis})
_private _method follow_topology_collection.actual_collection
	_return gis_program_manager.databases[.actual_ds_name].collections[.actual_table_name]
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method follow_topology_collection.editable?
	_return _true 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method follow_topology_collection.read_stream(_optional filter)
	## Return my read_stream. If filter is set, the let the filter
	## filter my results. 
	#
	_local str << rwan:topology_read_stream.new(.source_collection, .source_geom_name, _self.expose())
	_if filter _isnt _unset
	_then
		_return filter.filter_stream(str)
	_else 
		_return str
	_endif 
_endmethod
$



#_pragma(classify_level=basic, topic={analysis})
#_iter _method follow_topology_collection.fast_elements()
#	_local done << large_record_register.new(100)
#	_for i_rec _over _self.base_collection.fast_elements()
#	_loop
#		_for i_rwo _over _self.process_all_connected(i_rec, done)
#		_loop
#			_loopbody(i_rwo)
#		_endloop
#	_endloop
#_endmethod
#$
#
#_pragma(classify_level=restricted, topic={analysis})
#_private _iter _method follow_topology_collection.process_all_connected(rec, done)
#	_dynamic !root_query!
#	_local geom << rec.geometry(.source_geom_name)
#	_if geom _is _unset _then _return _endif 
#	
#	rwo_type << _self.base_collection.expose().name
#	_for i_con _over _self.all_connected(geom)
#	_loop
#		_local rwo << i_con.rwo
#		_if rwo _isnt _unset _andif
#		    _not done.includes?(rwo)
#		_then
#			_if !root_query! _isnt _unset
#			_then
#				!root_query![rwo_type] << rec
#			_endif 
#			_loopbody(rwo)
#			done.add(rwo)
#		_endif 
#	_endloop
#_endmethod
#$
#
#_pragma(classify_level=restricted, topic={analysis})
#_private _iter _method follow_topology_collection.all_connected(geom)
#	_for i_con _over geom.all_connected_geometry().fast_elements()
#	_loop
#		_if i_con.rwo_type _is .target_table_name
#		_then
#			_loopbody(i_con)
#		_endif
#	_endloop 
#_endmethod
#$
#
#_pragma(classify_level=basic, topic={analysis})
#_method follow_topology_collection.description(translator)
#	_local base_name   << translator.name_for_collection(_self.base_collection)
#	_local target_name << _self.target_collection.external_name
#	_local geom_name << _self.base_collection.expose().field(.source_geom_name).external_name
#	
#	_return _self.message(:description, target_name, geom_name, base_name)
#_endmethod
#$

_pragma(classify_level=advanced, topic={analysis})
_method follow_topology_collection.display_tree_in(owner)
	_return owner.display_tree_for_follow_topology_collection(_self, .source_collection, _self.expose(), .source_geom_name)
_endmethod
$
