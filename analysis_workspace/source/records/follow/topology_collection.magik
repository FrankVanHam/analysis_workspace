##
## File            : $File$
## SCM             : $URL$
##
## Copyright       : Realworld Systems
##                   e-mail  : support@realworld-systems.com
##                   address : Venusstraat 17, 4105 JH Culemborg, The Netherlands
##                   tel     : +31(0)345 614406
##                   fax     : +31(0)345 614319
##
## Contains        : 
##
##
## Date written    : 2014-12-24
## Date changed    : $Date$
## Revision        : $Rev$

_package rwan
$

#remex(:topology_collection)

_pragma(classify_level=basic, topic={analysis})
##
## Analysis collection that will follow the topology of a
## geometry of the base collection to another collection.
##
def_slotted_exemplar(:topology_collection,
	{
		{:geom_name, _unset}
	}, :base_follow_collection)
$


_pragma(classify_level=basic, topic={analysis})
_method topology_collection.new(dsm, base_col, geom_name, target_col)
	_return _clone.init(dsm, base_col, geom_name, target_col)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method topology_collection.init(dsm, base_col, geom_name, target_col)
	.geom_name << geom_name
	_return _super.init(dsm, base_col, target_col)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method topology_collection.editable?
	_return _true 
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method topology_collection.activate_editor_in(dialog, holder)
	dialog.edit_follow_topology_dialog(holder,
					 _self.base_collection,
					 .geom_name, _self.target_collection)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method topology_collection.update(geom_name, target_col)
	.target_ds_name << target_col.dataset.original_dataset_name
	.target_table_name << target_col.name
	.geom_name << geom_name
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method topology_collection.serial_slots()
	_local (keys, values) << _super.serial_slots()
	keys.add_all_last({:geom_name})
	values.add_all_last({.geom_name})
	_return keys, values	
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method topology_collection.init_from_serial(dsm, base_cols, target_ds_name, target_table_name, geom_name)
    _super.init_from_serial(dsm, base_cols, target_ds_name, target_table_name)
    .geom_name << geom_name
    _return _self 
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method topology_collection.equals?(other)
	_return _self.is_class_of?(other) _andif
		other.equals_in_details?(.base_collections, .target_ds_name, .target_table_name, .geom_name)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method topology_collection.equals_in_details?(base_cols, target_ds_name, target_table_name, geom_name)
	_return _super.equals_in_details?(base_cols, target_ds_name, target_table_name) _andif 
		.geom_name = geom_name
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_iter _method topology_collection.fast_elements()
	_local done << large_record_register.new(100)
	_for i_rec _over _self.base_collection.fast_elements()
	_loop
		_for i_rwo _over _self.process_all_connected(i_rec, done)
		_loop
			_loopbody(i_rwo)
		_endloop
	_endloop
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _iter _method topology_collection.process_all_connected(rec, done)
	_dynamic !root_query!
	_local geom << rec.geometry(.geom_name)
	_if geom _is _unset _then _return _endif 
	
	rwo_type << _self.base_collection.expose().name
	_for i_con _over _self.all_connected(geom)
	_loop
		_local rwo << i_con.rwo
		_if rwo _isnt _unset _andif
		    _not done.includes?(rwo)
		_then
			_if !root_query! _isnt _unset
			_then
				!root_query![rwo_type] << rec
			_endif 
			_loopbody(rwo)
			done.add(rwo)
		_endif 
	_endloop
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _iter _method topology_collection.all_connected(geom)
	_for i_con _over geom.all_connected_geometry().fast_elements()
	_loop
		_if i_con.rwo_type _is .target_table_name
		_then
			_loopbody(i_con)
		_endif
	_endloop 
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method topology_collection.description
	_return _self.message(:description, _self.target_collection.external_name,
			      _self.base_collection.expose().external_name)
_endmethod
$

