#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:trace_collection)

_pragma(classify_level=basic, topic={analysis})
##
## Analysis collection that will trace the topology of a
## geometry of the base collection to another collection. Stop
## predicates can apply, even a maximum length.
##
def_slotted_exemplar(:trace_collection,
	{
		{:geom_name,       _unset},
		{:stop_predicates, _unset},
		{:max_length,      _unset}
	}, :base_follow_collection)
$


_pragma(classify_level=basic, topic={analysis})
_method trace_collection.new(dsm, base_col, geom_name, target_col, stop_preds, max_length)
	_return _clone.init(dsm, base_col, geom_name, target_col, stop_preds, max_length)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method trace_collection.init(dsm, base_col, geom_name, target_col, stop_preds, max_length)
	.geom_name       << geom_name
	.stop_predicates << _self.convert_stop_predicates(stop_preds)
	.max_length      << max_length
	_return _super.init(dsm, base_col, target_col)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method trace_collection.convert_stop_predicates(stop_preds)
	_if stop_preds _is _unset
	_then
		_return _unset
	_else
		_local preds << property_list.new()
		_for i_col, i_pred _over stop_preds.fast_keys_and_elements()
		_loop
			preds[i_col.name] << i_pred
		_endloop
		_return preds
	_endif 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method trace_collection.edit_stop_predicates
	_if .stop_predicates _is _unset
	_then
		_return _unset
	_else
		_local preds << property_list.new()
		_local ds << gis_program_manager.databases[.target_ds_name]
		_for i_name, i_pred _over .stop_predicates.fast_keys_and_elements()
		_loop
			_local col << ds.collections[i_name]
			_if col _isnt _unset
			_then 
				preds[col] << i_pred
			_endif
		_endloop
		_return preds 
	_endif 
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method trace_collection.editable?
	_return _true
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method trace_collection.activate_editor_in(dialog, holder)
	_return dialog.edit_follow_trace_dialog(holder,
						_self.base_collection,
						.geom_name, _self.edit_stop_predicates, .max_length,
						_self.target_collection)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method trace_collection.update(geom_name, stop_predicates, max_length, target_col)
	.target_ds_name << target_col.dataset.original_dataset_name
	.target_table_name << target_col.name
	.geom_name << geom_name
	.stop_predicates << _self.convert_stop_predicates(stop_predicates)
	.max_length << max_length
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method trace_collection.serial_slots()
	_local (keys, values) << _super.serial_slots()
	keys.add_all_last({:geom_name, :stop_preds, :max_length})
	values.add_all_last({.geom_name, _self.stop_predicates_eval_string, .max_length})
	_return keys, values	
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method trace_collection.stop_predicates_eval_string
	_local s << internal_text_output_stream.new()
	.stop_predicates.store_on(s)
	_return s.string
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method trace_collection.init_from_serial(dsm, base_cols, target_ds_name, target_table_name, geom_name, stop_preds_string, max_length)
    _super.init_from_serial(dsm, base_cols, target_ds_name, target_table_name)
    .geom_name       << geom_name
    .stop_predicates << stop_preds_string.evaluate()
    .max_length      << max_length
    _return _self 
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method trace_collection.equals?(other)
	_return _self.is_class_of?(other) _andif
		other.equals_in_details?(.base_collections, .target_ds_name, .target_table_name, .geom_name, .stop_predicates, .max_length)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method trace_collection.equals_in_details?(base_cols, target_ds_name, target_table_name, geom_name, stop_preds, max_length)
	_return _super.equals_in_details?(base_cols, target_ds_name, target_table_name) _andif 
		.geom_name = geom_name _andif
		.max_length = max_length _andif
		_self.predicates_equal?(.stop_predicates, stop_preds)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method trace_collection.predicates_equal?(preds1, preds2)
	_if preds1.size <> preds2.size _then _return _false _endif
	_for i_key, i_elem _over preds1.fast_keys_and_elements()
	_loop
		_local elem2 << preds2[i_key]
		_if i_elem <> elem2 _then _return _false _endif
	_endloop
	_return _true 
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_iter _method trace_collection.fast_elements()
	_local done << large_record_register.new(100)
	_for i_rec _over _self.base_collection.fast_elements()
	_loop
		_for i_rwo _over _self.process_trace(i_rec, done)
		_loop
			_loopbody(i_rwo)
		_endloop
	_endloop
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _iter _method trace_collection.process_trace(rec, done)
	_dynamic !root_query!
	_local geom << rec.geometry(.geom_name)
	_if geom _is _unset _then _return _endif 
	
	rwo_type << _self.base_collection.expose().name
	_for i_con _over _self.trace(geom)
	_loop
		_if _not done.includes?(i_con)
		_then
			_if !root_query! _isnt _unset
			_then
				!root_query![rwo_type] << rec
			_endif 
			_loopbody(i_con)
			done.add(i_con)
		_endif 
	_endloop
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method trace_collection.trace_stop_predicates
	_if .stop_predicates _is _unset
	_then
		_return _unset
	_else
		_local preds << property_list.new()
		_for i_name, i_pred _over .stop_predicates.fast_keys_and_elements()
		_loop
			preds[i_name] << {i_pred}
		_endloop 
		_return preds
	_endif 
_endmethod
$


_pragma(classify_level=restricted, topic={analysis})
_private _iter _method trace_collection.trace(geom)
	_local nf << network_follower.new(50)
	_for i_node _over geom.all_nodes()
	_loop
		nf.trace_out(i_node, :stop_predicates, _self.trace_stop_predicates, :max_cost, _self.max_length_value)
		_local travelled << nf.visited_rwos
		_for i_rec _over travelled.fast_elements()
		_loop
			_if i_rec.rwo_type _is .target_table_name
			_then
				_loopbody(i_rec)
			_endif
		_endloop
	_endloop 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method trace_collection.max_length_value
	_if .max_length _isnt _unset
	_then 
		_local world << _self.world
		_local length << .max_length.value_in(world.unit)
		_return length
	_else
		_return _unset
	_endif 
_endmethod
$


_pragma(classify_level=basic, topic={analysis})
_method trace_collection.description(translator)
	_local base_name   << translator.name_for_collection(_self.base_collection)
	_local target_name << _self.target_collection.external_name
	_local geom_name << _self.base_collection.expose().field(.geom_name).external_name
	
	_return _self.message(:description, target_name, geom_name, base_name)
_endmethod
$

