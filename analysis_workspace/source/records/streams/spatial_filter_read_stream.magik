#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:spatial_filter_read_stream)
$

_pragma(classify_level=basic, topic={analysis, collections})
def_slotted_exemplar(:spatial_filter_read_stream,
	## stream that filters the sourcestream on spatial predicate.
	{
		{:source_stream,    _unset},
		{:source_geom_name, _unset},
		{:operator,         _unset},
		{:filter_gs,        _unset}
	}, :input_stream_with_unget_mixin)
$

_pragma(classify_level=basic, topic={analysis, collections})
spatial_filter_read_stream.define_shared_constant(
	:supported_operations,
	{:disjoint_from ,:interacting_with ,:touching ,:dividing ,:overlaying ,:overlapping ,:within ,:containing ,:equal_to},
	:private)
$
	

_pragma(classify_level=basic, topic={analysis, collections})
_method spatial_filter_read_stream.new(source_stream, source_geom_name, operator, filter_gs)
	_return _clone.init(source_stream, source_geom_name, operator, filter_gs)
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_private _method spatial_filter_read_stream.init(source_stream, source_geom_name, operator, filter_gs)
	.source_stream << source_stream
	.source_geom_name << source_geom_name
	
	_if _self.supported_operations.includes?(operator).not
	_then
		condition.raise(:error, :string, write_string("Operator ", operator, " is not supported"))
	_endif
	
	.operator  << operator
	.filter_gs << filter_gs
	_return _self 
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_method spatial_filter_read_stream.get()
	_loop
		_local rec << .source_stream.get()
		_if rec _is _unset _then _return _unset _endif #exhausted

		_local geom << rec.geometry(.source_geom_name)
		_if geom _isnt _unset
		_then 	
			_local meth << write_string("match_", .operator, "()").as_symbol()
			_local match? << _self.perform_private(meth, geom)
			_if match?
			_then
				_return rec
			_endif
		_endif
	_endloop 
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_private _method spatial_filter_read_stream.match_disjoint_from(geom)
	## Test if geom is disjoint from all of the filters.
	_return .filter_gs.interacts_with?(geom).not
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_private _method spatial_filter_read_stream.match_interacting_with(geom)
	## Test if geom interacts with any of the filter geometries.
	_return _self.match_any?(geom, :|interacts_with?()|)
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_private _method spatial_filter_read_stream.match_touching(geom)
	_return _self.match_any?(geom, :|touches?()|)
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_private _method spatial_filter_read_stream.match_dividing(geom)
	_return _self.match_any?(geom, :|divides?()|)
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_private _method spatial_filter_read_stream.match_overlaying(geom)
	_return _self.match_any?(geom, :|overlays?()|)
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_private _method spatial_filter_read_stream.match_overlapping(geom)
	_return _self.match_any?(geom, :|overlaps?()|)
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_private _method spatial_filter_read_stream.match_within(geom)
	_return _self.match_any?(geom, :|within?()|)
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_private _method spatial_filter_read_stream.match_containing(geom)
	_return _self.match_any?(geom, :|contains?()|)
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_private _method spatial_filter_read_stream.match_equal_to(geom)
	_return _self.match_any?(geom, :|equal_to?()|)
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_private _method spatial_filter_read_stream.match_any?(geom, test_meth)
	 _for i_geom _over .filter_gs.fast_elements()
	 _loop
		 _if geom.perform(test_meth, i_geom)
		 _then
			 _return _true
		 _endif
	 _endloop
	 _return _false
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_method spatial_filter_read_stream.size_is_fast?
	_return _false 
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_method spatial_filter_read_stream.close()
	.source_stream.close()
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_method spatial_filter_read_stream.reset()
	.source_stream.reset()
_endmethod
$
