#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:spatial_filter_read_stream)
$

_pragma(classify_level=basic, topic={analysis, collections})
def_slotted_exemplar(:spatial_filter_read_stream,
	##
	{
		{:source_stream,      _unset},
		{:source_geom_name,   _unset},
		{:source_rec,         _unset},
		{:operator,           _unset},
		{:filter_geom_stream, _unset},
		{:filter_geom,        _unset},
		{:operator_mapping,   _unset}
	}, :input_stream_with_unget_mixin)
$

_pragma(classify_level=basic, topic={analysis, collections})
_method spatial_filter_read_stream.new(source_stream, source_geom_name, operator, filter_geom_stream)
	_return _clone.init(source_stream, source_geom_name, operator, filter_geom_stream)
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_private _method spatial_filter_read_stream.init(source_stream, source_geom_name, operator, filter_geom_stream)
	.operator_mapping << geometry_set.sys!perform(:spatial_tests)
	
	.source_stream << source_stream
	.source_geom_name << source_geom_name
	
	_if .operator_mapping.includes_key?(operator).not
	_then
		condition.raise(:error, :string, write_string("Operator ", operator, " is not supported"))
	_endif
	
	.operator << operator
	.filter_geom_stream << filter_geom_stream
	_return _self 
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_method spatial_filter_read_stream.get()
	_if .operator _is :disjoint_from
	_then
		_return _self.get_all_to_agree()
	_else
		_return _self.get_one_to_agree()
	_endif 
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_method spatial_filter_read_stream.get_one_to_agree()
	_loop
		_if .source_rec _is _unset
		_then
			.source_rec << .source_stream.get()
			_if .source_rec _is _unset _then _return _unset _endif #exhausted
		_endif
		_if .filter_geom _is _unset
		_then
			.filter_geom << .filter_geom_stream.get()
			_if .filter_geom _is _unset _then _return _unset _endif # no filter specified
		_else
			# continue with filter stream
			.filter_geom << .filter_geom_stream.get()
			_if .filter_geom _is _unset
			_then
				# filter exhausted, move to next source
				.source_rec << _unset
				.filter_geom_stream.reset()
			_endif
		_endif
		_if .source_rec _isnt _unset _andif .filter_geom _isnt _unset
		_then
			_if _self.matches?()
			_then
				# a match, now move on the the next record.
				_local rec << .source_rec
				.source_rec << _unset
				.filter_geom_stream.reset()
				_return rec
			_endif
		_endif 
	_endloop
	_return _unset 
_endmethod
$


_pragma(classify_level=basic, topic={analysis, collections})
_method spatial_filter_read_stream.get_all_to_agree()
	_loop
		_if .source_rec _is _unset
		_then
			.source_rec << .source_stream.get()
			_if .source_rec _is _unset _then _return _unset _endif #exhausted
		_endif
		_if .filter_geom _is _unset
		_then
			.filter_geom << .filter_geom_stream.get()
			_if .filter_geom _is _unset _then _return _unset _endif # no filter specified
		_else
			# continue with filter stream
			.filter_geom << .filter_geom_stream.get()
			_if .filter_geom _is _unset
			_then
				# filter exhausted, so we all agreed that source is good
				_local rec << .source_rec
				.source_rec << _unset
				.filter_geom_stream.reset()
				_return rec
			_endif
		_endif
		_if .source_rec _isnt _unset _andif .filter_geom _isnt _unset
		_then
			_if _self.matches?().not
			_then
				# failed to match. Move to next source
				.source_rec << _unset
				.filter_geom_stream.reset()
			_endif
		_endif 
	_endloop
	_return _unset 
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_private _method spatial_filter_read_stream.matches?()
	_local geom << .source_rec.geometry(.source_geom_name)
	_if geom _isnt _unset
	_then
		_return geom.perform(.operator_mapping[.operator], .filter_geom)
	_else
		_return _false
	_endif 
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_method spatial_filter_read_stream.size_is_fast?
	_return _false 
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_method spatial_filter_read_stream.close()
	
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_method spatial_filter_read_stream.reset()
	.source_stream.reset()
	.filter_geom_stream.reset()
_endmethod
$
