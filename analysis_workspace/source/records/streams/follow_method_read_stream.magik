#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:follow_method_read_stream)
$

_pragma(classify_level=basic, topic={analysis, collections})
def_slotted_exemplar(:follow_method_read_stream,
	{
		{:methd,  _unset},
		{:args,   _unset}
	}, :follow_base_trace_read_stream)
$

_pragma(classify_level=basic, topic={analysis, collections})
_method follow_method_read_stream.new(source_col, methd, args)
	_return _clone.init(source_col, methd, args)
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_private _method follow_method_read_stream.init(source_col, methd, args)
	.methd << methd
	.args << args
	_return _super.init(source_col)
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_private _method follow_method_read_stream.new_target_stream()
	_loop 
		_local source << .source_stream.get()
		_if source _is _unset
		_then
			# exhausted
			_return _unset
		_else
			_local joins << _self.followed_records(source)
			_if joins.empty?.not
			_then
				_self.add_root(source)
				
				_return joins.read_stream() 
			_endif 
		_endif
	_endloop 
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_private _method follow_method_read_stream.followed_records(source)
	_local values
	_try
		values << source.perform(.methd, _scatter .args)
	_when error
		values << {}
	_endtry 
	_return values
_endmethod
$
