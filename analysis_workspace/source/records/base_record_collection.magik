#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:base_record_collection)
$

_pragma(classify_level=basic, topic={analysis})
##
## Bae collection for collections that hold records (rather
## than geometry or areas).
##
def_slotted_exemplar(:base_record_collection,
	{},
	:base_collection)
$

## Add to the club of things that can hold records
record_collection_mixin.add_child(base_collection)
$

_pragma(classify_level=basic, topic={analysis})
_method base_record_collection.is_record_collection?
	_return _true  
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_record_collection.buffer(geom_name, distance, _optional corner_style, end_style)
	_return sw:get_global_value(@rwan:buffer_collection).new(.dsm, _self, geom_name, distance, corner_style, end_style)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_record_collection.distance_collection(geom_name, distance, arg, inverse?)
	_if arg.convert_to_geometry_is_fast?
	_then
		_return sw:get_global_value(@rwan:distance_area_filter_collection).new(.dsm, _self, geom_name, distance, arg, inverse?)
	_else 
		_return sw:get_global_value(@rwan:distance_filter_collection).new(.dsm, _self, geom_name, distance, arg, inverse?)
	_endif 
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_record_collection.spatial_collection(geom_name)
	## Return a lazy evaluated spatial collection.
	_return sw:get_global_value(@rwan:spatial_collection).new(.dsm, _self, geom_name)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_record_collection.follow_join(join_name)
	_return sw:get_global_value(@rwan:join_collection).new(.dsm, _self, join_name)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_record_collection.follow_method(target_table, method_name, args)
	_return sw:get_global_value(@rwan:method_collection).new(.dsm, _self, target_table, method_name, args)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_record_collection.union(other)
	_return sw:get_global_value(@rwan:union_collection).new(.dsm, _self,other)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_record_collection.xor(other)
	_return sw:get_global_value(@rwan:xor_collection).new(.dsm, _self,other)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_record_collection.root(table)
	_return sw:get_global_value(@rwan:root_collection).new(.dsm, _self,table)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_record_collection.intersection(other)
	_return sw:get_global_value(@rwan:intersection_collection).new(.dsm, _self,other)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_record_collection.subtraction(other)
	_return sw:get_global_value(@rwan:subtraction_collection).new(.dsm, _self,other)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_record_collection.filter_by_geometry(geom_name, selector, arg)
	_return sw:get_global_value(@rwan:spatial_filter_collection).new(.dsm, _self, geom_name, selector, arg)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_record_collection.follow_topology(geom_name, target_col)
	_return sw:get_global_value(@rwan:topology_collection).new(.dsm, _self, geom_name, target_col)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_record_collection.follow_trace(geom_name, target_col, stop_predicates, max_length)
	_return sw:get_global_value(@rwan:trace_collection).new(.dsm, _self, geom_name, target_col, stop_predicates, max_length)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_record_collection.filter_by_predicate(pred)
	_return sw:get_global_value(@rwan:predicate_filter_collection).new(.dsm, _self, pred)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_abstract _method base_record_collection.includes?(rec)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_record_collection.convert_to_geometry_filtered_by_geometry(geom_name, selector, args, _optional bounds)
	## Subclasses should try to optimize this call to filter on
	## geometry. Backstop method will loop over all records and get
	## the geometry.
	#show(_self, "Unoptimized convert_to_geometry_filtered_by_geometry")
	_local gs << geometry_set.new()
	_for i_rec _over _self.fast_elements()
	_loop
		_local sub_gs << geometry_set.new()
		_if geom_name _isnt _unset
		_then 
			_local geom << i_rec.geometry(geom_name)
			_if geom _isnt _unset 
			_then
				sub_gs.add(geom)
			_endif
		_else
			_for i_geom _over i_rec.all_geometry(_false)
			_loop
				sub_gs.add(i_geom)
			_endloop 
		_endif
		_if bounds _isnt _unset
		_then 
			sub_gs << sub_gs.select(:bounds_interacting_with, bounds)
		_endif
		sub_gs << sub_gs.select(selector, args)
		gs.add_all(sub_gs)
	_endloop
	_return gs
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_record_collection.convert_to_geometry(_optional geom_name, bounds)
	#show(_self, col, "Unoptimized convert_to_geometry")
	_local gs << geometry_set.new()
	_for i_rec _over _self.fast_elements()
	_loop
		_if geom_name _isnt _unset
		_then 
			_local geom << i_rec.geometry(geom_name)
			_if geom _isnt _unset _andif
			    (bounds _is _unset _orif
			     bounds.interacts_with?(geom))
				_then 
					gs.add(geom)
				_endif 
		_else
			_for i_geom _over i_rec.all_geometry(_false)
			_loop
				_if bounds _is _unset _orif
				    bounds.interacts_with?(i_geom)
				_then 
					gs.add(i_geom)
				_endif 
			_endloop 
		_endif 
	_endloop
	_return gs
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_abstract _method base_record_collection.includes?(rec)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_record_collection.size
	#show(_self, "Unoptimized size")
	_local c << 0
	_for i_rec _over _self.fast_elements()
	_loop
		c +<< 1
	_endloop
	_return c
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_record_collection.size_filtered_by_predicate(pred)
	#show(_self, "Unoptimized size_filtered_by_predicate")
	_local c << 0
	_for i_rec _over _self.fast_elements_filtered_by_predicate(pred)
	_loop
		c +<< 1
	_endloop
	_return c
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_record_collection.size_is_fast_filtered_by_predicate?(pred)
	_return _false
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_record_collection.predicate_filtered_read_stream(pred)
	#show(_self, "Unoptimized predicate_filtered_read_stream")
	_return sw:get_global_value(@rwan:predicate_filter_read_stream).new(_self.read_stream(), pred)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_iter _method base_record_collection.fast_elements_filtered_by_predicate(pred)
	## Subclasses should try to optimize this call to filter on
	## predicate. Backstop method will loop over all records and
	## test the predicate.
	
	#show(_self, "Unoptimized fast_elements_filtered_by_predicate")
	_for i_rec _over _self.fast_elements()
	_loop
		_if pred.test?(i_rec)
		_then
			_loopbody(i_rec)
		_endif 
	_endloop
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_record_collection.size_for_geometry(geom_name)
	#show(_self, "Unoptimized size_for_geometry")
	_local c << 0
	_for i_rec _over _self.fast_elements()
	_loop
		_if i_rec.geometry(geom_name) _isnt _unset
		_then 
			c +<< 1
		_endif 
	_endloop
	_return c
_endmethod
$
_pragma(classify_level=basic, topic={analysis})
_method base_record_collection.size_filtered_by_geometry(geom_name, selector, arg)
	#show(_self, "Unoptimized size_filtered_by_geometry")
	_local c << 0
	_for i_rec _over _self.fast_elements_filtered_by_geometry(geom_name, selector, arg)
	_loop
		c +<< 1
	_endloop
	_return c
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_iter _method base_record_collection.fast_elements_filtered_by_geometry(geom_name, selector, arg)
	#show(_self, "Unoptimized fast_elements_filtered_by_geometry")
	_for i_rec _over _self.fast_elements()
	_loop
		_local geom << i_rec.geometry(geom_name)
		_if geom _is _unset _then _continue _endif
		
		_local gs << geometry_set.new_with(geom)
		_if gs.select(selector, arg).empty?.not
		_then
			_loopbody(i_rec)
		_endif 
	_endloop
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_method base_record_collection.read_stream()
	_if _self.size_is_fast? _andif
	    _self.size < 100
	_then
		_return sw:small_iter_stream.new(_self, :|fast_elements()|)
	_else 
		_return sw:large_iter_stream.new(_self, :|fast_elements()|)
	_endif 
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_method base_record_collection.int!predicated_read_stream(pred)
	_return _self.predicate_filtered_read_stream(pred)
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_abstract _method base_record_collection.includes?(a_rec)
	
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_iter _method base_record_collection.fast_elements()
	_for i_rec _over _self.actual_collection.fast_elements()
	_loop
		_loopbody(i_rec)
	_endloop
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_iter _method base_record_collection.elements()
	_for i_rec _over _self.fast_elements()
	_loop
		_loopbody(i_rec)
	_endloop 
_endmethod
$


_pragma(classify_level=basic, topic={analysis, collections})
_method base_record_collection.an_element()
	_for i_rec _over _self.fast_elements()
	_loop
		_return i_rec
	_endloop
_endmethod
$



