#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$


#remex(:intersection_collection)
$

_pragma(classify_level=basic, topic={analysis})
##
## Analysis collection that will do an intersection of the
## base collections.
def_slotted_exemplar(:intersection_collection,
	{}, :base_binary_op_collection)
$

message_handler.new(:intersection_collection).add_use(:base_binary_op_collection)
$

_pragma(classify_level=basic, topic={analysis})
_method intersection_collection.operation
	_return :intersection
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_iter _method intersection_collection.do!fast_elements(the_method, _gather args)
	_for i_rec _over _self.base_collection.perform_iter( the_method, _scatter args)
	_loop
		_if _self.other_collection.includes?(i_rec)
		_then
			_loopbody(i_rec)
		_endif 
	_endloop
_endmethod
$
#
#_pragma(classify_level=restricted, topic={analysis, collections})
#_iter _method intersection_collection.read_stream()
#	_local base_stream << _self.base_collection.read_stream()
#	_local other_stream << _self.other_collection
#	
#	_return _self.combining_read_stream(base_stream, other_collection)
#_endmethod
#$
#
#_pragma(classify_level=restricted, topic={analysis})
#_method intersection_collection.predicate_filtered_read_stream(pred)
#	_local base_stream << _self.base_collection.predicate_filtered_read_stream(pred)
#	_local other_stream << _self.other_collection
#	
#	_return _self.combining_read_stream(base_stream, other_stream)
#_endmethod
#$
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#_pragma(classify_level=basic, topic={analysis, collections})
#_method intersection_collection.spatial_filtered_read_stream(geom_name, selector, args)
#	_local base_stream << _self.base_collection.spatial_filtered_read_stream(geom_name, selector, args)
#	_local other_stream << _self.other_collection
#	
#	_return _self.combining_read_stream(base_stream, other_stream)
#_endmethod
#$
#
#_pragma(classify_level=restricted, topic={analysis})
#_method intersection_collection.combining_read_stream(base_stream, other_collection)
#	_return intersection_read_stream.new(base_stream, other_collection)
#_endmethod
#$
