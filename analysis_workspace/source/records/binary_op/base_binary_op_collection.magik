#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:base_binary_op_collection)
$

_pragma(classify_level=basic, topic={analysis})
##
## Base collection for binary operations on a analysis
## collection that holds records.
##
def_slotted_exemplar(:base_binary_op_collection,
	{},
	:base_record_collection)
$


_pragma(classify_level=basic, topic={analysis})
_method base_binary_op_collection.new(dsm,one,other)
	_return _clone.init(dsm,one,other)
_endmethod
$

#_pragma(classify_level=restricted, topic={analysis})
#_method base_binary_op_collection.serial_slots()
#	_local (keys, values) << _super.serial_slots()
#	keys.add_all_last({:other_collection})
#	values.add_all_last({.other_collection})
#	_return keys, values	
#_endmethod
#$
#
#_pragma(classify_level=restricted, topic={analysis})
#_method base_binary_op_collection.init_from_serial(base_col, other_col)
#    _super.init_from_serial(base_col)
#    .other_collection << other_col 
#    _return _self 
#_endmethod
#$

_pragma(classify_level=basic, topic={analysis})
_method base_binary_op_collection.equals?(other)
	_return _self.is_class_of?(other) _andif
		other.equals_in_details?(.base_collections, _self.operation)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method base_binary_op_collection.equals_in_details?(base_cols, op)
	_return _super.equals_in_details?(base_cols)
		_self.operation = op
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method base_binary_op_collection.other_collection
	_return .base_collections[2]
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_abstract _private _method base_binary_op_collection.operation
	
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_iter _method base_binary_op_collection.fast_elements()
	_for i_rec _over _self.do!fast_elements(:|fast_elements()|)
	_loop
		_loopbody(i_rec)
	_endloop
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_iter _method base_binary_op_collection.fast_elements_filtered_by_predicate(pred)
	_for i_rec _over _self.do!fast_elements(:|fast_elements_filtered_by_predicate()|, pred)
	_loop
		_loopbody(i_rec)
	_endloop
_endmethod
$

_iter _method base_binary_op_collection.fast_elements_filtered_by_geometry(geom_name, selector, arg)
	_for i_rec _over _self.do!fast_elements(:|fast_elements_filtered_by_geometry()|, geom_name, selector, arg)
	_loop
		_loopbody(i_rec)
	_endloop
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_abstract _iter _method base_binary_op_collection.do!fast_elements(the_method, _gather args)
	
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_binary_op_collection.description(translator)
	_local name1 << translator.name_for_collection(_self.base_collection)
	_local name2 << translator.name_for_collection(_self.other_collection)
	
	_return _self.message(:description, _self.operation, name1, name2)
_endmethod
$

