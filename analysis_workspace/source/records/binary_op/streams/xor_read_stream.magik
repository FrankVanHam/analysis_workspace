#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:xor_read_stream)
$

_pragma(classify_level=basic, topic={analysis, collections})
def_slotted_exemplar(:xor_read_stream,
	##
	{
		{:base_collection, _unset},
		{:other_collection, _unset},
		{:base_stream,  _unset },
		{:other_stream, _unset}
	}, :input_stream_with_unget_mixin)
$

_pragma(classify_level=basic, topic={analysis, collections})
_method xor_read_stream.new(base_collection, base_stream, other_collection, other_stream)
	_return _clone.init(base_collection, base_stream, other_collection, other_stream)
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_private _method xor_read_stream.init(base_collection, base_stream, other_collection, other_stream)
	.base_collection << base_collection
	.base_stream << base_stream
	.other_collection << other_collection
	.other_stream << other_stream
	_return _self 
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_method xor_read_stream.get()
	_loop
		_local rec << .base_stream.get()
		_if rec _is _unset _then _leave _endif #Exhausted
		
		_if _not .other_collection.includes?(rec) # avoid doubles
		_then
			_return rec
		_endif 
		_return rec
	_endloop
	# base stream exhausted
	_loop
		_local rec << .other_stream.get()
		_if rec _is _unset _then _leave _endif #Exhausted

		_if _not .base_collection.includes?(rec) # avoid doubles
		_then
			_return rec
		_endif 
	_endloop
	_return _unset 
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_method xor_read_stream.size_is_fast?
	_return _false 
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_method xor_read_stream.close()
	
_endmethod
$
