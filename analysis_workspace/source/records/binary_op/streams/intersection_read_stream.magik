_package rwan
$

#remex(:intersection_read_stream)
$

_pragma(classify_level=basic, topic={analysis, collections})
def_slotted_exemplar(:intersection_read_stream,
	##
	{
		{:base_stream,  _unset },
		{:other_collection, _unset}
	}, :input_stream_with_unget_mixin)
$

_pragma(classify_level=basic, topic={analysis, collections})
_method intersection_read_stream.new(base_stream, other_collection)
	_return _clone.init(base_stream, other_collection)
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_private _method intersection_read_stream.init(base_stream, other_collection)
	.base_stream << base_stream
	.other_collection << other_collection
	_return _self 
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_method intersection_read_stream.get()
	_loop
		_local rec << .base_stream.get()
		_if rec _is _unset _then _leave _endif #Exhausted
		
		_if .other_collection.includes?(rec)
		_then
			_return rec
		_endif 
	_endloop
	_return _unset 
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_method intersection_read_stream.size_is_fast?
	_return _false 
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_method intersection_read_stream.close()
	
_endmethod
$
