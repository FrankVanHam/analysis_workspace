#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:distance_filter_collection)

_pragma(classify_level=basic, topic={analysis})
##
## Collection that performs a distance test on a geometry
## field of the base collection to the given spatial
## argument. This collection assumes that .arg is a somewhat
## large collection. If .arg is not, then you rather should use distance_area_filter_collection
def_slotted_exemplar(:distance_filter_collection,
	{
		{:source_collection, _unset},
		{:source_geom_name,  _unset},
		{:distance,          _unset},
		{:inverse?,          _unset},
		{:filter_collection, _unset},
		{:filter_geom_name,  _unset}
	}, :base_record_collection)
$


_pragma(classify_level=basic, topic={analysis})
_method distance_filter_collection.new(dsm, source_col, source_geom_name, distance, inverse?, filter_col, filter_geom_name)
	_return _clone.init(dsm, source_col, source_geom_name, distance, inverse?, filter_col, filter_geom_name)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_private _method distance_filter_collection.init(dsm, source_col, source_geom_name, distance, inverse?, filter_col, filter_geom_name)
	.source_collection << source_col
	.source_geom_name << source_geom_name
	.distance << distance
	.inverse? << inverse?
	.filter_collection << filter_col
	.filter_geom_name << filter_geom_name

	# protect agains nonsense
	.source_collection.assert_geom_name(.source_geom_name)
	.filter_collection.assert_geom_name(.filter_geom_name)

	_return _super.init(dsm)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method distance_filter_collection.init_copy()
	>> _super.init_copy()
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method distance_filter_collection.activate_editor_in(dialog, holder)
	_return dialog.edit_distance_filter_dialog(holder,
						  .source_collection,
						  .source_geom_name, .distance, .inverse?,
						  .filter_collection, .filter_geom_name)
_endmethod
$


_pragma(classify_level=restricted, topic={analysis})
_method distance_filter_collection.serial_slots()
	_local (keys, values) << _super.serial_slots()
	keys.add_all_last({:source_collection, :source_geom_name, :distance, :inverse, :filter_collection, :filter_geom_name})
	values.add_all_last({.source_collection, .source_geom_name, .distance, .inverse?, .filter_collection, .filter_geom_name})
	_return keys, values
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method distance_filter_collection.init_from_serial(dsm, source_col, source_geom_name, distance, inverse?, filter_collection, filter_geom_name)
    _super.init_from_serial(dsm)
    .source_collection << source_col
    .source_geom_name << source_geom_name
    .distance << distance
    .inverse? << inverse?
    .filter_collection << filter_collection
    .filter_geom_name << filter_geom_name
    _return _self
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method distance_filter_collection.equals?(other)
	_return _self.is_class_of?(other) _andif 
		other.equals_in_details?(.source_collection, .source_geom_name, .distance, .inverse?, .filter_collection, .filter_geom_name)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method distance_filter_collection.equals_in_details?(source_col, source_geom_name, distance, inverse?, filter_collection, filter_geom_name)
	_return _super.equals_in_details?() _andif
		.source_collection.equals?(source_col) _andif
		.source_geom_name = source_geom_name _andif
		.distance = distance _andif
		.inverse? = inverse? _andif
		.filter_collection.equals?(filter_collection) _andif
		.filter_geom_name = filter_geom_name
_endmethod
$

####################################################################################################################

_pragma(classify_level=basic, topic={analysis})
_method distance_filter_collection.editable?
	_return _true 
_endmethod
$


_pragma(classify_level=basic, topic={analysis})
_method distance_filter_collection.geometry_refs
	_return .source_collection.geometry_refs
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method distance_filter_collection.expose()
	_return .source_collection.expose()
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method distance_filter_collection.geometry_for(rec, geom_name)
	_return .source_collection.geometry_for(rec, geom_name)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method distance_filter_collection.ref_collections
	## return the collections I depend on
	_return {.source_collection, .filter_collection}
_endmethod
$


#_pragma(classify_level=restricted, topic={analysis})
#_private _method distance_filter_collection.single_strategy?
#	_return .arg.convert_to_geometry_is_fast?
#_endmethod
#$
#
#_pragma(classify_level=basic, topic={analysis})
#_method distance_filter_collection.base_collections
#	_return {_self.base_collection, .arg}
#_endmethod
#$



_pragma(classify_level=restricted, topic={analysis})
_method distance_filter_collection.size_is_fast?
	## no, size is generally not fast as it is spatially filtered.
	_return _false 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method distance_filter_collection.read_stream(_optional filter)
	## Return my read_stream. If filter is set, the let the filter
	## filter my results. Otherwise set myself as the filter of my
	## source_collection
	#
	_local str << .source_collection.read_stream(_self)
	_if filter _isnt _unset
	_then
		_return filter.filter_stream(str)
	_else 
		_return str
	_endif 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method distance_filter_collection.world_distance
	_local world << .source_collection.expose().record_exemplar.rwan_world_for(.source_geom_name)
	_local distance << .distance.value_in(world.unit)
	_return distance 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method distance_filter_collection.filter_stream_for_actual_collection(actual_collection)
	_local filter_gs << .filter_collection.geometry_set(.filter_geom_name)
	_local source_stream << actual_collection.read_stream()
	_return rwan:distance_filter_record_read_stream.new(.source_collection, source_stream, .source_geom_name, _self.world_distance, .inverse?, filter_gs)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method distance_filter_collection.filter_stream(stream)
	_local filter_gs << .filter_collection.geometry_set(.filter_geom_name)
	_return rwan:distance_filter_record_read_stream.new(.source_collection, stream, .source_geom_name, _self.world_distance, .inverse?, filter_gs)
_endmethod
$



#_pragma(classify_level=basic, topic={analysis, collections})
#_method distance_filter_collection.includes?(rec)
#	_local geom << rec.geometry(.geom_name)
#	_if geom _is _unset
#	_then
#		_return _false
#	_endif
#	_local distance << _self.distance_value
#	_return _self.allows?(geom, distance)
#_endmethod
#$
#
#_pragma(classify_level=basic, topic={analysis, collections})
#_iter _method distance_filter_collection.fast_elements()
#	_for i_geom _over _self.fast_geos()
#	_loop
#		_local rwo << i_geom.rwo
#		_if rwo _isnt _unset
#		_then
#			_loopbody(rwo)
#		_endif
#	_endloop
#_endmethod
#$
#
#_pragma(classify_level=basic, topic={analysis, collections})
#_method distance_filter_collection.convert_to_geometry()
#	_local gs << geometry_set.new()
#	_for i_geom _over _self.fast_geos()
#	_loop
#		gs.add(i_geom)
#	_endloop
#	_return gs
#_endmethod
#$
#
#_pragma(classify_level=basic, topic={analysis, collections})
#_iter _method distance_filter_collection.fast_geos()
#	_local distance << _self.distance_value
#	_for i_geom _over _self.base_collection.fast_geometries(.geom_name)
#	_loop
#		_if _self.allows?(i_geom, distance)
#		_then
#			_loopbody(i_geom)
#		_endif 
#	_endloop
#_endmethod
#$
#
#_pragma(classify_level=basic, topic={analysis, collections})
#_private _method distance_filter_collection.allows?(geom, distance)
#	## 
#	## 
#	_local geom_coord << geom.bounds.centre
#	_local scan_bounds << bounding_box.new_centred(geom_coord.x, geom_coord.y, distance)
#	_dynamic !rwan_limit_bounds! << scan_bounds
#	
#	_local allows? << _false 
#	_if _not .inverse?
#	_then
#		# if geon is near to any of them, then it is true.
#		_for i_geom _over .arg.fast_geometries()
#		_loop
#			_if geom = i_geom _then _continue _endif 
#			_if geom.distance_to_within?(i_geom, distance)
#			_then
#				allows? << _true
#				_leave 
#			_endif
#		_endloop
#	_else
#		# geom should not be near to any of them. So none should be
#		# within the the distance.
#		allows? << _true 
#		_for i_geom _over .arg.fast_geometries()
#		_loop
#			_if geom = i_geom _then _continue _endif 
#			_if geom.distance_to_within?(i_geom, distance)
#			_then
#				allows? << _false
#				_leave 
#			_endif
#		_endloop
#	_endif
#	_return allows?
#_endmethod
#$
#
#
#_pragma(classify_level=basic, topic={analysis})
#_method distance_filter_collection.description(translator)
#	_local base_name << translator.name_for_collection(_self.base_collection)
#	_local arg_name  << translator.name_for_collection(.arg)
#	
#	_local format << unit_specific_format.new_with_properties(.distance.unit,
#								  :float_decimal_places,0)
#	_local distance_string << format.format(.distance)
#	_if .inverse?
#	_then 
#		_return _self.message(:description_inverse, base_name, distance_string, arg_name)
#	_else
#		_return _self.message(:description, base_name, distance_string, arg_name)
#	_endif 
#_endmethod
#$
#

_pragma(classify_level=advanced, topic={analysis})
_method distance_filter_collection.display_tree_in(owner)
	_return owner.display_tree_for_distance_filter_collection(_self, .source_collection, .source_geom_name, .distance, .filter_collection)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method distance_filter_collection.discard()
	.source_collection << .source_geom_name << .distance << .inverse? << .filter_collection << .filter_geom_name << _unset
	_super.discard()
_endmethod
$
