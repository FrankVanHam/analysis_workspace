#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:materialization_settings)
$

_pragma(classify_level=restricted, topic={analysis})
##
## Holder for the settings that are required to create a record
## collection materialization.
##
def_slotted_exemplar(:materialization_settings,
	{
		{:collection, _unset},
		{:int_name,   _unset},
		{:ext_name,   _unset},
		{:indexes,    _unset},
		{:fields,     _unset}
	})
$

_pragma(classify_level=restricted, topic={analysis})
_method materialization_settings.new(col)
	_return _clone.init(col)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method materialization_settings.init(col)
	.collection << col
	_self.reset()
	_return _self 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method materialization_settings.set_name(int_name, ext_name)
	.int_name << int_name
	.ext_name << ext_name
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method materialization_settings.reset()
	.int_name << :noname
	.ext_name << :noname
	.indexes  << rope.new()
	.fields   << rope.new()
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method materialization_settings.set_indexes(indexes)
	.indexes << indexes
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method materialization_settings.field_allowed?(field_name)
	_local fd << .collection.field(field_name)
	_if fd _is _unset _then _return _false _endif 
	_if fd.is_join? _andif fd.heterogeneous?
	_then
		_return _false
	_endif 
	_local _constant forbidden << {:rwo_id, :ds!version, :meatball}
	_return forbidden.includes?(fd.name).not
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method materialization_settings.ensure_allowed(fd)
	_if _self.field_allowed?(fd).not
	_then
		condition.raise(:error, :string, write_string("This field is not allowed: ", fd.name))
	_endif 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method materialization_settings.add_field(field_name, _optional ext_name, join_aspect)
	_self.ensure_allowed(field_name)

	_local fd << .collection.field(field_name)
	_local prop << property_list.new_with(
			:source_field, fd,
			:ext_name, ext_name.default(fd.external_name),
			:join_aspect, join_aspect)
	.fields.add(prop)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_iter _method materialization_settings.field_properties()
	_for i_props _over .fields.fast_elements()
	_loop
		field       << i_props[:source_field]
		ext_name    << i_props[:ext_name]
		join_aspect << i_props[:join_aspect]
		_loopbody(field, ext_name, join_aspect)
	_endloop 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method materialization_settings.internal_name
	_return .int_name
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method materialization_settings.external_name
	_return .ext_name
_endmethod
$


_pragma(classify_level=restricted, topic={analysis})
_iter _method materialization_settings.indexes()
	_for i_vec _over .indexes.fast_elements()
	_loop
		_loopbody(i_vec)
	_endloop 
_endmethod
$
