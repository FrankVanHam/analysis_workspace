#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:distance_area_filter_collection)

_pragma(classify_level=basic, topic={analysis})
##
## Collection that performs a distance test on a geometry
## field of the base collection to the given spatial
## argument. This subclass is optimizes for the case that .arg
## is a simple area thing.
def_slotted_exemplar(:distance_area_filter_collection,
	{},
	:distance_filter_collection)
$


_pragma(classify_level=basic, topic={analysis, collections})
_method distance_area_filter_collection.includes?(rec)
	_local geom << rec.geometry(.geom_name)
	_if geom _is _unset
	_then
		_return _false
	_endif
	_local distance << _self.distance_value
	
	_local geom_arg << _self.need_geometry(.arg)
	_return geom.distance_to_within?(geom_arg, distance) = (_not .inverse?)
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_iter _method distance_area_filter_collection.fast_elements()
	_local geom_arg << _self.need_geometry(.arg)
	_local distance << _self.distance_value
	_for i_geom _over _self.base_collection.fast_geometries(.geom_name)
	_loop			
		_if i_geom.distance_to_within?(geom_arg, distance) = (_not .inverse?)
		_then
			_local rwo << i_geom.rwo
			_if rwo _isnt _unset
			_then 
				_loopbody(rwo)
			_endif 
		_endif 
	_endloop
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_method distance_area_filter_collection.convert_to_geometry()
	_local gs << geometry_set.new()
	_local distance << _self.distance_value
	
	_local geom_arg << _self.need_geometry(.arg)
	_for i_geom _over _self.base_collection.fast_geometries(.geom_name)
	_loop
		_if i_geom.distance_to_within?(geom_arg, distance) = (_not .inverse?)
		_then 
			gs.add(i_geom)
		_endif 
	_endloop
	_return gs
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method distance_area_filter_collection.need_geometry(arg)
	_return arg.convert_to_geometry()
_endmethod
$
