##
## File            : $File$
## SCM             : $URL$
##
## Copyright       : Realworld Systems
##                   e-mail  : support@realworld-systems.com
##                   address : Venusstraat 17, 4105 JH Culemborg, The Netherlands
##                   tel     : +31(0)345 614406
##                   fax     : +31(0)345 614319
##
## Contains        : 
##
##
## Date written    : 2014-12-24
## Date changed    : $Date$
## Revision        : $Rev$

_package rwan
$

#remex(:base_record_collection)
$

_pragma(classify_level=basic, topic={analysis})
##
## Bae collection for collections that hold records (rather
## than geometry or areas).
##
def_slotted_exemplar(:base_record_collection,
	{},
	:base_collection)
$

## Add to the club of things that can hold records
record_collection_mixin.add_child(base_collection)
$

_pragma(classify_level=basic, topic={analysis})
_method base_record_collection.is_record_collection?
	_return _true  
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_record_collection.buffer(geom_name, distance, _optional corner_style, end_style)
	_return buffer_collection.new(.dsm, _self, geom_name, distance, corner_style, end_style)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_record_collection.distance_collection(geom_name, distance, arg)
	_return distance_filter_collection.new(.dsm, _self, geom_name, distance, arg)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_record_collection.geometry_collection(geom_name)
	## Return a lazy evaluated spatial collection.
	_return spatial_collection.new(.dsm, _self, geom_name)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_record_collection.follow_join(join_name)
	_local col << _self.expose()
	_local target << col.field(join_name).result_table(col.dataset)
	_return join_collection.new(.dsm, _self, target, join_name)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_record_collection.follow_method(target_table, method_name, args)
	_return method_collection.new(.dsm, _self, target_table, method_name, args)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_record_collection.union(other)
	_return union_collection.new(.dsm, _self,other)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_record_collection.xor(other)
	_return xor_collection.new(.dsm, _self,other)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_record_collection.root(table)
	_return root_collection.new(.dsm, _self,table)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_record_collection.intersection(other)
	_return intersection_collection.new(.dsm, _self,other)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_record_collection.subtraction(other)
	_return subtraction_collection.new(.dsm, _self,other)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_record_collection.filter_by_geometry(geom_name, selector, arg)
	_return spatial_filter_collection.new(.dsm, _self, geom_name, selector, arg)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_record_collection.follow_topology(geom_name, rwo_type)
	_local col << _self.expose()
	_local target << col.dataset.collections[rwo_type]
	_return topology_collection.new(.dsm, _self, geom_name, target)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_record_collection.filter_by_predicate(pred)
	_return predicate_filter_collection.new(.dsm, _self,pred)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_abstract _method base_record_collection.includes?(rec)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_record_collection.convert_to_geometry_filtered_by_geometry(geom_name, selector, geom, org_col)
	## Subclasses should try to optimize this call to filter on
	## geometry. Backstop method will loop over all records and get
	## the geometry.
	
	show(_self, "Unoptimized convert_to_geometry_filtered_by_geometry")
	_return _self.convert_to_geometry_for_col(org_col, geom_name)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_record_collection.convert_to_geometry(_optional geom_name)
	_return _self.convert_to_geometry_for_col(_self, geom_name)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method base_record_collection.convert_to_geometry_for_col(col,geom_name)
	show(_self, col, "Unoptimized convert_to_geometry")
	_local gs << geometry_set.new()
	_for i_rec _over col.fast_elements()
	_loop
		_if geom_name _isnt _unset
		_then 
			_local geom << i_rec.geometry(geom_name)
			_if geom _isnt _unset 
			_then
				gs.add(geom)
			_endif
		_else
			_for i_geom _over i_rec.all_geometry(_false)
			_loop
				gs.add(i_geom)
			_endloop 
		_endif 
	_endloop
	_return gs
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_abstract _method base_record_collection.includes?(rec)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_record_collection.size
	show(_self, "Unoptimized size")
	_local c << 0
	_for i_rec _over _self.fast_elements()
	_loop
		c +<< 1
	_endloop
	_return c
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_record_collection.size_filtered_by_predicate(pred)
	show(_self, "Unoptimized size_filtered_by_predicate")
	_local c << 0
	_for i_rec _over _self.fast_elements_filtered_by_predicate(pred)
	_loop
		c +<< 1
	_endloop
	_return c
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_record_collection.size_is_fast_filtered_by_predicate?(pred)
	_return _false
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_record_collection.predicate_filtered_read_stream(pred)
	show(_self, "Unoptimized predicate_filtered_read_stream")
	_return predicate_filter_read_stream.new(_self.read_stream(), pred)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_iter _method base_record_collection.fast_elements_filtered_by_predicate(pred)
	## Subclasses should try to optimize this call to filter on
	## predicate. Backstop method will loop over all records and
	## test the predicate.
	
	show(_self, "Unoptimized fast_elements_filtered_by_predicate")
	_for i_rec _over _self.fast_elements()
	_loop
		_if pred.test?(i_rec)
		_then
			_loopbody(i_rec)
		_endif 
	_endloop
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_record_collection.size_filtered_by_geometry(geom_name, selector, arg)
	show(_self, "Unoptimized size_filtered_by_geometry")
	_local c << 0
	_for i_rec _over _self.fast_elements_filtered_by_geometry(geom_name, selector, arg)
	_loop
		c +<< 1
	_endloop
	_return c
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_abstract _method base_record_collection.read_stream()

_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_method base_record_collection.int!predicated_read_stream(pred)
	_return _self.predicate_filtered_read_stream(pred)
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_abstract _method base_record_collection.includes?(a_rec)
	
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_iter _method base_record_collection.fast_elements()
	_local str << _self.read_stream()
	_loop
		_local rec << str.get()
		_if rec _is _unset _then _leave _endif
		
		_loopbody(rec)
	_endloop
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_iter _method base_record_collection.elements()
	_for i_rec _over _self.fast_elements()
	_loop
		_loopbody(i_rec)
	_endloop 
_endmethod
$


_pragma(classify_level=basic, topic={analysis, collections})
_method base_record_collection.an_element()
	_for i_rec _over _self.fast_elements()
	_loop
		_return i_rec
	_endloop
_endmethod
$



