#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:spatial_filter_collection)

_pragma(classify_level=basic, topic={analysis})
##
## Collection that performs a spatial operator on a geometry
## field of the base collection.
def_slotted_exemplar(:spatial_filter_collection,
	{
		{:geom_name, _unset},
		{:selector, _unset},
		{:arg, _unset}
	}, :base_record_collection)
$


_pragma(classify_level=basic, topic={analysis})
_method spatial_filter_collection.new(dsm, base_col, geom_name, selector, arg)
	_return _clone.init(dsm, base_col, geom_name, selector, arg)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_private _method spatial_filter_collection.init(dsm, base_col, geom_name, selector, arg)
	.geom_name << geom_name
	.selector << selector
	.arg << arg
	_return _super.init(dsm, base_col)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method spatial_filter_collection.editable?
	_return _true 
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method spatial_filter_collection.activate_editor_in(dialog, holder)
	dialog.edit_spatial_filter_dialog(holder,
					  _self.base_collection, .arg,
					  .geom_name, .selector)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method spatial_filter_collection.update(geom_name, selector)
	.geom_name << geom_name
	.selector << selector
_endmethod
$

_pragma(classify_level=restricted, topic={demo})
_method spatial_filter_collection.serial_slots()
	_local (keys, values) << _super.serial_slots()
	keys.add_all_last({:geom_name, :selector, :arg})
	values.add_all_last({.geom_name, .selector, .arg})
	_return keys, values
_endmethod
$

_pragma(classify_level=restricted, topic={demo})
_private _method spatial_filter_collection.init_from_serial(dsm, base_cols, geom_name, selector, arg)
    _super.init_from_serial(dsm, base_cols)
    .geom_name << geom_name
    .selector << selector
    .arg << arg
    _return _self 
_endmethod
$

_pragma(classify_level=basic, topic={demo})
_method spatial_filter_collection.base_collections
	_return {_self.base_collection, .arg}
_endmethod
$

_pragma(classify_level=basic, topic={demo})
_method spatial_filter_collection.equals?(other)
	_return _self.is_class_of?(other) _andif 
		other.equals_in_details?(.base_collections, .geom_name, .selector, .arg)
_endmethod
$

_pragma(classify_level=restricted, topic={demo})
_method spatial_filter_collection.equals_in_details?(base_cols, geom_name, selector, arg)
	_if _not _super.equals_in_details?(base_cols) _then _return _false _endif
	
	_return .geom_name = geom_name _andif
		.selector = selector _andif
		.arg.equals?(arg)
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_method spatial_filter_collection.size
	_local geom << _self.need_geometry(.arg)
	_return _self.base_collection.size_filtered_by_geometry(.geom_name, .selector, geom)
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_method spatial_filter_collection.includes?(rec)
	_local geom << rec.geometry(.geom_name)
	_if geom _is _unset
	_then
		_return _false
	_endif
	_local rec_gs << geometry_set.new_with(geom)
	_local geom_arg << _self.need_geometry(.arg)
	_return rec_gs.select(.selector, geom_arg).empty?.not
_endmethod
$


_pragma(classify_level=basic, topic={analysis, collections})
_iter _method spatial_filter_collection.fast_elements()
	_local geom << _self.need_geometry(.arg)
	_for i_rec _over _self.base_collection.fast_elements_filtered_by_geometry(.geom_name, .selector, geom)
	_loop
		_loopbody(i_rec)
	_endloop
_endmethod
$

_pragma(classify_level=basic, topic={analysis, collections})
_method spatial_filter_collection.convert_to_geometry()
	_local geom << _self.need_geometry(.arg)
	_return _self.base_collection.convert_to_geometry_filtered_by_geometry(.geom_name, .selector, geom)
_endmethod
$


_pragma(classify_level=restricted, topic={analysis})
_private _method spatial_filter_collection.need_geometry(arg)
	_return arg.convert_to_geometry()
_endmethod
$


_pragma(classify_level=basic, topic={analysis})
_method spatial_filter_collection.description(translator)
	_local base_name << translator.name_for_collection(_self.base_collection)
	_local target_name << translator.name_for_collection(.arg)
	_return _self.message(:description, base_name, .geom_name,
			      .selector.write_string, target_name)
_endmethod
$
