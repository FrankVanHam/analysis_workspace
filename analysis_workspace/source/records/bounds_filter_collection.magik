#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:bounds_filter_collection)

_pragma(classify_level=basic, topic={analysis})
##
## Collection that filter in the given bounds
##
def_slotted_exemplar(:bounds_filter_collection,
	{
		{:source_collection, _unset},
		{:source_geom_name,  _unset},
		{:bounds,            _unset}
	}, :base_record_collection)
$

_pragma(classify_level=basic, topic={analysis})
_method bounds_filter_collection.new(dsm, source_col, source_geom_name, bounds)
	_return _clone.init(dsm, source_col, source_geom_name, bounds)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_private _method bounds_filter_collection.init(dsm, source_col, source_geom_name, bounds)
	.source_collection << source_col
	.source_geom_name << source_geom_name
	.bounds << bounds

	# protect agains nonsense
	.source_collection.assert_geom_name(.source_geom_name)

	_return _super.init(dsm)
_endmethod
$

###################################################################################################################

_pragma(classify_level=basic, topic={analysis})
_method bounds_filter_collection.editable?
	_return _false 
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method bounds_filter_collection.geometry_refs
	_return .source_collection.geometry_refs
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method bounds_filter_collection.expose()
	_return .source_collection.expose()
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method bounds_filter_collection.geometry_for(rec, geom_name)
	_return .source_collection.geometry_for(rec, geom_name)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method bounds_filter_collection.ref_collections
	## return the collections I depend on
	_return {.source_collection}
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method bounds_filter_collection.size_is_fast?
	## no, size is generally not fast as it is spatially filtered.
	_return _false 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method bounds_filter_collection.read_stream(_optional filter)
	## Return my read_stream. If filter is set, the let the filter
	## filter my results. Otherwise set myself as the filter of my
	## source_collection
	#
	_local str << .source_collection.read_stream(_self)
	_if filter _isnt _unset
	_then
		_return filter.filter_stream(str)
	_else 
		_return str
	_endif 
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method bounds_filter_collection.filter_stream_for_actual_collection(actual_collection)
	_return _self.source_rwo_stream(actual_collection)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_method bounds_filter_collection.filter_stream(stream)
	_return rwan:bounds_filter_read_stream.new(.source_collection, stream, .source_geom_name, .bounds)
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method bounds_filter_collection.source_rwo_stream(actual_collection)
	_local source_gs << _self.source_geometry_set(actual_collection)
	_return gs_rwo_set.new(actual_collection.dataset,
			       property_list.new_with(
				       :data_source, source_gs)).read_stream()
_endmethod
$

_pragma(classify_level=restricted, topic={analysis})
_private _method bounds_filter_collection.source_geometry_set(actual_collection)
	# if the operator is restricting to the filter, then set the
	# bounds.
	_local world << actual_collection.record_exemplar.rwan_world_for(.source_geom_name)
	_return actual_collection.geometry_set(world, .bounds, .source_geom_name)
_endmethod
$

_pragma(classify_level=advanced, topic={analysis})
_method bounds_filter_collection.discard()
	.source_collection << .source_geom_name << .bounds << _unset 
	_super.discard()
_endmethod
$
