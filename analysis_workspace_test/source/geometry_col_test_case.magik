#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:geometry_col_test_case)

_pragma(classify_level=basic, topic={analysis})
##
## Test a geometry collection
##
def_slotted_exemplar(:geometry_col_test_case,
	{},
	:base_analysis_db_test_case)
$


_pragma(classify_level=basic, topic={analysis})
_method geometry_col_test_case.test_geometry_set_geometry_filter()
	_local dsm << rwan:analysis_dataset_manager.new(:test)
	
	_local area_col << _self.area_collection(dsm, {0,0,100,0,100,100,0,100,0,0})
	_local gs << area_col.geometry_set(:geometry)
	_self.assert_equals(1, gs.size, "1 geometry from core collection")
	
	_local filter_col << _self.area_collection(dsm, {50,50,150,50,150,150,50,150,50,50})
	_local acol << area_col.filter_by_geometry(:geometry, :interacting_with, filter_col, :geometry)
	
	gs << acol.geometry_set(:geometry)
	_self.assert_equals(1, gs.size, "1 geometry from filter collection")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method geometry_col_test_case.test_geometry_set_distance_filter()
	_local dsm << rwan:analysis_dataset_manager.new(:test)
	
	_local area_col << _self.area_collection(dsm, {0,0,100,0,100,100,0,100,0,0})
	_local gs << area_col.geometry_set(:geometry)
	_self.assert_equals(1, gs.size, "1 geometry from core collection")
	
	_local filter_col << _self.area_collection(dsm, {0,150,100, 150, 100, 250, 0, 250, 0, 150})
	_local acol << area_col.filter_by_distance(:geometry, length_value(60, :mm), _false, filter_col, :geometry)
	
	gs << acol.geometry_set(:geometry)
	_self.assert_equals(1, gs.size, "1 geometry from filter collection")
	_self.assert_not_unset(acol.goto_bounds)
_endmethod
$
