#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:dataset_test_case)
$

_pragma(classify_level=basic, topic={analysis})
##
## Test using geometry filters.
def_slotted_exemplar(:dataset_test_case,
	{
		{:ds, _unset},
		{:file_name, _unset}
	},
	:base_analysis_test_case)
$



_pragma(classify_level=basic, topic={analysis})
_method dataset_test_case.set_up()
	## 
	##
	_local source_path << smallworld_product.get_resource_file("analysis.ds",
								  "data",
								  rwan:analysis_dataset_manager.module_name)
	_local target_path << system.temp_file_name("munit_analysis.ds")
	system.file_copy(source_path, target_path)
	.file_name << target_path
	.ds << rwan:analysis_dataset_manager.open(:test, .file_name)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method dataset_test_case.tear_down()
	## 
	##
	.ds.discard()
	system.unlink( .file_name, _true, _true)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method dataset_test_case.test_analysis_collection()
	_local rcol << rwan:sw_collection.new(.ds, _self.min_road_collection)
	_return _self.basic_storage_test(rcol)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method dataset_test_case.test_geometry_collection()
	_local area_col << _self.area_surrounding_parkers_piece(.ds)
	_local area << area_col.area
	_local gs << geometry_set.new_with(area)
	_local geom << rwan:geometry_collection.new(.ds, gs)
	_self.basic_storage_test(geom)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method dataset_test_case.test_area_collection()
	_local area_col << _self.area_surrounding_parkers_piece(.ds)
	_local retrieved_area << _self.basic_storage_test(area_col)
	
	_self.assert_true((area_col.area.area-retrieved_area.area.area).abs < 0.001, "Area should be the same")
_endmethod
$


_pragma(classify_level=basic, topic={analysis})
_method dataset_test_case.test_spatial_analysis_collection()
	_local hcol << rwan:sw_collection.new(.ds, _self.hotel_collection)
	_local area_col << _self.area_surrounding_parkers_piece(.ds)
	_local area << area_col.area
	_local geom << rwan:area_collection.new(.ds, area)
	_local hcol1 << hcol.filter_by_geometry(:location, :within, geom)
	
	_return _self.basic_storage_test(hcol1)
_endmethod
$


_pragma(classify_level=basic, topic={analysis})
_method dataset_test_case.test_predicate_filter()
	_local col << _self.min_road_collection
	_local rcol << rwan:sw_collection.new(.ds, col)
	_local rcol1 << rcol.filter_by_predicate(predicate.eq(:road_type, "A-Road"))
	_self.basic_storage_test(rcol1)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method dataset_test_case.test_analysis_set()
	_local col << _self.haig_and_chesterton_set(.ds)
	_self.basic_storage_test(col)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method dataset_test_case.test_root_analysis()
	_local pcol << rwan:sw_collection.new(.ds, _self.pub_rest_collection)
	_local acol << pcol.follow_join(:min_roads)
	_local pcol1 << acol.follow_root(_self.pub_rest_collection)
	
	_self.basic_storage_test(pcol1)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method dataset_test_case.test_binary_op()
	_local pcol << rwan:sw_collection.new(.ds, _self.pub_rest_collection)
	_local pred1 << predicate.eq(:type, "Restaurant")
	_local pred2 << predicate.eq(:cuisine, "Chinese")
	_local pcol1 << pcol.filter_by_predicate(pred1)
	_local pcol2 << pcol.filter_by_predicate(pred2)
	_local and_col << pcol1.intersection(pcol2)
	
	_self.basic_storage_test(and_col)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method dataset_test_case.test_follow_topology_analysis()
	_local pcol << rwan:sw_collection.new(.ds, _self.pub_rest_collection)
	_local acol << pcol.follow_topology(:location, _self.min_road_collection)
	_self.basic_storage_test(acol)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method dataset_test_case.test_follow_join_analysis()
	_local pcol << rwan:sw_collection.new(.ds, _self.pub_rest_collection)
	_local acol << pcol.follow_join(:min_roads)
	_self.basic_storage_test(acol)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method dataset_test_case.test_spatial_operation()
	
	_local geom1 << rwan:area_collection.new(.ds, _self.park_collection.at(9492).coverage)
	_local geom2 << rwan:area_collection.new(.ds, _self.poi_collection.at(9579).coverage)
	_local subt << geom1.subtraction(geom2)
	
	_self.basic_storage_test(subt)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method dataset_test_case.test_spatial_collection()
	_local rcol << rwan:sw_collection.new(.ds, _self.min_road_collection)
	_local rgeom << rcol.spatial_collection(:centre_line)
	_self.basic_storage_test(rgeom)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method dataset_test_case.test_buffer()
	_local geom1 << rwan:area_collection.new(.ds, _self.park_collection.at(9492).coverage)
	_local subt << geom1.buffer(length_value.new(12,:m), :square, :truncate)
	
	_self.basic_storage_test(subt)	
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method dataset_test_case.basic_storage_test(col)
	## 
	##
	_local ws << workspace.new()
	_local holder << collection_holder.new(col, :name, _unset, _unset)
	ws.add_holder(holder)
	
	.ds.store(ws)
	_local ws_back << .ds.retrieve()
	_local holders_back << ws_back.holders
	_self.assert_is(1, holders_back.size, "One stored and one retrieved")
	_local col_back << holders_back.an_element().collection
	
	_self.assert_true(col_back.is_class_of?(col), "Classes should match")
	_self.assert_true(col.equals?(col_back), "what goes in, should come out")
	
	_return col_back
_endmethod
$
