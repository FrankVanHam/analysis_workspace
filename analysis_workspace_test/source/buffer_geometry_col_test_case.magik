#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:binary_op_geometry_col_test_case)

_pragma(classify_level=basic, topic={analysis})
##
## Test buffer 
##
def_slotted_exemplar(:buffer_geometry_col_test_case,
	{},
	:base_analysis_db_test_case)
$

_pragma(classify_level=basic, topic={analysis})
_method buffer_geometry_col_test_case.test_geom_category
	_local dsm << rwan:analysis_dataset_manager.new(:test)
	_local area_col << _self.area_collection(dsm, bounding_box.new_with_size(0,0,1000,1000).coords)
	b_col << area_col.buffer(:geometry, length_value(2,:m), :circular, :circular)
	_self.assert_equals(:area, b_col.geom_category, "Should be area")
		
	_local line_col << _self.lines_collection(dsm, {{0,0,100,100}})
	b_col << line_col.buffer(:geometry, length_value(2,:m), :circular, :circular)
	_self.assert_equals(:area, b_col.geom_category, "Should be area")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method buffer_geometry_col_test_case.test_basic()
	## Test includes?() and an_element() and size
	## 
	_local dsm  << rwan:analysis_dataset_manager.new(:test)
		
	_local s1 << _self.sector_rope_from(bounding_box.new_with_size(0,100, 1000,1000).coords)
	_local s2 << _self.sector_rope_from(bounding_box.new_with_size(1000,1000, 1000,1000).coords)
	_local s3 << _self.sector_rope_from(bounding_box.new_with_size(2000,100, 1000,1000).coords)
	_local p1 << pseudo_area.new_for_world(s1, _self.gv.world)
	_local p2 << pseudo_area.new_for_world(s2, _self.gv.world)
	_local p3 << pseudo_area.new_for_world(s3, _self.gv.world)

	_local park_col << rwan:geometry_collection.new(dsm, geometry_set.new_with(p1,p2,p3))
	
	_local r1 << _self.create_road("access1", {0,0,100000,0})
	_local roads_col << rwan:record_set_collection.new(dsm, {r1})
	_local b_col << roads_col.buffer(:centre_line, length_value(200,:mm), :circular, :circular)
	_local fcol << park_col.filter_by_geometry(:coverage, :interacting_with, b_col, :area)
	
	_self.assert_true(fcol.ref_collections.includes?(park_col), "Road is the base")
	_self.assert_true(fcol.includes?(p1), "P1 should be includes")
	_self.assert_false(fcol.includes?(p2), "P2 should not be includes")

	_local an << fcol.an_element()
	_self.assert_true((p1 _is an) _orif (p3 _is  an), "Should be one of 2")
	_self.assert_equals(2, fcol.size, "Size = 2")
	
	# inverse if
	_local bounds_col << park_col.filter_by_bounds(:coverage, bounding_box.new_with_size(0,0,3000,1000))
	fcol << bounds_col.filter_by_geometry(:coverage, :disjoint_from, b_col, :area)
	_self.assert_true(fcol.includes?(p2), "P2 should be includes")
	_self.assert_false(fcol.includes?(p1), "P1 should not be includes")
	
	an << fcol.an_element()
	_self.assert_true((p2 = an), "Should be one really")
	_self.assert_equals(1, fcol.size, "Size = 1")
_endmethod
$
