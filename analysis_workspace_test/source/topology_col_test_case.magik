#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:topology_col_test_case)

_pragma(classify_level=basic, topic={analysis})
##
## Test topology collections.
##
def_slotted_exemplar(:topology_col_test_case,
	{},
	:base_analysis_db_test_case)
$

_pragma(classify_level=basic, topic={analysis})
_method topology_col_test_case.test_nref_check()
	_local dsm << rwan:analysis_dataset_manager.new(:test)
	
	_local road_col << rwan:sw_collection.new(dsm, _self.min_road_collection)
	_local filter_col << road_col.follow_topology(:centre_line, _self.hotel_collection)
	_self.assert_equals(1, road_col.nrefs, "source collection is used once")

	_local area_col << _self.area_collection(dsm, {0,0,100,0,100,100,0,100,0,0})
	_local filter_col1 << filter_col.filter_by_distance(:location,
							    length_value(10,:m), _false, area_col, :geometry)
	_self.assert_equals(1, road_col.nrefs, "source collection is used once")
	_self.assert_equals(1, area_col.nrefs, "area collection is used once")
	
	filter_col1.discard()
	_self.assert_equals(1, road_col.nrefs, "source collection is used once again")
	_self.assert_equals(0, area_col.nrefs, "area collection is not used any more")

	road_col.discard()
	_self.assert_equals(0, road_col.nrefs, "road collection is free")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method topology_col_test_case.test_exposure()
	_local dsm << rwan:analysis_dataset_manager.new(:test)

	# road analytic collection and area 
	_local road_col << rwan:sw_collection.new(dsm, _self.min_road_collection)
	_local filter_col << road_col.follow_topology(:centre_line, _self.hotel_collection)
	_self.assert_equals(_self.hotel_collection, filter_col.expose(), "The filter collection returns Hotels")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_private _method topology_col_test_case.create_basic_setup()
	_self.create_road("line", {0, 0, 100000, 0})
	_self.create_hotel("h1", {1000, 0})
	_self.create_hotel("h2", {4000, 0})
	
	_local dsm  << rwan:analysis_dataset_manager.new(:test)
	_local road_col << rwan:sw_collection.new(dsm, _self.min_road_collection)
	_local acol << _self.area_collection(dsm, {-10,-10, 100010, -10, 100010, 10, -10, 10, -10, -10})
	
	_local one_road_col << road_col.filter_by_geometry(:centre_line, :within, acol, :geometry)
	_self.assert_equals(1, one_road_col.size, "1 road")
	_return one_road_col
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method topology_col_test_case.test_basic_collection()
	_local one_road_col << _self.create_basic_setup()
	_local h_col << one_road_col.follow_topology(:centre_line, _self.hotel_collection)
	_self.assert_equals(2, h_col.size, "2 hotels on the road")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method topology_col_test_case.test_geometry_set()
	_local one_road_col << _self.create_basic_setup()
	_local h_col << one_road_col.follow_topology(:centre_line, _self.hotel_collection)
	
	_local gs << h_col.geometry_set(:location)
	_self.assert_equals(2, gs.size, "2 points")
	_self.assert_not_unset(h_col.goto_bounds)
_endmethod
$
