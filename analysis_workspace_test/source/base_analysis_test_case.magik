#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

_pragma(classify_level=basic, topic={analysis})
def_slotted_exemplar(:base_analysis_test_case,
	{
	},
	:test_case)
$

_pragma(classify_level=basic, topic={analysis})
_private _method base_analysis_test_case.drafting_sectors(text)

	_local coord << _self.drafting_text_coord(text)
	_local box << bounding_box.new_centred(coord.x, coord.y, 5)
	_local gs << _self.gv.collections[:drafting_lines].geometry_set(
								  _self.gv.world,
								  box )
	gs << gs.select(:interacting_with, box)
	_return gs.an_element(), _self.gv.world
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_private _method base_analysis_test_case.drafting_text_coord(text)
	_local the_text << _if text.size > 30
			   _then >> text.slice(1,30)
			   _else >> text
			   _endif 
	_for i_rwo _over _self.gv.collections[:drafting_texts].fast_elements()
	_loop
		_for i_text _over i_rwo.geometries(_false).fast_elements()
		_loop
			_if i_text.string = the_text
			_then
				_return i_text.coord
			_endif 
		_endloop
	_endloop 
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_private _method base_analysis_test_case.area_surrounding_parkers_piece(dsm)
	_local (sectors, world) << _self.drafting_sectors("test_finding_hotels_near_parks")
	_local area <<  pseudo_area.new_for_world(sectors, world)
	_return rwan:area_collection.new(dsm, area)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_private _method base_analysis_test_case.min_road_collection
	_return _self.gv.collections[:min_road]
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_private _method base_analysis_test_case.hotel_collection
	_return _self.gv.collections[:hotel]
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_private _method base_analysis_test_case.office_collection
	_return _self.gv.collections[:office]
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_private _method base_analysis_test_case.company_collection
	_return _self.gv.collections[:company]
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_private _method base_analysis_test_case.poi_collection
	_return _self.gv.collections[:pl_of_interest]
_endmethod
$
_pragma(classify_level=basic, topic={analysis})
_private _method base_analysis_test_case.roundabout_collection
	_return _self.gv.collections[:roundabout]
_endmethod
$
_pragma(classify_level=basic, topic={analysis})
_private _method base_analysis_test_case.road_works_collection
	_return _self.gv.collections[:road_works]
_endmethod
$
_pragma(classify_level=basic, topic={analysis})
_private _method base_analysis_test_case.pub_rest_collection
	_return _self.gv.collections[:pub_rest]
_endmethod
$
_pragma(classify_level=basic, topic={analysis})
_private _method base_analysis_test_case.park_collection
	_return _self.gv.collections[:park]
_endmethod
$
_pragma(classify_level=basic, topic={analysis})
_private _method base_analysis_test_case.footpath_collection
	_return _self.gv.collections[:footpath]
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_private _method base_analysis_test_case.gv
	_return gis_program_manager.databases[:gis]
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_private _method base_analysis_test_case.cable_collection
	_return _self.ev.collections[:cable]
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_private _method base_analysis_test_case.supply_point_collection
	_return _self.ev.collections[:supply_point]
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_private _method base_analysis_test_case.customer_collection
	_return _self.ev.collections[:customer]
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_private _method base_analysis_test_case.ev
	_return gis_program_manager.databases[:electricity]
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_private _method base_analysis_test_case.map_feature
	_return _self.mbv.collections[:map_feature]
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_private _method base_analysis_test_case.mbv
	_return gis_program_manager.databases[:mapbase]
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_analysis_test_case.area_includes_all?(area_col, geoms)
	_local area << area_col.convert_to_geometry()
	_local all_inside? << _true
	_for i_geom _over geoms.fast_elements()
	_loop
		_if i_geom.inside?(area).not
		_then
			all_inside? << _false
			_leave
		_endif
	_endloop
	_return all_inside?
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_private _method base_analysis_test_case.haig_and_chesterton_set(dsm)
	_local col << _self.min_road_collection
	_local set << equality_set.new_with(
			      col.select(predicate.eq(:name, "Haig Road")).an_element(),
			      col.select(predicate.eq(:name, "Chesterton Road")).an_element())
	
	_return rwan:record_collection.new(dsm, set)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_private _method base_analysis_test_case.chesterton_roundabout_roads_geometry_set(dsm)
	_local col << _self.min_road_collection
	_local rcol << rwan:sw_collection.new(dsm, col)
	_local (sectors, world) << _self.drafting_sectors("test_topology_query")
	_local an_area << pseudo_area.new_for_world(sectors, world)
	_local area_col << rwan:area_collection.new(dsm, an_area)
	_return rcol.filter_by_geometry( :centre_line, :interacting_with, area_col)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_private _method base_analysis_test_case.larger_area_surrounding_parkers_piece(dsm)
	_local (sectors, world) << _self.drafting_sectors("test_on_spatial_analysis_col")
	_local an_area << pseudo_area.new_for_world(sectors, world)
	_return rwan:area_collection.new(dsm, an_area)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_analysis_test_case.predicated_b_road_collection(dsm)
	_local col << _self.min_road_collection
	_local rcol << rwan:sw_collection.new(dsm, col)
	_local pred << predicate.eq(:road_type, "B-Road")
	_return rcol.filter_by_predicate(pred)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_analysis_test_case.predicated_hotel_collection(dsm)
	_local col << _self.hotel_collection
	_local rcol << rwan:sw_collection.new(dsm, col)
	_local pred << predicate.eq(:type, "Hotel")
	_return rcol.filter_by_predicate(pred)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_analysis_test_case.spatial_filter_hotel_collection(dsm)
	_local rcol << rwan:sw_collection.new(dsm, _self.hotel_collection)
	_local area << _self.larger_area_surrounding_parkers_piece(dsm)
	_return rcol.filter_by_geometry(:location, :within, area)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_analysis_test_case.spatial_filter_road_collection(dsm)
	_local rcol << rwan:sw_collection.new(dsm, _self.min_road_collection)
	_local area << _self.larger_area_surrounding_parkers_piece(dsm)
	_return rcol.filter_by_geometry(:centre_line, :within, area)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_analysis_test_case.distance_road_collection(dsm)
	_local rcol << rwan:sw_collection.new(dsm, _self.min_road_collection)
	_local area << _self.larger_area_surrounding_parkers_piece(dsm)
	_return rcol.filter_by_distance(:centre_line, unit_value(10, :m), area, _false)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_analysis_test_case.distance_hotel_collection(dsm)
	_local rcol << rwan:sw_collection.new(dsm, _self.hotel_collection)
	_local area << _self.larger_area_surrounding_parkers_piece(dsm)
	_return rcol.filter_by_distance(:location, unit_value(10, :m), area, _false)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_analysis_test_case.office_company_view_collection(dsm)
	_local off  << _self.office_collection
	_local comp << _self.company_collection
	_local col << rwan:sw_view_collection.new_eq(
				   dsm,
				   :office_company,
				   "Office Company",
				   {off,
				    comp},
				   {{off.field(:company_id), :|=|, comp.field(:id)}},
				   {{:office, :name, :office_name},
				    {:company, :company_name, :company_name},
				    {:office, :location, :office_location}})
	_return col
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_analysis_test_case.binary_op_road_collection(dsm)
	_local rcol << rwan:sw_collection.new(dsm, _self.min_road_collection)
	_local outer_area << _self.larger_area_surrounding_parkers_piece(dsm)
	_local outer << rcol.filter_by_geometry(:centre_line, :within, outer_area)
	_local inner_area << _self.area_surrounding_parkers_piece(dsm)
	_local inner << rcol.filter_by_geometry(:centre_line, :within, inner_area)
	_return outer.subtraction(inner)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_analysis_test_case.binary_op_hotel_collection(dsm)
	_local rcol << rwan:sw_collection.new(dsm, _self.hotel_collection)
	_local outer_area << _self.larger_area_surrounding_parkers_piece(dsm)
	_local outer << rcol.filter_by_geometry(:location, :within, outer_area)
	_local inner_area << _self.area_surrounding_parkers_piece(dsm)
	_local inner << rcol.filter_by_geometry(:location, :within, inner_area)
	_return outer.subtraction(inner)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_analysis_test_case.method_hotel_collection(dsm)
	_local rcol << rwan:record_collection.new(dsm, {_self.min_road_collection.an_element()})
	_return rcol.follow_method(_self.hotel_collection, :|nr_hotels()|, {5})
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_analysis_test_case.method_road_collection(dsm)
	_local rcol << rwan:record_collection.new(dsm, {_self.min_road_collection.an_element()})
	_return rcol.follow_method(_self.min_road_collection, :|nr_roads()|, {1000})
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_analysis_test_case.join_road_collection(dsm)
	_local pcol << rwan:sw_collection.new(dsm, _self.pub_rest_collection)
	_return pcol.follow_join(:min_roads)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_analysis_test_case.join_pub_collection(dsm)
	_local pcol << rwan:sw_collection.new(dsm, _self.min_road_collection)
	_return pcol.follow_join(:pub_rests)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_analysis_test_case.root_hotel_collection(dsm)
	_local hcol << rwan:sw_collection.new(dsm, _self.hotel_collection)
	_local hroad << rwan:sw_collection.new(dsm, _self.min_road_collection)
	_local follow_road_col << hcol.follow_topology(:location, _self.min_road_collection)
	_return follow_road_col.follow_root(_self.hotel_collection)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_analysis_test_case.root_road_collection(dsm)
	_local hcol << rwan:sw_collection.new(dsm, _self.hotel_collection)
	_local rcol << rwan:sw_collection.new(dsm, _self.min_road_collection)
	_local follow_road_col << rcol.follow_topology(:centre_line, _self.hotel_collection)
	_return follow_road_col.follow_root(_self.min_road_collection)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_analysis_test_case.topology_road_collection(dsm)
	_local hcol << rwan:sw_collection.new(dsm, _self.hotel_collection)
	_return hcol.follow_topology(:location, _self.min_road_collection)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_analysis_test_case.topology_hotel_collection(dsm)
	_local rcol << rwan:sw_collection.new(dsm, _self.min_road_collection)
	_return rcol.follow_topology(:centre_line, _self.hotel_collection)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_analysis_test_case.trace_road_collection(dsm)
	_local hcol << rwan:sw_collection.new(dsm, _self.hotel_collection)
	_return hcol.follow_trace(:location, _self.min_road_collection, {}, unit_value(400,:m))
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_analysis_test_case.trace_hotel_collection(dsm)
	_local hcol << rwan:sw_collection.new(dsm, _self.hotel_collection)
	_local rcol << hcol.follow_topology(:location, _self.min_road_collection)
	_return rcol.follow_trace(:centre_line, _self.hotel_collection, {}, unit_value(1000,:m))
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_analysis_test_case.area_binary_collection(dsm)
	_local (sectors, world) << _self.drafting_sectors("xor1")
	_local an_area1 << pseudo_area.new_for_world(sectors, world)
	_local area_col1 << rwan:area_collection.new(dsm, an_area1)
	sectors << _self.drafting_sectors("xor2")
	_local an_area2 << pseudo_area.new_for_world(sectors, world)
	_local area_col2 << rwan:area_collection.new(dsm, an_area2)
	_return area_col1.union(area_col2)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_analysis_test_case.spatial_hotel_collection(dsm)
	_local acol << _self.area_surrounding_parkers_piece(dsm)
	_local hcol << rwan:sw_collection.new(dsm, _self.hotel_collection)
	_local inside_col << hcol.filter_by_geometry(:location, :within, acol)
	_local gcol << inside_col.spatial_collection(:location)
	_return gcol, acol
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_analysis_test_case.spatial_binary_collection(dsm)
	_local (sectors, world) << _self.drafting_sectors("xor1")
	_local an_area << pseudo_area.new_for_world(sectors, world)
	_local area_col << rwan:area_collection.new(dsm, an_area)
	_local pr_col << rwan:sw_collection.new(dsm, _self.pub_rest_collection)
	_local filter_pr_col << pr_col.filter_by_geometry(:location, :within, area_col)
	_local spat_col1 << filter_pr_col.spatial_collection(:location)

	(sectors, world) << _self.drafting_sectors("xor2")
	an_area << pseudo_area.new_for_world(sectors, world)
	area_col << rwan:area_collection.new(dsm, an_area)
	pr_col << rwan:sw_collection.new(dsm, _self.pub_rest_collection)
	filter_pr_col << pr_col.filter_by_geometry(:location, :within, area_col)
	_local spat_col2 << filter_pr_col.spatial_collection(:location)
	_return spat_col1.union(spat_col2), spat_col1, spat_col2
_endmethod
$
_pragma(classify_level=basic, topic={analysis})
_method base_analysis_test_case.buffer_collection(dsm)
	_return _self.area_surrounding_parkers_piece(dsm).buffer(_unset, unit_value(1,:m))	
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_analysis_test_case.geometry_road_collection(dsm)
	_local col << _self.min_road_collection
	_local rec1 << col.select(predicate.eq(:name, "Park Terrace")).an_element()
	_local rec2 << col.select(predicate.eq(:name, "Regent Street")).an_element()
	_local gs << geometry_set.new_with(rec1.centre_line, rec2.centre_line)
	_return rwan:geometry_collection.new(dsm, gs)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_analysis_test_case.record_road_collection(dsm)
	_local col << _self.min_road_collection
	_local rec1 << col.select(predicate.eq(:name, "Park Terrace")).an_element()
	_local rec2 << col.select(predicate.eq(:name, "Regent Street")).an_element()
	_local rec3 << col.select(predicate.eq(:name, "Lensfield Road")).an_element()
	_return rwan:record_collection.new(dsm, {rec1, rec2, rec3})
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_analysis_test_case.record_hotel_collection(dsm)
	_local col << _self.hotel_collection
	_local rec1 << col.select(predicate.eq(:name, "Gonville Hotel")).an_element()
	_local rec2 << col.select(predicate.eq(:name, "University Arms")).an_element()
	_return rwan:record_collection.new(dsm, {rec1, rec2})
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method base_analysis_test_case.area_materialized_collection(dsm)
	_local (sectors, world) << _self.drafting_sectors("xor1")
	_local area1 << pseudo_area.new_for_world(sectors, world)

	(sectors, world) << _self.drafting_sectors("test_finding_hotels_near_parks")
	_local area2 <<  pseudo_area.new_for_world(sectors, world)

	_local union_area << area1.union(area2)
	union_area.world << world
	_local acol << rwan:area_collection.new(dsm, union_area)
	_local mat_col << rwan:area_materialized_collection.new(dsm, acol)
	_return mat_col, acol
_endmethod
$
