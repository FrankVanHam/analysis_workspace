#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package user
$


#remex(:sw_view_collection_test_case)

_pragma(classify_level=basic, topic={analysis})
## 
def_slotted_exemplar(:sw_view_collection_test_case,
	{},
	:base_analysis_test_case)
$


_pragma(classify_level=basic, topic={analysis})
_private _method sw_view_collection_test_case.office_company_view(dsm)
	_local off  << _self.office_collection
	_local comp << _self.company_collection
	_local col << rwan:sw_view_collection.new_eq(
				   dsm,
				   :office_company,
				   "Office Company",
				   {off,
				    comp},
				   {{off.field(:company_id), :|=|, comp.field(:id)}},
				   {{:office, :name, :office_name},
				    {:company, :company_name, :company_name},
				    {:office, :location, :office_location}})
	_return col
_endmethod
$


_pragma(classify_level=basic, topic={analysis})
_method sw_view_collection_test_case.test_simple_1_step_join()
	## 
	## Create a simple view over office and company.
	_local dsm << analysis_dataset_manager.new(:temp)
	_local col << _self.office_company_view(dsm)
	_self.assert_is( col.size, 7, "There should be 7 locations for companies")
	col.discard()
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_private _method sw_view_collection_test_case.private_spiatal_col()
	_local dsm << analysis_dataset_manager.new(:temp)
	_local col << _self.office_company_view(dsm)
	_local sectors << _self.drafting_sectors("test_poi_in_buffer_around_road")
	_local an_area << pseudo_area.new(sectors)
	_local area_col << rwan:area_collection.new(dsm, an_area)
	_local col1 << col.filter_by_geometry(:location, :within, area_col)
	_return col1
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method sw_view_collection_test_case.test_spatial()
	_local col << _self.private_spiatal_col()
	_self.assert_is(col.size, 1, "There is only 1 office location in the area")
	col.discard()
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method sw_view_collection_test_case.test_buffer()
	_local col << _self.private_spiatal_col()
	_local company_office_col << col.base_collection
	_local col1 << col.buffer(:location, length_value.new(100,:m))
	_local col2 << company_office_col.filter_by_geometry(:location, :within, col1)
	
	_self.assert_is(col2.size, 2, "There are 2 office location in the buffered area")
	col.discard()
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method sw_view_collection_test_case.test_predicate()
	##
	_local dsm << analysis_dataset_manager.new(:temp)
	_local col << _self.office_company_view(dsm)
	_local col1 << col.filter_by_predicate(predicate.wild(:company_name, "*Smallworld*"))
	_self.assert_is( col1.size, 2, "There should be 2 locations for companies")
	col.discard()
_endmethod
$
