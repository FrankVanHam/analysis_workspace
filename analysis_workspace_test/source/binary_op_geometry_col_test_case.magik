#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:binary_op_geometry_col_test_case)

_pragma(classify_level=basic, topic={analysis})
##
## Test distance filters.
##
def_slotted_exemplar(:binary_op_geometry_col_test_case,
	{},
	:base_analysis_db_test_case)
$

_pragma(classify_level=basic, topic={analysis})
_method binary_op_geometry_col_test_case.test_exposure()
	_local dsm << rwan:analysis_dataset_manager.new(:test)

	_local park_col << rwan:sw_collection.new(dsm, _self.park_collection)
	_local area_col << _self.area_collection(dsm, {0,0,100,0,100,100,0,100,0,0})

	_local op_col << park_col.binary_op_geometry(:coverage, :union, area_col, :geometry)
	_self.assert_unset(op_col.expose(), "expose should be unset")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method binary_op_geometry_col_test_case.test_simple()
	_local dsm << rwan:analysis_dataset_manager.new(:test)

	_local a1 << bounding_box.new(0,0,100000,100000)
	_local a2 << bounding_box.new(50000,50000,200000,200000)
	_local acol1 << _self.area_collection(dsm, a1.coords)
	_local acol2 << _self.area_collection(dsm, a2.coords)
	
	_for i_op _over {:intersection, :union, :xor, :subtraction}.fast_elements()
	_loop 
		_local bin_col << acol1.binary_op_geometry(:geometry, i_op, acol2, :geometry)
		_local bin_gs << bin_col.geometry_set(:geometry)
		_local correct_value << (pseudo_area.new(a1).perform(i_op+:|()|, pseudo_area.new(a2))).area
		
		_self.assert_equals(correct_value, bin_gs.areas_as_coverage().area, write_string(i_op, " should match"), 5)
	_endloop 
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method binary_op_geometry_col_test_case.test_multi_areas()
	_local dsm << rwan:analysis_dataset_manager.new(:test)
	_local acol1 << _self.areas_collection(dsm,
					       {bounding_box.new_with_size(0,0,10000,10000).coords,
						bounding_box.new_with_size(0,10000,10000,10000).coords,
						bounding_box.new_with_size(30000,0,10000,10000).coords})
	_local acol2 << _self.areas_collection(dsm,
					       {bounding_box.new_with_size(5000,5000,10000,10000).coords,
						bounding_box.new_with_size(5000,-5000,10000,10000).coords,
						bounding_box.new_with_size(3000,30000,10000,10000).coords})
	
	_local bin_col << acol1.binary_op_geometry(:geometry, :intersection, acol2, :geometry)
	_local bin_gs << bin_col.geometry_set(:geometry)
	_local bin_area << bin_gs.areas_as_coverage()
	_local correct_value << (5000*5000)*3
	_self.assert_equals(correct_value, bin_area.area, write_string("Intersection should match"), 1)
	
	bin_col << acol1.binary_op_geometry(:geometry, :union, acol2, :geometry)
	bin_gs << bin_col.geometry_set(:geometry)
	bin_area << bin_gs.areas_as_coverage()
	correct_value << (5000*5000)*21
	
	_self.assert_equals(correct_value, bin_area.area, write_string("Union should match"), 1)
	
	bin_col << acol1.binary_op_geometry(:geometry, :xor, acol2, :geometry)
	bin_gs << bin_col.geometry_set(:geometry)
	bin_area << bin_gs.areas_as_coverage()
	correct_value << (5000*5000)*18
	
	_self.assert_equals(correct_value, bin_area.area, write_string("Xor should match"), 1)

	bin_col << acol1.binary_op_geometry(:geometry, :subtraction, acol2, :geometry)
	bin_gs << bin_col.geometry_set(:geometry)
	bin_area << bin_gs.areas_as_coverage()
	correct_value << (5000*5000)*9
	_self.assert_equals(correct_value, bin_area.area, write_string("Subtraction should match"), 1)
_endmethod
$


_pragma(classify_level=basic, topic={analysis})
_method binary_op_geometry_col_test_case.test_area_collection()
	_self.create_park("p1", bounding_box.new(50000,50000,200000,200000).coords)
	_local dsm  << rwan:analysis_dataset_manager.new(:test)
	_local acol << rwan:sw_collection.new(dsm, _self.park_collection)
	
	_local acol1 << _self.area_collection(dsm, bounding_box.new(0,0,100000,100000).coords)
	_local acol2 << _self.area_collection(dsm, bounding_box.new(120000,0,200000,100000).coords)
	_local bin_col << acol1.binary_op_geometry(:geometry, :union, acol2, :geometry)
	
	_local fcol << acol.filter_by_distance(:coverage, length_value(1,:m), _false, bin_col, :geometry)
	_self.assert_equals(1, fcol.size, "one park is within 1 meter of the area")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method binary_op_geometry_col_test_case.test_spatial_filter_collection()
	## setup 2 parks, filter them on their bounds and check if parks
	## are near by.
	_self.create_park("p1", {0,0,10000,0,10000,10000,0,10000,0,0})
	_self.create_park("p2", {11000,0,20000,0,20000,10000,11000,10000,11000,0})
	_self.create_park("p3", {11000,11000,20000,11000,20000,20000,11000,20000,11000, 11000})
	
	_local dsm  << rwan:analysis_dataset_manager.new(:test)
	_local acol << rwan:sw_collection.new(dsm, _self.park_collection)
	
	_local acol1 << _self.area_collection(dsm, bounding_box.new(-10,-10,10010,20010).coords)
	_local acol2 << _self.area_collection(dsm, bounding_box.new(10010,0,20010,20010).coords)
	_local bin_col << acol1.binary_op_geometry(:geometry, :union, acol2, :geometry)

	_local fcol << acol.filter_by_geometry(:coverage, :within, bin_col, :geometry)
	_self.assert_equals(3, fcol.size, "3 parks in all")
	
	_local tcol << fcol.filter_by_distance(:coverage, length_value(1,:m), _false, fcol, :coverage)
	_self.assert_equals(3, tcol.size, "3 parks in all")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method binary_op_geometry_col_test_case.test_geometry_set()
	_self.create_park("p1", {0,0,10000,0,10000,10000,0,10000,0,0})
	_local dsm  << rwan:analysis_dataset_manager.new(:test)
	_local acol << rwan:sw_collection.new(dsm, _self.park_collection)
	
	_local acol1 << _self.area_collection(dsm, bounding_box.new(-10,-10,10010,20010).coords)
	_local acol2 << _self.area_collection(dsm, bounding_box.new(10010,0,20010,20010).coords)
	_local bin_col << acol1.binary_op_geometry(:geometry, :union, acol2, :geometry)

	_local fcol << acol.filter_by_distance(:coverage, length_value(1,:m), _false, bin_col, :geometry)
	_local gs << fcol.geometry_set(:coverage)
	_self.assert_equals(1, gs.size, "1 geometry")
	_self.assert_not_unset(fcol.goto_bounds)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method binary_op_geometry_col_test_case.test_basic()
	## Test includes?() and an_element() and size
	## 
	_local dsm  << rwan:analysis_dataset_manager.new(:test)
	_local s1 << _self.sector_rope_from(bounding_box.new_with_size(0,100, 1000,1000).coords)
	_local s2 << _self.sector_rope_from(bounding_box.new_with_size(1000,1000, 1000,1000).coords)
	_local s3 << _self.sector_rope_from(bounding_box.new_with_size(2000,100, 1000,1000).coords)
	_local p1 << pseudo_area.new_for_world(s1, _self.gv.world)
	_local p2 << pseudo_area.new_for_world(s2, _self.gv.world)
	_local p3 << pseudo_area.new_for_world(s3, _self.gv.world)
		
	_local s1 << rwan:geometry_collection.new(dsm, geometry_set.new_with(p1,p2))
	_local s2 << rwan:geometry_collection.new(dsm, geometry_set.new_with(p2,p3))
	
	_local op_col << s1.binary_op(:xor, s2)
	
	_self.assert_true(op_col.ref_collections.includes?(s1), "S1 is the base")
	_self.assert_true(op_col.ref_collections.includes?(s2), "S2 is the base")
	_self.assert_true(op_col.includes?(p1), "P1 should be included")
	_self.assert_false(op_col.includes?(p2), "P2 should not be included")
	
	_local an << op_col.an_element()
	_self.assert_true((p1 = an) _orif (p3 = an), "Should be one of 2")
	_self.assert_equals(2, op_col.size, "Size = 2")
_endmethod
$
