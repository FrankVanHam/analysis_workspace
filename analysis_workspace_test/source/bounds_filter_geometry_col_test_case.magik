#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:binary_op_geometry_col_test_case)

_pragma(classify_level=basic, topic={analysis})
##
## Test filter a geometry collection by bounds
##
def_slotted_exemplar(:bounds_filter_geometry_col_tc,
	{},
	:base_analysis_db_test_case)
$

_pragma(classify_level=basic, topic={analysis})
_method bounds_filter_geometry_col_tc.test_geom_category
	_local dsm << rwan:analysis_dataset_manager.new(:test)
	_local area_col << _self.area_collection(dsm, bounding_box.new_with_size(0,0,1000,1000).coords)
	_local filter_col << area_col.filter_by_bounds(:geometry, bounding_box.new(0,0,100,100))
	
	_self.assert_equals(1, filter_col.size, "Should be 1")
	_self.assert_equals(:area, filter_col.geom_category, "Should be area")
	
	_local line_col << _self.lines_collection(dsm, {{0,0,100,100}})
	filter_col << line_col.filter_by_bounds(:geometry, bounding_box.new_with_size(10000,100000,100,100))
	_self.assert_equals(0, filter_col.size, "Should be 0")
	_self.assert_equals(:linear, filter_col.geom_category, "Should be line")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method bounds_filter_geometry_col_tc.test_basic()
	## Test includes?() and an_element() and size
	## 
	_local dsm  << rwan:analysis_dataset_manager.new(:test)
		
	_local s1 << _self.sector_rope_from(bounding_box.new_with_size(0,100, 1000,1000).coords)
	_local s2 << _self.sector_rope_from(bounding_box.new_with_size(1000,1000, 1000,1000).coords)
	_local s3 << _self.sector_rope_from(bounding_box.new_with_size(2000,100, 1000,1000).coords)
	
	_local p1 << pseudo_area.new_for_world(s1, _self.gv.world)
	_local p2 << pseudo_area.new_for_world(s2, _self.gv.world)
	_local p3 << pseudo_area.new_for_world(s3, _self.gv.world)
	
	_local park_col << rwan:geometry_collection.new(dsm, geometry_set.new_with(p1,p2,p3))
	
	_local bounds_col << park_col.filter_by_bounds(:coverage, bounding_box.new_with_size(0,0,3000,200))
	_self.assert_true(bounds_col.ref_collections.includes?(park_col), "Road is the base")
	_self.assert_true(bounds_col.includes?(p1), "P1 should be includes")
	_self.assert_false(bounds_col.includes?(p2), "P2 should not be includes")
	
	_local an << bounds_col.an_element()
	_self.assert_true((p1 = an) _orif (p3 = an), "Should be one of 2")
	_self.assert_equals(2, bounds_col.size, "Size = 2")
_endmethod
$
