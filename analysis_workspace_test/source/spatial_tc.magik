#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$


_pragma(classify_level=basic, topic={analysis})
##
## Test using geometry filters.
def_slotted_exemplar(:spatial_tc,
	{},
	:base_analysis_test_case)
$

_pragma(classify_level=basic, topic={analysis})
_method spatial_tc.test_on_sw_col()
	_local dsm << rwan:analysis_dataset_manager.new(:test)
	_local hcol << rwan:sw_collection.new(dsm, _self.hotel_collection)
	_local loc_col << hcol.spatial_collection(:location)
	
	_local touch_col << hcol.filter_by_geometry(:location, :interacting_with, loc_col)
	_self.assert_equals(hcol.size, touch_col.size, "All hotels are touching of their buffer (#1)")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method spatial_tc.test_on_pred_filter_col()
	_local dsm << rwan:analysis_dataset_manager.new(:test)
	_local hcol << _super.predicated_hotel_collection(dsm)
	_local loc_col << hcol.spatial_collection(:location)
	
	_local touch_col << hcol.filter_by_geometry(:location, :interacting_with, loc_col)
	_self.assert_equals(hcol.size, touch_col.size, "All hotels are touching of their buffer (#1)")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method spatial_tc.test_on_spatial_filter_col()
	_local dsm << rwan:analysis_dataset_manager.new(:test)
	_local hcol  << _super.spatial_filter_hotel_collection(dsm)
	_local loc_col << hcol.spatial_collection(:location)
	
	_local touch_col << hcol.filter_by_geometry(:location, :interacting_with, loc_col)
	_self.assert_equals(hcol.size, touch_col.size, "All hotels are touching of their buffer (#1)")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method spatial_tc.test_on_distance_filter_col()
	_local dsm << rwan:analysis_dataset_manager.new(:test)
	_local hcol << _self.distance_hotel_collection(dsm)
	_local loc_col << hcol.spatial_collection(:location)
	
	_local touch_col << hcol.filter_by_geometry(:location, :interacting_with, loc_col)
	_self.assert_equals(hcol.size, touch_col.size, "All hotels are touching of their buffer (#1)")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method spatial_tc.test_on_view_col()
	_local dsm << rwan:analysis_dataset_manager.new(:test)
	_local vcol << _self.office_company_view_collection(dsm)
	_local loc_col << vcol.spatial_collection(:location)
	
	_local touch_col << vcol.filter_by_geometry(:location, :interacting_with, loc_col)
	_self.assert_equals(vcol.size, touch_col.size, "All offices are touching of their buffer (#1)")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method spatial_tc.test_on_binary_col()
	_local dsm << rwan:analysis_dataset_manager.new(:test)
	_local hcol << _self.binary_op_hotel_collection(dsm)
	_local loc_col << hcol.spatial_collection(:location)
	
	_local touch_col << hcol.filter_by_geometry(:location, :interacting_with, loc_col)
	_self.assert_equals(hcol.size, touch_col.size, "All hotels are touching of their buffer (#1)")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method spatial_tc.test_on_method_col()
	_local dsm << rwan:analysis_dataset_manager.new(:test)
	_local hcol << _self.method_hotel_collection(dsm)
	_local loc_col << hcol.spatial_collection(:location)
	
	_local touch_col << hcol.filter_by_geometry(:location, :interacting_with, loc_col)
	_self.assert_equals(hcol.size, touch_col.size, "All hotels are touching of their buffer (#1)")	
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method spatial_tc.test_on_join_col()
	_local dsm << rwan:analysis_dataset_manager.new(:test)
	_local hcol << _self.join_pub_collection(dsm)
	_local loc_col << hcol.spatial_collection(:location)
	
	_local touch_col << hcol.filter_by_geometry(:location, :interacting_with, loc_col)
	_self.assert_equals(hcol.size, touch_col.size, "All pubs are touching of their buffer (#1)")	
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method spatial_tc.test_on_root_col()
	_local dsm << rwan:analysis_dataset_manager.new(:test)
	_local hcol << _self.root_hotel_collection(dsm)
	_local loc_col << hcol.spatial_collection(:location)
	_local touch_col << hcol.filter_by_geometry(:location, :interacting_with, loc_col)
	_self.assert_equals(hcol.size, touch_col.size, "All hotels are touching of their buffer (#1)")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method spatial_tc.test_on_topology_col()
	_local dsm << rwan:analysis_dataset_manager.new(:test)
	_local hcol << _self.topology_hotel_collection(dsm)
	_local loc_col << hcol.spatial_collection(:location)
	_local touch_col << hcol.filter_by_geometry(:location, :interacting_with, loc_col)
	_self.assert_equals(hcol.size, touch_col.size, "All hotels are touching of their buffer (#1)")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method spatial_tc.test_on_trace_col()
	_local dsm << rwan:analysis_dataset_manager.new(:test)
	_local hcol << _self.trace_hotel_collection(dsm)
	_local loc_col << hcol.spatial_collection(:location)
	_local touch_col << hcol.filter_by_geometry(:location, :interacting_with, loc_col)
	_self.assert_equals(hcol.size, touch_col.size, "All hotels are touching of their buffer (#1)")
_endmethod
$

_pragma(follow_root_tc=basic, topic={analysis})
_method spatial_tc.test_on_record_col()
	_local dsm << rwan:analysis_dataset_manager.new(:test)
	_local hcol << _self.record_hotel_collection(dsm)
	_local loc_col << hcol.spatial_collection(:location)
	_local touch_col << hcol.filter_by_geometry(:location, :interacting_with, loc_col)
	_self.assert_equals(hcol.size, touch_col.size, "All hotels are touching of their buffer (#1)")
_endmethod
$
