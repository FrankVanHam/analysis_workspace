#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$


_pragma(classify_level=basic, topic={analysis})
##
## Test using geometry filters.
def_slotted_exemplar(:follow_root_tc,
	{},
	:base_analysis_test_case)
$

_pragma(classify_level=basic, topic={analysis})
_method follow_root_tc.test_on_sw_col()
	_local dsm << rwan:analysis_dataset_manager.new(:test)
	_local hcol << rwan:sw_collection.new(dsm, _self.min_road_collection)
	_local wcol << hcol.follow_join(:walks)
	_local rcol << wcol.follow_root(_self.min_road_collection)
	
	_self.assert_is(rcol.size, 2, "There are only 2 road roots")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method follow_root_tc.test_on_pred_filter_col()
	_local dsm << rwan:analysis_dataset_manager.new(:test)
	_local hcol << _super.predicated_hotel_collection(dsm)
	_local rwcol << hcol.follow_trace(:location, _self.road_works_collection, {}, unit_value(400,:m))
	_local pcol1 << rwcol.follow_root(_self.hotel_collection)
	_self.assert_equals(pcol1.size, 3, "There are 3 hotels that trace to a road work (not #1)")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method follow_root_tc.test_on_spatial_filter_col()
	_local dsm << rwan:analysis_dataset_manager.new(:test)
	_local hcol  << _super.spatial_filter_hotel_collection(dsm)
	_local rwcol << hcol.follow_trace(:location, _self.road_works_collection, {}, unit_value(400,:m))
	_local pcol1 << rwcol.follow_root(_self.hotel_collection)
	_self.assert_equals(pcol1.size, 1, "There is 1 hotel that traced to a road work (not #1)")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method follow_root_tc.test_on_distance_filter_col()
	_local dsm << rwan:analysis_dataset_manager.new(:test)
	_local hcol << _self.distance_hotel_collection(dsm)
	_local rwcol << hcol.follow_trace(:location, _self.road_works_collection, {}, unit_value(400,:m))
	_local pcol1 << rwcol.follow_root(_self.hotel_collection)
	_self.assert_equals(pcol1.size, 1, "There is 1 hotel that traced to a road work (not #1)")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method follow_root_tc.test_on_view_col()
	_local dsm << rwan:analysis_dataset_manager.new(:test)
	_local vcol << _self.office_company_view_collection(dsm)
	_local rwcol << vcol.follow_trace(:office_location, _self.road_works_collection, {}, unit_value(400,:m))
	_local pcol1 << rwcol.follow_root(vcol.actual_collection)
	_self.assert_equals(pcol1.size, 2, "There is 2 office that traced to a road work (not #1)")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method follow_root_tc.test_on_binary_col()
	_local dsm << rwan:analysis_dataset_manager.new(:test)
	_local hcol << _self.binary_op_hotel_collection(dsm)
	_local rwcol << hcol.follow_trace(:location, _self.road_works_collection, {}, unit_value(1000,:m))
	_local pcol1 << rwcol.follow_root(_self.hotel_collection)
	_self.assert_equals(pcol1.size, 1, "There is 1 hotel that traced to a road work (not #1)")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method follow_root_tc.test_on_method_col()
	_local dsm << rwan:analysis_dataset_manager.new(:test)
	_local hcol << _self.method_hotel_collection(dsm)
	_local rwcol << hcol.follow_trace(:location, _self.road_works_collection, {}, unit_value(1000,:m))
	_local pcol1 << rwcol.follow_root(_self.hotel_collection)
	_self.assert_equals(pcol1.size, 3, "There are 3 hotels that traced to a road work (not #1)")	
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method follow_root_tc.test_on_join_col()
	_local dsm << rwan:analysis_dataset_manager.new(:test)
	_local hcol << _self.join_road_collection(dsm)
	_local rwcol << hcol.follow_trace(:centre_line, _self.road_works_collection, {}, unit_value(100,:m))
	_local pcol1 << rwcol.follow_root(_self.min_road_collection)
	_self.assert_equals(pcol1.size, 3, "There are 3 hotels that traced to a road work (not #1)")	
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method follow_root_tc.test_on_root_col()
	_local dsm << rwan:analysis_dataset_manager.new(:test)
	_local hcol << _self.root_road_collection(dsm)	
	_local rwcol << hcol.follow_trace(:centre_line, _self.road_works_collection, {}, unit_value(100,:m))
	_local pcol1 << rwcol.follow_root(_self.min_road_collection)
	_self.assert_equals(pcol1.size, 4, "There are 4 hotels that traced to a road work (not #1)")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method follow_root_tc.test_on_topology_col()
	_local dsm << rwan:analysis_dataset_manager.new(:test)
	_local hcol << _self.topology_hotel_collection(dsm)
	_local rwcol << hcol.follow_trace(:location, _self.road_works_collection, {}, unit_value(1000,:m))
	_local pcol1 << rwcol.follow_root(_self.hotel_collection)
	_self.assert_equals(pcol1.size, 5, "There are 5 hotels that traced to a road work (not #1)")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method follow_root_tc.test_on_trace_col()
	_local dsm << rwan:analysis_dataset_manager.new(:test)
	_local hcol << _self.trace_hotel_collection(dsm)
	_local rwcol << hcol.follow_trace(:location, _self.road_works_collection, {}, unit_value(1000,:m))
	_local pcol1 << rwcol.follow_root(_self.hotel_collection)
	_self.assert_equals(pcol1.size, 7, "There are 7 hotels that traced to a road work (not #1)")
_endmethod
$

_pragma(follow_root_tc=basic, topic={analysis})
_method follow_root_tc.test_on_record_col()
	_local dsm << rwan:analysis_dataset_manager.new(:test)
	_local hcol << _self.record_hotel_collection(dsm)
	_local rwcol << hcol.follow_trace(:location, _self.road_works_collection, {}, unit_value(1000,:m))
	_local pcol1 << rwcol.follow_root(_self.hotel_collection)
	_self.assert_equals(pcol1.size, 2, "There are 2 hotels that traced to a road work (not #1)")
_endmethod
$
########################################################################################

_pragma(classify_level=basic, topic={analysis})
_method follow_root_tc.test_pub_rest_with_A_road_access()
	_local dsm << rwan:analysis_dataset_manager.new(:test)
	_local pcol << rwan:sw_collection.new(dsm, _self.pub_rest_collection)
	_local acol << pcol.follow_join(:min_roads)
	_local acol1 << acol.filter_by_predicate(predicate.eq(:road_type,"A-Road"))
	
	_local pcol1 << acol1.follow_root(_self.pub_rest_collection)	
	_self.assert_is(pcol1.size, 4, "There are 4 pub/restaurant accessible by an A-Road") 
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method follow_root_tc.test_pub_rest_with_a_road_access_with_current_roadworks()
	_local dsm << analysis_dataset_manager.new(:test)
	_local pcol << rwan:sw_collection.new(dsm, _self.pub_rest_collection)
	_local acol << pcol.follow_join(:min_roads)
	_self.assert_is(acol.expose().name, :min_road, "is min road")
	_local rwcol << acol.follow_topology(:centre_line, _self.road_works_collection)
	_self.assert_is(rwcol.expose().name, :road_works, "is")
	_local rwcol1 << rwcol.filter_by_predicate(predicate.eq(:status, "Current"))
	_local rcol << rwcol1.follow_root(_self.min_road_collection)
	_self.assert_is(rcol.size, 1, "There is 1 road with a current roadwork leading to a pub")
	_local pcol1 << rwcol1.follow_root(_self.min_road_collection)
	_self.assert_is(pcol1.size, 1, "There is 1 pub/restaurant accessible by a Road with a current roadwork") 
_endmethod
$
