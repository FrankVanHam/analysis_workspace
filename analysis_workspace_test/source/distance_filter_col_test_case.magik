#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:distance_filter_col_test_case)

_pragma(classify_level=basic, topic={analysis})
##
## Test distance filters.
##
def_slotted_exemplar(:distance_filter_col_test_case,
	{},
	:base_analysis_db_test_case)
$

_pragma(classify_level=basic, topic={analysis})
_method distance_filter_col_test_case.test_exposure()
	_local dsm << rwan:analysis_dataset_manager.new(:test)

	# road analytic collection and area 
	_local acol << rwan:sw_collection.new(dsm, _self.min_road_collection)
	_local area_col << _self.area_collection(dsm, {0,0,100,0,100,100,0,100,0,0})

	_local filter_col << acol.filter_by_distance(:centre_line, length_value(10,:m), _false, area_col, :geometry)
	_self.assert_equals( _self.min_road_collection, filter_col.expose(), "the core collection is still the road collection")

	_local filter_col2 << filter_col.filter_by_distance(:centre_line, length_value(10,:m), _false, area_col, :geometry)
	_self.assert_equals( _self.min_road_collection, filter_col2.expose(), "the core (2) collection is still the road collection")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method distance_filter_col_test_case.test_distance()
	_self.create_park("p1", {0,0,50000,0,50000,50000,0,50000,0,0})
	_local dsm  << rwan:analysis_dataset_manager.new(:test)
	_local acol << rwan:sw_collection.new(dsm, _self.park_collection)
	
	_local pcol << _self.points_collection(dsm, {{0,51000},{0,52000}})
	_local fcol << acol.filter_by_distance(:coverage, length_value(1,:m), _false, pcol, :geometry)
	_self.assert_equals(1, fcol.size, "one park is within 1 meter")

	pcol << _self.points_collection(dsm, {{0,51000},{1000,51000}})
	fcol << acol.filter_by_distance(:coverage, length_value(1,:m), _false, pcol, :geometry)
	_self.assert_equals(1, fcol.size, "one park is within 1 meter, with 2 hits, but still one park")

	fcol << acol.filter_by_distance(:coverage, length_value(0.9,:m), _false, pcol, :geometry)
	_self.assert_equals(0, fcol.size, "no park within 0.9 m")
	
	pcol << _self.points_collection(dsm, {{0,51000}})
	fcol << acol.filter_by_distance(:coverage, length_value(1,:m), _false, pcol, :geometry)
	fcol << fcol.filter_by_distance(:coverage, length_value(0.9,:m), _true, pcol, :geometry)
	_self.assert_equals(1, fcol.size, "one park of the parks within 1 meter is not within 0.9 meter")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method distance_filter_col_test_case.test_area_collection()
	_self.create_park("p1", {0,0,50000,0,50000,50000,0,50000,0,0})
	_local dsm  << rwan:analysis_dataset_manager.new(:test)
	_local acol << rwan:sw_collection.new(dsm, _self.park_collection)
	
	_local pcol << _self.area_collection(dsm, {51000, 0, 100000, 0, 100000, 50000, 51000, 50000, 51000, 0})
	_local fcol << acol.filter_by_distance(:coverage, length_value(1,:m), _false, pcol, :geometry)
	_self.assert_equals(1, fcol.size, "one park is within 1 meter of the area")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method distance_filter_col_test_case.test_spatial_filter_collection()
	## setup 2 parks, filter them on their bounds and check if parks
	## are near by.
	_self.create_park("p1", {0,0,10000,0,10000,10000,0,10000,0,0})
	_self.create_park("p2", {11000,0,20000,0,20000,10000,11000,10000,11000,0})
	_self.create_park("p3", {11000,11000,20000,11000,20000,20000,11000,20000,11000, 11000})
	
	_local dsm  << rwan:analysis_dataset_manager.new(:test)
	_local acol << rwan:sw_collection.new(dsm, _self.park_collection)
	
	_local area_col << _self.area_collection(dsm, {-10,-10, 20010, -10, 20010, 20010, -10, 20010, -10, -10})
	_local fcol << acol.filter_by_geometry(:coverage, :within, area_col, :geometry)
	_self.assert_equals(3, fcol.size, "3 parks in all")
	
	_local tcol << fcol.filter_by_distance(:coverage, length_value(1,:m), _false, fcol, :coverage)
	_self.assert_equals(3, tcol.size, "3 parks in all")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method distance_filter_col_test_case.test_geometry_set()
	_self.create_park("p1", {0,0,50000,0,50000,50000,0,50000,0,0})
	_local dsm  << rwan:analysis_dataset_manager.new(:test)
	_local acol << rwan:sw_collection.new(dsm, _self.park_collection)
	
	_local pcol << _self.area_collection(dsm, {51000, 0, 100000, 0, 100000, 50000, 51000, 50000, 51000, 0})
	_local fcol << acol.filter_by_distance(:coverage, length_value(1,:m), _false, pcol, :geometry)
	_local gs << fcol.geometry_set(:coverage)
	_self.assert_equals(1, gs.size, "1 geometry")
	_self.assert_not_unset(fcol.goto_bounds)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method distance_filter_col_test_case.test_basic()
	## Test includes?() and an_element() and size
	## 
	_local dsm  << rwan:analysis_dataset_manager.new(:test)
	_local park_col << rwan:sw_collection.new(dsm, _self.park_collection)
	
	_local p1 << _self.create_park("p1", bounding_box.new_with_size(0,100, 1000,1000).coords)
	_local p2 << _self.create_park("p2", bounding_box.new_with_size(1000,1000, 1000,1000).coords)
	_local p3 << _self.create_park("p3", bounding_box.new_with_size(2000,100, 1000,1000).coords)
	
	_local line_col << _self.lines_collection(dsm, {{0,0,3000,0}})
	_local fcol << park_col.filter_by_distance(:coverage, length_value(200,:mm), _false, line_col, :geometry)
	
	_self.assert_true(fcol.ref_collections.includes?(park_col), "Road is the base")
	_self.assert_true(fcol.includes?(p1), "P1 should be includes")
	_self.assert_false(fcol.includes?(p2), "P2 should not be includes")
	
	_local an << fcol.an_element()
	_self.assert_true((p1 = an) _orif (p3 = an), "Should be one of 2")
	_self.assert_equals(2, fcol.size, "Size = 2")
	
	# inverse if
	_local b_col << park_col.filter_by_bounds(:coverage, bounding_box.new_with_size(0,0,3000,1000))
	fcol << b_col.filter_by_distance(:coverage, length_value(200,:mm), _true, line_col, :geometry)
	_self.assert_true(fcol.includes?(p2), "P2 should be includes")
	_self.assert_false(fcol.includes?(p1), "P1 should not be includes")
	
	an << fcol.an_element()
	_self.assert_true((p2 = an), "Should be one really")
	_self.assert_equals(1, fcol.size, "Size = 1")
_endmethod
$
