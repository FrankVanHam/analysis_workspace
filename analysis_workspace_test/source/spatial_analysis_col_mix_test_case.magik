#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$


_pragma(classify_level=basic, topic={analysis})
##
## Test using geometry filters.
def_slotted_exemplar(:spatial_analysis_col_mix_test_case,
	{},
	:base_analysis_test_case)
$

_pragma(classify_level=basic, topic={analysis})
_private _method spatial_analysis_col_mix_test_case.larger_area_surrounding_parkers_piece(dsm)
	_local sectors << _self.drafting_sectors("test_on_spatial_analysis_col")
	_local world << _self.hotel_collection.dataset.world
	_local an_area << pseudo_area.new_for_world(sectors, world)
	_return rwan:area_collection.new(dsm, an_area)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method spatial_analysis_col_mix_test_case.test_on_analysis_col()
	_local dsm << rwan:analysis_dataset_manager.new(:test)
	_local hcol << rwan:sw_collection.new(dsm, _self.hotel_collection)
	_local area << _self.area_surrounding_parkers_piece(dsm)
	_local hcol1 << hcol.filter_by_geometry(:location, :within, area)
	_self.assert_is(hcol1.size, 2, "There are 2 hotels in the area")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method spatial_analysis_col_mix_test_case.test_on_spatial_analysis_col()
	_local dsm << rwan:analysis_dataset_manager.new(:test)
	_local hcol << rwan:sw_collection.new(dsm, _self.hotel_collection)
	_local larger_area << _self.larger_area_surrounding_parkers_piece(dsm)
	_local hcol1 << hcol.filter_by_geometry(:location, :within, larger_area)
	_self.assert_is(hcol1.size, 3, "There are 3 hotels in the larger area")
	
	_local area << _self.area_surrounding_parkers_piece(dsm)
	_local hcol2 << hcol1.filter_by_geometry(:location, :within, area)
	_self.assert_is(hcol2.size, 2, "There are 2 hotels in the smaller area in the larger area")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method spatial_analysis_col_mix_test_case.test_on_predicate_analysis_col()
	_local dsm << rwan:analysis_dataset_manager.new(:test)
	_local pcol << rwan:sw_collection.new(dsm, _self.pub_rest_collection)
	_local pcol1 << pcol.filter_by_predicate(predicate.eq(:cuisine, "Chinese"))
	_local area << _self.area_surrounding_parkers_piece(dsm)
	_local pcol2 << pcol1.filter_by_geometry(:location, :within, area) 
	_self.assert_is(pcol2.size, 2, "2 Chinese near parkers. a")
	
	# otherway around
	pcol11 << pcol.filter_by_geometry(:location, :within, area)
	pcol12 << pcol11.filter_by_predicate(predicate.eq(:cuisine, "Chinese"))
	_self.assert_is(pcol2.size, 2, "2 Chinese near parkers. b")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method spatial_analysis_col_mix_test_case.test_on_analysis_set()
	_local dsm << rwan:analysis_dataset_manager.new(:test)
	_local pcol << rwan:sw_collection.new(dsm, _self.pub_rest_collection)
	_local pcol1 << pcol.filter_by_predicate(predicate.eq(:cuisine, "Chinese"))
	_local s << equality_set.new_from_iter( pcol1, :|fast_elements()|)
	_local set << rwan:record_set.new(dsm, s)
	_local area << _self.area_surrounding_parkers_piece(dsm)
	_local pcol2 << set.filter_by_geometry(:location, :within, area) 
	_self.assert_is(pcol2.size, 2, "2 Chinese near parkers. a")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method spatial_analysis_col_mix_test_case.test_with_buffer_col()
	_local dsm << rwan:analysis_dataset_manager.new(:test)
	_local hcol << rwan:sw_collection.new(dsm, _self.hotel_collection)
	_local area << _self.area_surrounding_parkers_piece(dsm)
	_local hcol1 << hcol.filter_by_geometry(:location, :within, area)
	_local pcol << rwan:sw_collection.new(dsm, _self.park_collection)
	_local buffer_col << pcol.buffer(:coverage, length_value.new(30, :m))
	hcol2 << hcol1.filter_by_geometry(:location, :within, buffer_col)
	_self.assert_is(hcol2.size, 2, "There should be 2 hotels near parker's Piece")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method spatial_analysis_col_mix_test_case.test_with_buffer_col2()
	_local dsm << rwan:analysis_dataset_manager.new(:test)
	_local sectors << _self.drafting_sectors("test_poi_in_buffer_around_road")
	_local an_area << pseudo_area.new(sectors)
	_local area_col << rwan:area_collection.new(dsm, an_area)
	_local col << _self.min_road_collection
	_local acol << rwan:sw_collection.new(dsm, col)
	_local acol2 << acol.filter_by_geometry( :centre_line, :interacting_with, area_col )

	_self.assert_is( acol2.size, 5, "There should be 5 roads interacting")
	_local acol3 << acol2.buffer(:centre_line, length_value.new(1, :m))
	
	_local pcol << rwan:sw_collection.new(dsm, _self.poi_collection)
	_local pcol2 << pcol.filter_by_geometry( :location, :within, acol3 )
	_self.assert_is( pcol2.size, 4, "There should be 4 pois nearby")	
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method spatial_analysis_col_mix_test_case.test_hotels_interacting_with_road()
	_local dsm << rwan:analysis_dataset_manager.new(:test)
	_local rcol << rwan:sw_collection.new(dsm, _self.min_road_collection)
	_local area << _self.area_surrounding_parkers_piece(dsm)
	_local rcol1 << rcol.filter_by_geometry(:centre_line, :interacting_with, area)
	_local hcol << rcol1.follow_topology(:centre_line, _self.hotel_collection)
	_local hcol1 << hcol.filter_by_geometry(:location, :within, area)
	_self.assert_is(hcol1.size, 2, "there are two hotels in the area, interating with roads")
	_local rgeom << rcol1.spatial_collection(:centre_line)
	_local hotel_col << rwan:sw_collection.new(dsm,_self.hotel_collection)
	# I would think to uses touches?. But that is not correct for a
	# line and point. To test if a point is on a line you should
	# use :within.
	_local hotel_col1 << hotel_col.filter_by_geometry(:location, :within, rgeom)
	_local hotel_col2 << hotel_col1.filter_by_geometry(:location, :within, area)
	_self.assert_is(hotel_col2.size, 2, "there are two hotels in the area, touching with roads")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method spatial_analysis_col_mix_test_case.test_with_spatial_collection()
	_local dsm << rwan:analysis_dataset_manager.new(:test)
	_local rec << _self.park_collection.select(predicate.eq(:name, "Downing Site")).an_element()
	_local pset << rwan:record_set.new(dsm, {rec})
	_local pcol << rwan:sw_collection.new(dsm, _self.park_collection)
	_local pcol1 << pcol.filter_by_predicate(predicate.wild(:name, "Parker*"))
	_local combi << pset.union(pcol1)
	_local geom << combi.spatial_collection(:coverage)
	
	_local rcol << rwan:sw_collection.new(dsm, _self.min_road_collection)
	_local rcol1 << rcol.filter_by_geometry(:centre_line, :overlapping, geom)
	_self.assert_is(rcol1.size, 1, "There is one road in Downing site that is overlapping road")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method spatial_analysis_col_mix_test_case.test_with_spatial_collection2()
	# first select the park with more then 1 seat: Jesus
	# Green. Then select all the *Midsummer Common* s common.
	# do an or.
	# Then find all the overlapping footpaths.
	_local dsm << rwan:analysis_dataset_manager.new(:test)
	_local pcol << rwan:sw_collection.new(dsm, _self.park_collection)
	_local pcol1 << pcol.filter_by_predicate(predicate.count(:seats,predicate,:|>|,1))
	_local pcol2 << pcol.filter_by_predicate(predicate.wild(:name, "*summer*"))
	_local or_col << pcol1.union(pcol2)
	
	_local geom << or_col.spatial_collection(:coverage)
	
	_local fcol << rwan:sw_collection.new(dsm, _self.footpath_collection)
	_local fcol1 << fcol.filter_by_geometry(:centre_line, :overlapping, geom )
	
	_self.assert_is(fcol1.size, 12, "There are 12 footpaths crossing the Jesus green and Midsummer")
_endmethod
$


_pragma(classify_level=basic, topic={analysis})
_method spatial_analysis_col_mix_test_case.test_with_spatial_collection3()
	# first select the park with more then 1 seat: Jesus
	# Green. Then select all the *Midsummer Common* s common.
	# do an or.
	# Then find all the overlapping footpaths.
	_local dsm << rwan:analysis_dataset_manager.new(:test)
	_local pcol << rwan:sw_collection.new(dsm, _self.park_collection)
	_local pcol1 << pcol.filter_by_predicate(predicate.count(:seats,predicate,:|>|,1))
	_local geom1 << pcol1.spatial_collection(:coverage)
	
	_local pcol2 << pcol.filter_by_predicate(predicate.wild(:name, "*summer*"))
	_local geom2 << pcol2.spatial_collection(:coverage)
	
	_local union << geom1.union(geom2)
	
	_local fcol << rwan:sw_collection.new(dsm, _self.footpath_collection)
	_local fcol1 << fcol.filter_by_geometry(:centre_line, :overlapping, union )
	
	_self.assert_is(fcol1.size, 12, "There are 12 footpaths crossing the Jesus green and Midsummer")
_endmethod
$

