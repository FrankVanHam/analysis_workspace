#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:spatial_filter_col_test_case)

_pragma(classify_level=basic, topic={analysis})
##
## Test using geometry filters.
## The tactic is not to test all possible combinations of all
## geometry-types, but rather to test each possible operator
## for one and two geometries.
## operators: :disjoint_from ,:interacting_with ,:touching ,:dividing ,:overlaying ,:overlapping ,:within ,:containing ,:equal_to
def_slotted_exemplar(:spatial_filter_col_test_case,
	{},
	:base_analysis_db_test_case)
$

_pragma(classify_level=basic, topic={analysis})
_method spatial_filter_col_test_case.test_exposure()
	_local dsm << rwan:analysis_dataset_manager.new(:test)

	# road analytic collection and area 
	_local acol << rwan:sw_collection.new(dsm, _self.min_road_collection)
	_local area_col << _self.area_collection(dsm, {0,0,100,0,100,100,0,100,0,0})

	_local filter_col << acol.filter_by_geometry(:centre_line, :within, area_col, :geometry)
	_self.assert_equals( _self.min_road_collection, filter_col.expose(), "the core collection is still the road collection")

	_local filter_col2 << filter_col.filter_by_geometry(:centre_line, :within, area_col, :geometry)
	_self.assert_equals( _self.min_road_collection, filter_col2.expose(), "the core (2) collection is still the road collection")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method spatial_filter_col_test_case.test_disjoint()
	_self.create_park("p1", {0,0,50000,0,50000,50000,0,50000,0,0})
	_local dsm  << rwan:analysis_dataset_manager.new(:test)
	_local acol << rwan:sw_collection.new(dsm, _self.park_collection)

	# limit to this p1 area.
	_local overlapping_area_col << _self.area_collection(
					       dsm, {-10,-10, 50000+10,-10, 50000+10, 50000+10, -10, 50000+10, -10, -10})
	_local one_park_col << acol.filter_by_geometry(:coverage, :within, overlapping_area_col, :geometry)
	_self.assert_equals(1, one_park_col.size, "the overlapping col should have one area")

	_local pcol << _self.points_collection(dsm, {{60000,60000}})
	_local fcol << one_park_col.filter_by_geometry(:coverage, :disjoint_from, pcol, :geometry)
	_self.assert_equals(1, fcol.size, "the park is disjoint from the outside point")

	pcol << _self.points_collection(dsm, {{60000,60000}, {0,0}})
	fcol << one_park_col.filter_by_geometry(:coverage, :disjoint_from, pcol, :geometry)
	_self.assert_equals(0, fcol.size, "The park is not disjoint because 0,0 is touching")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method spatial_filter_col_test_case.test_interacting_with()
	_self.create_park("p1", {0,0,50000,0,50000,50000,0,50000,0,0})
	_local dsm  << rwan:analysis_dataset_manager.new(:test)
	_local acol << rwan:sw_collection.new(dsm, _self.park_collection)
	
	_local pcol << _self.points_collection(dsm, {{25000,25000}})
	_local fcol << acol.filter_by_geometry(:coverage, :interacting_with, pcol, :geometry)
	_self.assert_equals(1, fcol.size, "the park is interacting")
	
	pcol << _self.points_collection(dsm, {{60000,60000}, {0,0}})
	fcol << acol.filter_by_geometry(:coverage, :interacting_with, pcol, :geometry)
	_self.assert_equals(1, fcol.size, "The park is interacting with one, that is enough")
_endmethod
$


_pragma(classify_level=basic, topic={analysis})
_method spatial_filter_col_test_case.test_touching()
	_self.create_park("p1", {0,0,50000,0,50000,50000,0,50000,0,0})
	_self.create_park("p2", {50000,50000,100000,50000,100000,100000,50000,100000,50000,50000})
	_local dsm  << rwan:analysis_dataset_manager.new(:test)
	_local acol << rwan:sw_collection.new(dsm, _self.park_collection)
	
	_local pcol << _self.points_collection(dsm, {{50000,50000}})
	_local fcol << acol.filter_by_geometry(:coverage, :touching, pcol, :geometry)
	_self.assert_equals(2, fcol.size, "two parks are touching the point")
	
	pcol << _self.points_collection(dsm, {{50000,50000, -10, -10}})
	fcol << acol.filter_by_geometry(:coverage, :interacting_with, pcol, :geometry)
	_self.assert_equals(2, fcol.size, "two parks are touching the one point, not the other but that doesnt matter")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method spatial_filter_col_test_case.test_dividing()
	_self.create_road("road 1", {0,0, 100000, 0})
	_local dsm  << rwan:analysis_dataset_manager.new(:test)
	_local acol << rwan:sw_collection.new(dsm, _self.min_road_collection)
	
	_local pcol << _self.lines_collection(dsm, {{50000,50000, 50000, -10}})
	_local fcol << acol.filter_by_geometry(:centre_line, :dividing, pcol, :geometry)
	_self.assert_equals(1, fcol.size, "1 road is divided by the chain")
	
	pcol << _self.lines_collection(dsm, {{50000,50000, 50000, -10}, {100, 100, 200,100}})
	fcol << acol.filter_by_geometry(:centre_line, :dividing, pcol, :geometry)
	_self.assert_equals(1, fcol.size, "1 road is divided by one chain")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method spatial_filter_col_test_case.test_overlaying()
	_self.create_park("p1", {0,0,50000,0,50000,50000,0,50000,0,0})
	_local dsm  << rwan:analysis_dataset_manager.new(:test)
	_local acol << rwan:sw_collection.new(dsm, _self.park_collection)
	
	_local pcol << _self.areas_collection(dsm, {{25000,25000, 100000, 25000, 100000, 100000, 25000, 100000, 25000, 25000}})
	_local fcol << acol.filter_by_geometry(:coverage, :overlaying, pcol, :geometry)
	_self.assert_equals(1, fcol.size, "the park is overlaying the area")
	
	pcol << _self.points_collection(dsm, {{25000,25000, 100000, 25000, 100000, 100000, 25000, 100000, 25000, 25000},
					      {25000,25000, 100000, 25000, 100000, 100000, 25000, 100000, 25000, 25000}})
	fcol << acol.filter_by_geometry(:coverage, :interacting_with, pcol, :geometry)
	_self.assert_equals(1, fcol.size, "still return one park although it overlays twice")
	
	pcol << _self.points_collection(dsm, {{25000,25000, 100000, 25000, 100000, 100000, 25000, 100000, 25000, 25000},
					      {50010, 50010, 60000, 50010, 60000, 60000, 50010, 60000, 50010, 50010}})
	fcol << acol.filter_by_geometry(:coverage, :interacting_with, pcol, :geometry)
	_self.assert_equals(1, fcol.size, "still return one park although one does not overlay")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method spatial_filter_col_test_case.test_overlapping()
	_self.create_park("p1", {0,0,50000,0,50000,50000,0,50000,0,0})
	_local dsm  << rwan:analysis_dataset_manager.new(:test)
	_local acol << rwan:sw_collection.new(dsm, _self.park_collection)
	
	_local pcol << _self.areas_collection(dsm, {{25000, 25000, 60000, 25000, 60000, 60000, 25000, 60000, 25000, 25000}})
	_local fcol << acol.filter_by_geometry(:coverage, :overlapping, pcol, :geometry)
	_self.assert_equals(1, fcol.size, "the park is overlapping the area")
	
	pcol << _self.areas_collection(dsm, {{25000, 25000, 60000, 25000, 60000, 60000, 25000, 60000, 25000, 25000},
					      {50010, 50010, 60000, 50010, 60000, 60000, 50010, 60000, 50010, 50010}})
	fcol << acol.filter_by_geometry(:coverage, :overlapping, pcol, :geometry)
	_self.assert_equals(1, fcol.size, "still return one park although one does not overlap")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method spatial_filter_col_test_case.test_within()
	_self.create_park("p1", {0,0,50000,0,50000,50000,0,50000,0,0})
	_local dsm  << rwan:analysis_dataset_manager.new(:test)
	_local acol << rwan:sw_collection.new(dsm, _self.park_collection)
	
	_local pcol << _self.areas_collection(dsm, {{-10, -10, 50010, -10, 50010, 50010, -10, 50010, -10, -10}})
	_local fcol << acol.filter_by_geometry(:coverage, :within, pcol, :geometry)
	_self.assert_equals(1, fcol.size, "the park is within the area")
	
	pcol << _self.areas_collection(dsm, {{-10, -10, 50010, -10, 50010, 50010, -10, 50010, -10, -10},
					      {50010, 50010, 60000, 50010, 60000, 60000, 50010, 60000, 50010, 50010}})
	fcol << acol.filter_by_geometry(:coverage, :within, pcol, :geometry)
	_self.assert_equals(1, fcol.size, "still return one park although one is not overlapping")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method spatial_filter_col_test_case.test_containing()
	_self.create_park("p1", {0,0,50000,0,50000,50000,0,50000,0,0})
	_local dsm  << rwan:analysis_dataset_manager.new(:test)
	_local acol << rwan:sw_collection.new(dsm, _self.park_collection)
	
	_local pcol << _self.areas_collection(dsm, {{25000, 25000, 40000, 25000, 40000, 40000, 25000, 40000, 25000, 25000}})
	_local fcol << acol.filter_by_geometry(:coverage, :containing, pcol, :geometry)
	_self.assert_equals(1, fcol.size, "the park is containing the area")
	
	pcol << _self.areas_collection(dsm, {{25000, 25000, 40000, 25000, 40000, 40000, 25000, 40000, 25000, 25000},
					     {50010, 50010, 60000, 50010, 60000, 60000, 50010, 60000, 50010, 50010}})
	fcol << acol.filter_by_geometry(:coverage, :containing, pcol, :geometry)
	_self.assert_equals(1, fcol.size, "still return one park although one is not contained")
_endmethod
$


_pragma(classify_level=basic, topic={analysis})
_method spatial_filter_col_test_case.test_equals()
	_self.create_road("road 1", {0,0, 100000, 0})
	_local dsm  << rwan:analysis_dataset_manager.new(:test)
	_local acol << rwan:sw_collection.new(dsm, _self.min_road_collection)
	
	_local pcol << _self.lines_collection(dsm, {{0, 0, 100000, 0}})
	_local fcol << acol.filter_by_geometry(:centre_line, :equal_to, pcol, :geometry)
	_self.assert_equals(1, fcol.size, "1 road is equal to the chain")
	
	pcol << _self.lines_collection(dsm, {{0, 0, 100000, 0}, {100, 100, 200,100}})
	fcol << acol.filter_by_geometry(:centre_line, :equal_to, pcol, :geometry)
	_self.assert_equals(1, fcol.size, "1 road is equal to the chain")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method spatial_filter_col_test_case.test_area_collection()
	_self.create_park("p1", {0,0,50000,0,50000,50000,0,50000,0,0})
	_local dsm  << rwan:analysis_dataset_manager.new(:test)
	_local acol << rwan:sw_collection.new(dsm, _self.park_collection)
	
	_local pcol << _self.area_collection(dsm, {25000, 25000, 40000, 25000, 40000, 40000, 25000, 40000, 25000, 25000})
	_local fcol << acol.filter_by_geometry(:coverage, :containing, pcol, :geometry)
	_self.assert_equals(1, fcol.size, "the park is containing the area")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method spatial_filter_col_test_case.test_sw_collection()
	_self.create_park("outside", {0,0,50000,0,50000,50000,0,50000,0,0})
	_self.create_park("inside", {25000, 25000, 40000, 25000, 40000, 40000, 25000, 40000, 25000, 25000})
	
	_local dsm  << rwan:analysis_dataset_manager.new(:test)
	_local acol << rwan:sw_collection.new(dsm, _self.park_collection)
	
	_local fcol << acol.filter_by_geometry(:coverage, :containing, acol, :coverage)
	_self.assert_equals(1, fcol.size, "the park is containing the park")
	_self.assert_equals("outside", fcol.an_element().name, "the outside park is found")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method spatial_filter_col_test_case.test_geometry_set()
	_self.create_park("outside", {0,0,50000,0,50000,50000,0,50000,0,0})
	_self.create_park("inside", {25000, 25000, 40000, 25000, 40000, 40000, 25000, 40000, 25000, 25000})
	
	_local dsm  << rwan:analysis_dataset_manager.new(:test)
	_local acol << rwan:sw_collection.new(dsm, _self.park_collection)
	
	_local fcol << acol.filter_by_geometry(:coverage, :containing, acol, :coverage)
	_local gs << fcol.geometry_set(:coverage)
	_self.assert_equals(1, gs.size, "One element")
	_self.assert_not_unset(fcol.goto_bounds)
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method spatial_filter_col_test_case.test_basic()
	## Test includes?() and an_element() and size
	## 
	_local dsm  << rwan:analysis_dataset_manager.new(:test)
	_local park_col << rwan:sw_collection.new(dsm, _self.park_collection)
	
	_local p1 << _self.create_park("p1", bounding_box.new_with_size(0,100, 1000,1000).coords)
	_local p2 << _self.create_park("p2", bounding_box.new_with_size(1000,1000, 1000,1000).coords)
	_local p3 << _self.create_park("p3", bounding_box.new_with_size(2000,100, 1000,1000).coords)
	
	_local area_col << _self.area_collection(dsm, bounding_box.new_with_size(0,0,3000,200).coords)
	_local fcol << park_col.filter_by_geometry(:coverage, :interacting_with, area_col, :geometry)
	
	_self.assert_true(fcol.ref_collections.includes?(park_col), "Road is the base")
	_self.assert_true(fcol.includes?(p1), "P1 should be includes")
	_self.assert_false(fcol.includes?(p2), "P2 should not be includes")
	
	_local an << fcol.an_element()
	_self.assert_true((p1 = an) _orif (p3 = an), "Should be one of 2")
	_self.assert_equals(2, fcol.size, "Size = 2")
	
	# inverse if
	_local b_col << park_col.filter_by_bounds(:coverage, bounding_box.new_with_size(0,0,3000,1000))
	fcol << b_col.filter_by_geometry(:coverage, :disjoint_from, area_col, :geometry)
	_self.assert_true(fcol.includes?(p2), "P2 should be includes")
	_self.assert_false(fcol.includes?(p1), "P1 should not be includes")
	
	an << fcol.an_element()
	_self.assert_true((p2 = an), "Should be one really")
	_self.assert_equals(1, fcol.size, "Size = 1")
_endmethod
$
