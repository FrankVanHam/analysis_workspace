#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:spatial_analysis_col_test_case)

_pragma(classify_level=basic, topic={analysis})
##
## Test using sw_collections
#
def_slotted_exemplar(:sw_collection_test_case,
	{},
	:base_analysis_db_test_case)
$

_pragma(classify_level=basic, topic={analysis})
_method sw_collection_test_case.test_exposure()
	_local dsm << rwan:analysis_dataset_manager.new(:test)

	_local acol << rwan:sw_collection.new(dsm, _self.min_road_collection)
	_self.assert_equals(_self.min_road_collection, acol.expose(), "Expose should be a road")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method sw_collection_test_case.test_basic_size()
	_local dsm << rwan:analysis_dataset_manager.new(:test)

	# road analytic collection and area 
	_local acol << rwan:sw_collection.new(dsm, _self.min_road_collection)
	_self.assert_equals(_self.min_road_collection.size, acol.size, "sizes should match")
_endmethod
$


_pragma(classify_level=basic, topic={analysis})
_method sw_collection_test_case.test_basic()
	## Test includes?() and an_element() and size
	## 
	_local dsm  << rwan:analysis_dataset_manager.new(:test)
	
	_local p1 << _self.create_park("p1", bounding_box.new_with_size(0,100, 1000,1000).coords)
	
	_local fcol << rwan:sw_collection.new(dsm, _self.park_collection)
	
	_self.assert_true(fcol.ref_collections.empty?, "no base")
	_self.assert_true(fcol.includes?(p1), "P1 should be includes")
	_self.assert_false(fcol.includes?(_self.park_collection.record_exemplar), "rec ex should not be includes")
	
	_local an << fcol.an_element()
	_self.assert_true(an.source = _self.park_collection, "an element is part of the source")
	_self.assert_equals(_self.park_collection.size, fcol.size, "Size = same")
_endmethod
$
