#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

_pragma(classify_level=basic, topic={analysis})
##
## Test using geometry filters.
def_slotted_exemplar(:binary_op_mix_test_case,
	{},
	:base_analysis_test_case)
$


_pragma(classify_level=basic, topic={analysis})
_method binary_op_mix_test_case.test_on_spatial_analysis_col()
	_local dsm << analysis_dataset_manager.new(:temp)
	_local pcol << rwan:sw_collection.new(dsm, _self.park_collection)
	_local area << _self.area_surrounding_parkers_piece(dsm)
	_local pcol1 << pcol.filter_by_geometry(:coverage, :within, area)
	_local geom << pcol1.spatial_collection(:coverage)
	
	_local mbcol << rwan:sw_collection.new(dsm, _self.map_feature)
	_local touch_col << mbcol.filter_by_geometry(:building_area, :touching, geom)
	_local overlay_col << mbcol.filter_by_geometry(:building_area, :overlaying, geom)
	
	_local and_col << touch_col.union(overlay_col)
	_self.assert_is(and_col.size, 1, "There is one map feature adjecent to the park. 1")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method binary_op_mix_test_case.test_on_predicate_analysis_col()
	_local dsm << analysis_dataset_manager.new(:temp)
	_local pcol << rwan:sw_collection.new(dsm, _self.pub_rest_collection)
	_local pred1 << predicate.eq(:type, "Restaurant")
	_local pred2 << predicate.eq(:cuisine, "Chinese")
	_local pcol1 << pcol.filter_by_predicate(pred1)
	_local pcol2 << pcol.filter_by_predicate(pred2)
	_local and_col << pcol1.intersection(pcol2)
	_self.assert_is(and_col.size, 5, "There are 5 Chinese restaurants.a")
	
	_local pcol3 << pcol.filter_by_predicate(pred1 _and pred2)
	_self.assert_is(pcol3.size, 5, "There are 5 Chinese restaurants.b")
_endmethod
$

