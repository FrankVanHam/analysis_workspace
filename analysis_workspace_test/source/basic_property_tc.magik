#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:basic_property_tc)

_pragma(classify_level=basic, topic={analysis})
##
## Test using geometry filters.
def_slotted_exemplar(:basic_property_tc,
	{},
	:base_analysis_test_case)
$

_pragma(classify_level=basic, topic={analysis})
_method basic_property_tc.test_sw_col()
	_local dsm << analysis_dataset_manager.new(:temp)
	_local sw_col << rwan:sw_collection.new(dsm, _self.min_road_collection)
	_self.assert_true(sw_col.includes?(sw_col.an_element()), "Includes")
	_self.assert_false(sw_col.is_area?, "Is area")
	_self.assert_false(sw_col.is_spatial?, "Is spatial")
	_self.assert_true(sw_col.is_sw_collection?, "Is sw collection")
	_self.assert_true(sw_col.origin_is_sw_collection?, "is origin sw collection")
	_self.assert_true(sw_col.size_is_fast?, "size is fast?")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method basic_property_tc.test_filter_predicate_col()
	_local dsm << analysis_dataset_manager.new(:temp)
	_local hcol << rwan:sw_collection.new(dsm, _self.hotel_collection)
	_local pred << predicate.wild(:address1,"*o*")
	_local res << hcol.filter_by_predicate(pred)
	_self.assert_true(res.includes?(res.an_element()), "Includes")
	_self.assert_false(res.is_area?, "Is area")
	_self.assert_false(res.is_spatial?, "Is spatial")
	_self.assert_false(res.is_sw_collection?, "Is sw collection")
	_self.assert_true(res.origin_is_sw_collection?, "is origin sw collection")
	_self.assert_false(res.size_is_fast?, "size is fast?")
	
	pred << predicate.gt(:name, "C")
	res << hcol.filter_by_predicate(pred)
	_self.assert_true(res.includes?(res.an_element()), "Includes")
	_self.assert_false(res.is_area?, "Is area")
	_self.assert_false(res.is_spatial?, "Is spatial")
	_self.assert_false(res.is_sw_collection?, "Is sw collection")
	_self.assert_true(res.origin_is_sw_collection?, "is origin sw collection")
	_self.assert_true(res.size_is_fast?, "size is fast?")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method basic_property_tc.test_filter_distance_col()
	_local dsm << analysis_dataset_manager.new(:temp)
	_local res << _self.distance_road_collection(dsm)
	_self.assert_true(res.includes?(res.an_element()), "Includes")
	_self.assert_false(res.is_area?, "Is area")
	_self.assert_false(res.is_spatial?, "Is spatial")
	_self.assert_false(res.is_sw_collection?, "Is sw collection")
	_self.assert_true(res.origin_is_sw_collection?, "is origin sw collection")
	_self.assert_false(res.size_is_fast?, "size is fast?")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method basic_property_tc.test_view_col()
	_local dsm << analysis_dataset_manager.new(:temp)
	_local res << _self.office_company_view_collection(dsm)
	_self.assert_true(res.includes?(res.an_element()), "Includes")
	_self.assert_false(res.is_area?, "Is area")
	_self.assert_false(res.is_spatial?, "Is spatial")
	_self.assert_true(res.is_sw_collection?, "Is sw collection")
	_self.assert_true(res.origin_is_sw_collection?, "is origin sw collection")
	_self.assert_false(res.size_is_fast?, "size is fast?")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method basic_property_tc.test_binary_col()
	_local dsm << analysis_dataset_manager.new(:temp)
	_local res << _self.binary_op_hotel_collection(dsm)
	_self.assert_true(res.includes?(res.an_element()), "Includes")
	_self.assert_false(res.is_area?, "Is area")
	_self.assert_false(res.is_spatial?, "Is spatial")
	_self.assert_false(res.is_sw_collection?, "Is sw collection")
	_self.assert_true(res.origin_is_sw_collection?, "is origin sw collection")
	_self.assert_false(res.size_is_fast?, "size is fast?")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method basic_property_tc.test_follow_method_col()
	_local dsm << analysis_dataset_manager.new(:temp)
	_local res << _self.method_hotel_collection(dsm)
	_self.assert_true(res.includes?(res.an_element()), "Includes")
	_self.assert_false(res.is_area?, "Is area")
	_self.assert_false(res.is_spatial?, "Is spatial")
	_self.assert_false(res.is_sw_collection?, "Is sw collection")
	_self.assert_false(res.origin_is_sw_collection?, "is origin sw collection")
	_self.assert_false(res.size_is_fast?, "size is fast?")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method basic_property_tc.test_follow_join_col()
	_local dsm << analysis_dataset_manager.new(:temp)
	_local res << _self.join_road_collection(dsm)
	_self.assert_true(res.includes?(res.an_element()), "Includes")
	_self.assert_false(res.is_area?, "Is area")
	_self.assert_false(res.is_spatial?, "Is spatial")
	_self.assert_false(res.is_sw_collection?, "Is sw collection")
	_self.assert_true(res.origin_is_sw_collection?, "is origin sw collection")
	_self.assert_false(res.size_is_fast?, "size is fast?")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method basic_property_tc.test_follow_root_col()
	_local dsm << analysis_dataset_manager.new(:temp)
	_local res << _self.root_hotel_collection(dsm)
	_self.assert_true(res.includes?(res.an_element()), "Includes")
	_self.assert_false(res.is_area?, "Is area")
	_self.assert_false(res.is_spatial?, "Is spatial")
	_self.assert_false(res.is_sw_collection?, "Is sw collection")
	_self.assert_true(res.origin_is_sw_collection?, "is origin sw collection")
	_self.assert_false(res.size_is_fast?, "size is fast?")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method basic_property_tc.test_follow_topology_col()
	_local dsm << analysis_dataset_manager.new(:temp)
	_local res << _self.topology_hotel_collection(dsm)
	_self.assert_true(res.includes?(res.an_element()), "Includes")
	_self.assert_false(res.is_area?, "Is area")
	_self.assert_false(res.is_spatial?, "Is spatial")
	_self.assert_false(res.is_sw_collection?, "Is sw collection")
	_self.assert_true(res.origin_is_sw_collection?, "is origin sw collection")
	_self.assert_false(res.size_is_fast?, "size is fast?")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method basic_property_tc.test_follow_trace_col()
	_local dsm << analysis_dataset_manager.new(:temp)
	_local res << _self.trace_hotel_collection(dsm)
	_self.assert_true(res.includes?(res.an_element()), "Includes")
	_self.assert_false(res.is_area?, "Is area")
	_self.assert_false(res.is_spatial?, "Is spatial")
	_self.assert_false(res.is_sw_collection?, "Is sw collection")
	_self.assert_true(res.origin_is_sw_collection?, "is origin sw collection")
	_self.assert_false(res.size_is_fast?, "size is fast?")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method basic_property_tc.test_area_col()
	_local dsm << analysis_dataset_manager.new(:temp)
	_local res << _self.area_surrounding_parkers_piece(dsm)
	_self.assert_true(res.includes?(res.an_element()), "Includes")
	_self.assert_true(res.is_area?, "Is area")
	_self.assert_true(res.is_spatial?, "Is spatial")
	_self.assert_false(res.is_sw_collection?, "Is sw collection")
	_self.assert_false(res.origin_is_sw_collection?, "is origin sw collection")
	_self.assert_true(res.size_is_fast?, "size is fast?")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method basic_property_tc.test_buffer_area_col()
	_local dsm << analysis_dataset_manager.new(:temp)
	_local res << _self.buffer_collection(dsm)
	_self.assert_false(res.includes?(res.an_element()), "Includes")
	_self.assert_true(res.is_area?, "Is area")
	_self.assert_true(res.is_spatial?, "Is spatial")
	_self.assert_false(res.is_sw_collection?, "Is sw collection")
	_self.assert_false(res.origin_is_sw_collection?, "is origin sw collection")
	_self.assert_true(res.size_is_fast?, "size is fast?")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method basic_property_tc.test_buffer_sw_col_col()
	_local dsm << analysis_dataset_manager.new(:temp)
	_local hcol << rwan:sw_collection.new(dsm, _self.hotel_collection)
	_local res << hcol.buffer(:location, unit_value.new(1,:m))
	# by definition false
	_self.assert_false(res.includes?(res.an_element()), "Includes")
	_self.assert_true(res.is_area?, "Is area")
	_self.assert_true(res.is_spatial?, "Is spatial")
	_self.assert_false(res.is_sw_collection?, "Is sw collection")
	_self.assert_true(res.origin_is_sw_collection?, "is origin sw collection")
	# size is fast, geometry building not
	_self.assert_true(res.size_is_fast?, "size is fast?")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method basic_property_tc.test_area_binary_col()
	_local dsm << analysis_dataset_manager.new(:temp)
	_local res << _self.area_binary_collection(dsm)
	_self.assert_false(res.includes?(res.an_element()), "Includes")
	_self.assert_true(res.is_area?, "Is area")
	_self.assert_true(res.is_spatial?, "Is spatial")
	_self.assert_false(res.is_sw_collection?, "Is sw collection")
	_self.assert_false(res.origin_is_sw_collection?, "is origin sw collection")
	_self.assert_true(res.size_is_fast?, "size is fast?")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method basic_property_tc.test_spatial_col()
	_local dsm << analysis_dataset_manager.new(:temp)
	_local res << _self.spatial_hotel_collection(dsm)
	_self.assert_true(res.includes?(res.an_element()), "Includes")
	_self.assert_false(res.is_area?, "Is area")
	_self.assert_true(res.is_spatial?, "Is spatial")
	_self.assert_false(res.is_sw_collection?, "Is sw collection")
	_self.assert_true(res.origin_is_sw_collection?, "is origin sw collection")
	_self.assert_false(res.size_is_fast?, "size is fast?")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method basic_property_tc.test_on_spatial_binary_col()
	_local dsm << analysis_dataset_manager.new(:temp)
	_local res << _self.spatial_binary_collection(dsm)
	_self.assert_true(res.includes?(res.an_element()), "Includes")
	_self.assert_false(res.is_area?, "Is area")
	_self.assert_true(res.is_spatial?, "Is spatial")
	_self.assert_false(res.is_sw_collection?, "Is sw collection")
	_self.assert_true(res.origin_is_sw_collection?, "is origin sw collection")
	_self.assert_false(res.size_is_fast?, "size is fast?")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method basic_property_tc.test_geometry_col()
	_local dsm << analysis_dataset_manager.new(:temp)
	_local res << _self.geometry_road_collection(dsm)
	_self.assert_true(res.includes?(res.an_element()), "Includes")
	_self.assert_false(res.is_area?, "Is area")
	_self.assert_true(res.is_spatial?, "Is spatial")
	_self.assert_false(res.is_sw_collection?, "Is sw collection")
	_self.assert_false(res.origin_is_sw_collection?, "is origin sw collection")
	_self.assert_false(res.size_is_fast?, "size is fast?")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method basic_property_tc.test_record_col()
	_local dsm << analysis_dataset_manager.new(:temp)
	_local res << _self.record_hotel_collection(dsm)
	_self.assert_true(res.includes?(res.an_element()), "Includes")
	_self.assert_false(res.is_area?, "Is area")
	_self.assert_false(res.is_spatial?, "Is spatial")
	_self.assert_false(res.is_sw_collection?, "Is sw collection")
	_self.assert_false(res.origin_is_sw_collection?, "is origin sw collection")
	_self.assert_true(res.size_is_fast?, "size is fast?")
_endmethod
$

