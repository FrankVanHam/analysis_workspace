#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$


_pragma(classify_level=basic, topic={analysis})
##
## Test using geometry filters.
def_slotted_exemplar(:spatial_analysis_col_test_case,
	{},
	:base_analysis_test_case)
$

_pragma(classify_level=basic, topic={analysis})
_method simple_area_analyse_test_case.test_basic_area_analysis()

	_local dsm << rwan:analysis_dataset_manager.new(:test)
	_local col << _self.min_road_collection
	_local acol << rwan:sw_collection.new(dsm, col)
	
	_self.assert_is(col.size, acol.size, "basic size should be the same")

	_local sectors << _self.drafting_sectors("test_basic_area_analysis")
	_local an_area << pseudo_area.new(sectors)
	_local area_col << rwan:area_collection.new(dsm, an_area)
	_local acol2 << acol.filter_by_geometry( :centre_line, :within, area_col )
	_self.assert_is( acol2.size, 2, "There should be two roads within")
	
	acol2 << acol.filter_by_geometry( :centre_line, :overlapping, area_col )
	_self.assert_is( acol2.size, 2, "There should be 2 road overlapping")
	
	acol2 << acol.filter_by_geometry( :centre_line, :overlaying, area_col )
	_self.assert_is( acol2.size, 4, "There should be 4 roads overlaying")
	
	acol2 << acol.filter_by_geometry( :centre_line, :touching, area_col )
	_self.assert_is( acol2.size, 1, "There should be one road touching")

	_local geom_col << rwan:geometry_collection.new(dsm, geometry_set.new_with(sectors))
	acol2 << acol.filter_by_geometry( :centre_line, :dividing,  geom_col)
	_self.assert_is( acol2.size, 3, "There should be 3 roads dividing")
_endmethod
$

