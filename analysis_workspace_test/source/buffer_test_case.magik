#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:buffer_test_case)

_pragma(classify_level=basic, topic={analysis})
##
## Test distance filters.
##
def_slotted_exemplar(:buffer_test_case,
	{},
	:base_analysis_db_test_case)
$

#_pragma(classify_level=basic, topic={analysis})
#_method buffer_test_case.test_exposure()
#	_local dsm << rwan:analysis_dataset_manager.new(:test)
#	
#	_local road_col << rwan:sw_collection.new(dsm, _self.min_road_collection)
#	_local f_col << road_col.follow_method(:hotel_10)
#	_local r_col << f_col.follow_root(road_col)
#	
#	_self.assert_equals(_self.min_road_collection, r_col.expose(), "the core collection has moved to roads")
#	
#	_local area_col << _self.area_collection(dsm, {0,0,100,0,100,100,0,100,0,0})
#	_local filter_col << r_col.filter_by_distance(:centre_line, length_value(10,:m), _false, area_col, :geometry)
#	
#	_self.assert_equals(_self.min_road_collection, filter_col.expose(), "the core (2) collection is still the road collection")
#_endmethod
#$
#

_pragma(classify_level=basic, topic={analysis})
_method buffer_test_case.test_basics()
	_local dsm << rwan:analysis_dataset_manager.new(:test)
	
	_local r1 << _self.create_road("access1", {0,0,100000,0})
	_local h1 << _self.create_hotel("h1", {1000,1000})
	_local hotel_col << rwan:sw_collection.new(dsm, _self.hotel_collection)
	
	_local road_col << rwan:record_set_collection.new(dsm, {r1})
	_local b_col << road_col.buffer(:centre_line, length_value(1,:m), :circular, :circular)
	_self.assert_equals(1, b_col.size, "1 element")
	
	_local g_col << b_col.filter_by_geometry(:area, :within, hotel_col, :location)
	
	_self.assert_equals(1, g_col.size, "1 hotel in the bounds")
_endmethod
$
#
#_pragma(classify_level=basic, topic={analysis})
#_method buffer_test_case.create_test_2_deep()
#	_self.create_road("base road", {0,0,10000,0})
#	_self.create_road("off road", {1000,0,1000,10000})
#	_self.create_road("off road", {5000,0,5000,10000})
#	_self.create_road("off road", {7000,0,7000,10000})
#
#	_local h1 << _self.create_hotel("h1", {0,0})
#	_local h2 << _self.create_hotel("h2", {10000,0})
#	
#	_self.create_poi("p1", {1000,10000})
#	_self.create_poi("p2", {5000,10000})
#	_self.create_poi("p3", {7000,10000})
#	
#	_self.create_footpath("fp1", {1000,10000,5000,10000})
#	_self.create_footpath("fp2", {5000,10000,7000,10000})
#	>> {h1,h2}
#_endmethod
#$
#
#_pragma(classify_level=basic, topic={analysis})
#_method buffer_test_case.test_2_deep()
#
#	_local hotels << _self.create_test_2_deep(_false)
#	_local dsm << rwan:analysis_dataset_manager.new(:test)
#		
#	_local hotel_col << rwan:record_set_collection.new(dsm,hotels)
#	_local f_col << hotel_col.follow_trace(:location, _self.poi_collection,
#					      property_list.new(), length_value(20,:m))
#	_self.assert_equals(3, f_col.size, "the trace should find all three places")
#	
#	_local fp_col << f_col.follow_topology(:location, _self.footpath_collection)
#	_self.assert_equals(2, fp_col.size, "find the two footpaths")
#	
#	_local r_col << fp_col.follow_root(hotel_col)
#	_self.assert_equals(2, r_col.size, "find the two hotels that found the footpaths")
#_endmethod
#$
#
#_pragma(classify_level=basic, topic={analysis})
#_method buffer_test_case.test_2_deep_2()
#
#	_local hotels << _self.create_test_2_deep(_true)
#	_local dsm << rwan:analysis_dataset_manager.new(:test)
#		
#	_local hotel_col << rwan:record_set_collection.new(dsm,hotels)
#	_local f_col << hotel_col.follow_trace(:location, _self.poi_collection,
#					      property_list.new(), length_value(12,:m))
#	_local fp_col << f_col.follow_topology(:location, _self.footpath_collection)
#	_local r_col << fp_col.follow_root(hotel_col)
#	_self.assert_equals(1, r_col.size, "find the one hotel that found the footpaths")
#_endmethod
#$
#
#_pragma(classify_level=basic, topic={analysis})
#_method buffer_test_case.test_geometry_set()
#	_local dsm << rwan:analysis_dataset_manager.new(:test)
#	
#	_local r1 << _self.create_road("access1", {0,0,10000,0})
#	_local road_col << rwan:record_set_collection.new(dsm, {r1})
#	_local f_col << road_col.follow_method(:hotel_10)
#	_local r_col << f_col.follow_root(road_col)
#
#	_local gs << r_col.geometry_set(:centre_line)
#	
#	_self.assert_equals(1, gs.size, "1 road")
#	_self.assert_not_unset(r_col.goto_bounds)
#_endmethod
#$
