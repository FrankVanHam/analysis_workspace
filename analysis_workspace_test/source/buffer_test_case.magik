#
#  This file is part of Analysis Workshop.
#
#  Analysis Workshop is free software: you can redistribute it and/or modify
#  it under the terms of the Lesser GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Analysis Workshop is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Analysis Workshop.  If not, see <http://www.gnu.org/licenses/>.
#

_package rwan
$

#remex(:buffer_test_case)

_pragma(classify_level=basic, topic={analysis})
##
## Test distance filters.
##
def_slotted_exemplar(:buffer_test_case,
	{},
	:base_analysis_db_test_case)
$

_pragma(classify_level=basic, topic={analysis})
_method buffer_test_case.test_exposure()
	_local dsm << rwan:analysis_dataset_manager.new(:test)
	
	_local road_col << rwan:sw_collection.new(dsm, _self.min_road_collection)
	_local b_col << road_col.buffer(:centre_line, length_value(2,:m), :circular, :circular)
	_self.assert_equals(_self.min_road_collection, b_col.expose(), "the core collection is the road")
	
	_local area_col << _self.area_collection(dsm, {0,0,100,0,100,100,0,100,0,0})
	_local filter_col << b_col.filter_by_distance(:area, length_value(10,:m), _false, area_col, :geometry)
	
	_self.assert_equals(_self.min_road_collection, filter_col.expose(), "the core (2) collection is still the road collection")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method buffer_test_case.test_basics()
	_local dsm << rwan:analysis_dataset_manager.new(:test)
	
	_local r1 << _self.create_road("access1", {0,0,100000,0})
	_local h1 << _self.create_hotel("h1", {1000,1000})
	
	_local road_col << rwan:record_set_collection.new(dsm, {r1})
	_local b_col << road_col.buffer(:centre_line, length_value(2,:m), :circular, :circular)
	_self.assert_equals(1, b_col.size, "1 element")
	
	_local hotel_col << rwan:sw_collection.new(dsm, _self.hotel_collection)
	_local g_col << b_col.filter_by_geometry(:area, :containing, hotel_col, :location)
	_self.assert_equals(1, g_col.size, "1 buffer containing the hotel")

	_local d_col << b_col.filter_by_distance(:area, length_value(0,:m), _false, hotel_col, :location)
	_self.assert_equals(1, d_col.size, "1 buffer near the hotel")

	_local inv_g_col << hotel_col.filter_by_geometry(:location, :within, b_col, :area)
	_self.assert_equals(1, inv_g_col.size, "1 hotel in the buffer")

	_local inv_d_col << hotel_col.filter_by_distance(:location, length_value(0,:m), _false, b_col, :area)
	_self.assert_equals(1, inv_d_col.size, "1 hotel in the buffer")
_endmethod
$

_pragma(classify_level=basic, topic={analysis})
_method buffer_test_case.test_geometry_set()
	_local dsm << rwan:analysis_dataset_manager.new(:test)
	
	_local r1 << _self.create_road("access1", {0,0,100000,0})
	_local h1 << _self.create_hotel("h1", {1000,1000})
	
	_local road_col << rwan:record_set_collection.new(dsm, {r1})
	_local b_col << road_col.buffer(:centre_line, length_value(2,:m), :circular, :circular)
	
	_local gs << b_col.geometry_set(:area)
	
	_self.assert_equals(1, gs.size, "1 road")
	_self.assert_not_unset(b_col.goto_bounds)
_endmethod
$
